import{ab as s,G as a,H as n,ac as e}from"./framework-844b12a4.js";const l={},p=e(`<h1 id="_05-【排序与分页】" tabindex="-1"><a class="header-anchor" href="#_05-【排序与分页】" aria-hidden="true">#</a> 05 【排序与分页】</h1><h2 id="_1-排序数据" tabindex="-1"><a class="header-anchor" href="#_1-排序数据" aria-hidden="true">#</a> 1.排序数据</h2><p><mark>注：如果没有使用排序操作，默认情况下查询返回的数据是按照添加数据的顺序显示的。</mark></p><h3 id="_1-1-排序规则" tabindex="-1"><a class="header-anchor" href="#_1-1-排序规则" aria-hidden="true">#</a> 1.1 排序规则</h3><ul><li>使用 ORDER BY 子句排序 <ul><li><strong>ASC（ascend）: 升序（默认）</strong></li><li><strong>DESC（descend）:降序</strong></li></ul></li><li><strong>ORDER BY 子句在SELECT语句的结尾。</strong></li></ul><h3 id="_1-2-单列排序" tabindex="-1"><a class="header-anchor" href="#_1-2-单列排序" aria-hidden="true">#</a> 1.2 单列排序</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>   last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> department_id<span class="token punctuation">,</span> hire_date
<span class="token keyword">FROM</span>     employees
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> hire_date<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/57be74b30aea8a1fe43cb0d305fbdce7d4b5c4be.png" alt="image-20221010172549064" tabindex="0" loading="lazy"><figcaption>image-20221010172549064</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>   last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> department_id<span class="token punctuation">,</span> hire_date
<span class="token keyword">FROM</span>     employees
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> hire_date <span class="token keyword">DESC</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/d7c67209566c350aceb6aed01397bbbd584b623e.png" alt="image-20221010172611271" tabindex="0" loading="lazy"><figcaption>image-20221010172611271</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token operator">*</span><span class="token number">12</span> annsal
<span class="token keyword">FROM</span>   employees
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> annsal<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/cd4ec20458d11e419bcd3cb724126b03a87d2e02.png" alt="image-20221010174002420" tabindex="0" loading="lazy"><figcaption>image-20221010174002420</figcaption></figure><p>列的别名只能在 ORDER BY中使用，不能在WHERE中使用。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 如下操作报错!</span>
<span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> salary<span class="token operator">*</span><span class="token number">12</span> annsal
<span class="token keyword">FROM</span>   employees
<span class="token keyword">where</span> annal <span class="token operator">&gt;</span> <span class="token number">10000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-多列排序" tabindex="-1"><a class="header-anchor" href="#_1-3-多列排序" aria-hidden="true">#</a> 1.3 多列排序</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> department_id<span class="token punctuation">,</span> salary
<span class="token keyword">FROM</span>   employees
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">,</span> salary <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/2550a4caaecf240d5b6215de0c14bada6682439f.png" alt="image-20221010174033683" tabindex="0" loading="lazy"><figcaption>image-20221010174033683</figcaption></figure><ul><li>可以使用不在SELECT列表中的列排序。</li><li>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第一列数据中所有值都是唯一的，将不再对第二列进行排序。</li></ul><h2 id="_2-分页" tabindex="-1"><a class="header-anchor" href="#_2-分页" aria-hidden="true">#</a> 2.分页</h2><h3 id="_2-1-背景" tabindex="-1"><a class="header-anchor" href="#_2-1-背景" aria-hidden="true">#</a> 2.1 背景</h3><p>背景1：查询返回的记录太多了，查看起来很不方便，怎么样能够实现分页查询呢？</p><p>背景2：表里有 4 条数据，我们只想要显示第 2、3 条数据怎么办呢？</p><h3 id="_2-2-实现规则" tabindex="-1"><a class="header-anchor" href="#_2-2-实现规则" aria-hidden="true">#</a> 2.2 实现规则</h3><ul><li><p>分页原理</p><p>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</p></li><li><p><strong>MySQL中使用 LIMIT 实现分页</strong></p></li><li><p>格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">LIMIT</span> <span class="token punctuation">[</span>位置偏移量<span class="token punctuation">,</span><span class="token punctuation">]</span> 行数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示（<code>默认从0开始</code>），是一个可选参数，如果不指定“位置偏移量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是0，第二条记录的位置偏移量是1，以此类推）；第二个参数“行数”指示返回的记录条数。</p></li><li><p>举例</p></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 前10条记录：</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
或者
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token comment">-- 第11至20条记录：</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
 
<span class="token comment">-- 第21至30条记录： </span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MySQL 8.0中可以使用“<code>LIMIT 3 OFFSET 4</code>”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同。</p><ul><li>分页显式公式**：<code>（当前页数-1）\\*每页条数，每页条数</code>**</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span> 
<span class="token keyword">LIMIT</span> <span class="token punctuation">(</span>PageNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>PageSize<span class="token punctuation">,</span>PageSize<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>注意：LIMIT 子句必须放在整个SELECT语句的最后！</strong></li><li>使用 LIMIT 的好处</li></ul><p>约束返回结果的数量可以<code>减少数据表的网络传输量</code>，也可以<code>提升查询效率</code>。如果我们知道返回结果只有 1 条，就可以使用<code>LIMIT 1</code>，告诉 SELECT 语句只需要返回一条记录即可。这样的好处就是 SELECT 不需要扫描完整的表，只需要检索到一条符合条件的记录即可返回。</p><h2 id="_3-课后练习" tabindex="-1"><a class="header-anchor" href="#_3-课后练习" aria-hidden="true">#</a> 3.课后练习</h2><p><strong>1. 查询员工的姓名和部门号和年薪，按年薪降序 按姓名升序显示</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>    <span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>department_id<span class="token punctuation">,</span>salary <span class="token operator">*</span> <span class="token number">12</span> annual_sal 
    <span class="token keyword">FROM</span> employees 
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> annual_sal <span class="token keyword">DESC</span><span class="token punctuation">,</span>last_name <span class="token keyword">ASC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.选择工资不在 8000 到17000 员工的姓名和工资，按工资降序，显示第 21到40位置的数据</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary 
<span class="token keyword">FROM</span> employees 
<span class="token keyword">WHERE</span> salary <span class="token operator">NOT</span> <span class="token operator">BETWEEN</span> <span class="token number">8000</span> <span class="token operator">AND</span> <span class="token number">17000</span> 
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span> 
<span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3. 查询邮箱中包含 e 的员工信息，并先按邮箱的字节数降序，再按部门号 升序</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>email<span class="token punctuation">,</span>department_id 
<span class="token keyword">FROM</span> employees 
<span class="token comment">-- where email like &#39;%e%&#39; </span>
<span class="token keyword">WHERE</span> email <span class="token operator">REGEXP</span> <span class="token string">&#39;[e]&#39;</span> 
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> LENGTH<span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token keyword">DESC</span><span class="token punctuation">,</span>department_id <span class="token keyword">ASC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),i=[p];function o(t,d){return a(),n("div",null,i)}const r=s(l,[["render",o],["__file","05.html.vue"]]);export{r as default};
