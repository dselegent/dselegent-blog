import{ab as p,G as i,H as o,E as s,S as n,N as e,ac as t,W as r}from"./framework-09305b5d.js";const l={},c=t(`<h1 id="_01-【js-代码规范】" tabindex="-1"><a class="header-anchor" href="#_01-【js-代码规范】" aria-hidden="true">#</a> 01 【JS 代码规范】</h1><h2 id="_1-统一代码风格的重要性" tabindex="-1"><a class="header-anchor" href="#_1-统一代码风格的重要性" aria-hidden="true">#</a> 1. 统一代码风格的重要性</h2><h3 id="_1-1-为什么要统一代码风格" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么要统一代码风格" aria-hidden="true">#</a> 1.1 为什么要统一代码风格</h3><p>团队千千万，团队中每个人的代码风格也是千千万。比如有的同学写代码就喜欢用双引号，缩进用两个字符，而其他同学却可能更喜欢用单引号，四个字符缩进。而团队中的人一多，一往代码仓库提交代码，难免会出现下面这些情况：</p><p><strong>（1）如果没有统一代码风格，diff时可能会出现很多因为格式不同的问题，不便于我们查看提交代码所做的修改</strong></p><p>如下图所示，提交的文件内容其实没有变化，只是代码风格变了（双引号变成了单引号，缩进从两个字符变成了四个字符），但是diff时大段代码会标红，不利于我们查看提交的修改。</p><figure><img src="https://article.biliimg.com/bfs/article/a5157276b97574d7f5b2de64e23ec22964b6bd4d.png" alt="image-20230216213817926" tabindex="0" loading="lazy"><figcaption>image-20230216213817926</figcaption></figure><p><strong>（2）每个团队都有自己的标准，新人加入需要花较长时间才能熟悉团队所使用的代码风格，不利于效率的提</strong></p><h3 id="_1-2-如何统一代码风格" tabindex="-1"><a class="header-anchor" href="#_1-2-如何统一代码风格" aria-hidden="true">#</a> 1.2 如何统一代码风格</h3><p>为了统一代码风格，并且克服每个团队自己制定标准所带来的不足，一种简单方便的方法就是采用业界提供的标准和工具，也就是我们经常所说的<strong>Lint检查工具。前端中常用的Lint检查工具包括了JSLint、ESLint和Stylelint等，这些工具能够提供代码质量和代码风格检查的功能，并且可以根据个人/团队的代码风格进行对配置文件进行配置，有效的提高了我们代码开发的效率和质量</strong>。</p><p>下面主要列举了我们团队现在主要采用的一些Lint检查工具，以及相关的VSCode辅助插件，帮助我们完成JS代码规范、CSS代码规范和Git工作流规范的检查。</p><img src="https://article.biliimg.com/bfs/article/ad82aefda22780974d566f00b221abf35a98f83d.png" alt="image-20230216213900230" style="zoom:80%;"><h2 id="_2-eslint" tabindex="-1"><a class="header-anchor" href="#_2-eslint" aria-hidden="true">#</a> 2. ESLint</h2><h3 id="_2-1-什么是eslint" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是eslint" aria-hidden="true">#</a> 2.1 什么是ESLint</h3><p>ESLint 是一款插件化的JavaScript代码静态检查工具，其核心是通过对代码解析得到的 AST（Abstract Syntax Tree，抽象语法树）进行模式匹配，来分析代码达到检查代码质量和风格问题的能力。</p><p>ESLint 的使用其实并不复杂。安装相关依赖之后，可以直接使用开源的配置方案，例如eslint-config-airbnb或eslint-config-standard，当然，你也可以根据个人或团队的代码风格进行配置。配置完成之后，就可以通过命令行工具或借助编辑器集成的 ESLint 功能对工程代码进行静态检查，发现和修复不符合规范的代码，ESLint提供的auto-fix能力也能够帮助我们自动修复一些代码格式问题。</p><h3 id="_2-2-安装eslint" tabindex="-1"><a class="header-anchor" href="#_2-2-安装eslint" aria-hidden="true">#</a> 2.2 安装ESLint</h3><p><strong>（1）脚手架自动安装</strong></p><p>如果是采用脚手架如Vue-Cli创建项目，在创建项目时就可以选择安装ESLint，安装完成后，会自动在项目根目录生成一个.eslintrc.js文件，里面已经生成了ESLint的初始化默认配置。</p><figure><img src="https://article.biliimg.com/bfs/article/72b2731a5321ab1caea65a223645278f6ff0977e.png" alt="image-20230216213957788" tabindex="0" loading="lazy"><figcaption>image-20230216213957788</figcaption></figure><p><strong>（2）手动安装</strong></p><p>如果是已经存在一个项目，并且想要安装ESLint，可以通过npm的方式进行安装。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install eslint --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完成后，可以执行下面命令进行ESLint的初始化配置。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eslint --init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过一系列一问一答的环节后，你会发现在你项目根目录已经生成了一个 .eslintrc.js文件，该文件主要用来进行ESLint的配置。</p><figure><img src="https://article.biliimg.com/bfs/article/088b5a1bbc152771aeba736443cea949582a0576.png" alt="image-20230216214017062" tabindex="0" loading="lazy"><figcaption>image-20230216214017062</figcaption></figure><h3 id="_2-3-eslint配置方式" tabindex="-1"><a class="header-anchor" href="#_2-3-eslint配置方式" aria-hidden="true">#</a> 2.3 ESLint配置方式</h3><p>ESlint 被设计为完全可配置的，我们可以混合和匹配 ESLint 默认绑定的规则和自己定义的规则，根据实际需求对每一个规则进行开启或关闭，以让 ESLint 更适合我们的项目。一般有两种主要的方式来配置 ESLint：</p><p><strong>（1）Configuration Comments - 使用注释把lint规则嵌入到源码中</strong></p><p>这种配置方式允许我们使用JavaScript注释把配置信息直接嵌入到一个代码源文件中，如下面的代码所示，可以直接在代码中使用ESLint能够识别的注释方式，进行Lint规则的定义，下面的规则表示如果使用console语法便会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* eslint no-console: &quot;error&quot; */</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is an eslint rule check!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们用命令行执行eslint xxx.js检查上述文件时，就会发现eslint给出报错信息。</p><p><strong>（2）Configuration Files - 使用配置文件进行lint规则配置</strong></p><p>除了上面的配置方式，另外一个更好的方式就是在项目根目录创建配置文件进行ESLint的配置，目前配置文件主要支持以下三种文件类型：</p><ul><li>JavaScript（eslintrc.js）</li><li>YAML（eslintrc.yaml）</li><li>JSON（eslintrc.json）</li></ul><p>另外，我们也可以在package.json文件中添加 eslintConfig字段进行配置。</p><p>在我们团队平时的开发中，一般采用了在根目录创建.eslintrc.js的方式对eslint进行配置。如下图所示，给出了使用Vue-Cli创建项目后.eslintrc.js中的默认配置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;plugin:vue/essential&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@vue/prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&quot;babel-eslint&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;no-console&quot;</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;warn&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;no-debugger&quot;</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;warn&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-eslint配置项解析" tabindex="-1"><a class="header-anchor" href="#_2-4-eslint配置项解析" aria-hidden="true">#</a> 2.4 ESLint配置项解析</h3><p>接下来主要对ESLint配置文件中的配置项进行介绍。</p><p><strong>（1）parser解析器</strong></p><p>ESLint 默认使用Espreer作为其解析器，但是该解析器仅支持最新的ECMPScript(es5)标准，对于实验性的语法和非标准（例如 Flow或TypeScript类型）语法是不支持的。因此，开源社区提供了以下两种解析器来丰富相关的功能：</p><p>babel-eslint：Babel一个工具链，主要用于将ECMAScript 2015+(es6+) 版本的代码转换为向后兼容的JavaScript语法，以便能够运行在当前和旧版本的浏览器或其他环境中。因此，如果在项目中使用es6，就需要将解析器改成babel-eslint。</p><p>@typescript-eslint/parser：该解析器将TypeScript转换成与estree兼容的形式， 允许ESLint验证TypeScript源代码。</p><p><strong>（2）parserOptions解析器选项</strong></p><p>除了可以自定义解析器外，ESLint允许指定你想要支持的JavaScript语言选项。默认情况下，ESLint支持ECMPScript 5语法。你可以覆盖该设置，以启用对ECMPScript其它版本和JSX的支持。</p><p><strong>（3）env和global - 环境和全局变量</strong></p><p>ESLint 会检测未声明的变量，并发出警告，但是有些变量是我们引入的库声明的，这里就需要提前在配置中声明。每个变量有三个选项，writable，readonly和off，分别表示可重写，不可重写和禁用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;globals&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明 jQuery 对象为全局变量</span>
    <span class="token string-property property">&quot;$&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// true表示该变量为 writeable，而 false 表示 readonly</span>
    <span class="token string-property property">&quot;jQuery&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在globals中一个个的进行声明未免有点繁琐，这个时候就需要使用到env，这是对一个环境定义的一组全局变量的预设。当然，我们可以在golbals中使用字符串off禁用全局变量来覆盖env中的声明。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;browser&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;es2021&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;jquery&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 环境中开启jquery，表示声明了jquery相关的全局变量，无需在globals二次声明</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是微信小程序开发，env并没有定义微信小程序变量，需要在globals中手动声明全局变量，否则在文件中引入变量，会提示报错。声明如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">globals</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">wx</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">App</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Page</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Component</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">getApp</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">getCurrentPages</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">Behavior</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">global</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">__wxConfig</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）rules规则</strong></p>`,55),u={href:"https://cn.eslint.org/docs/rules/",target:"_blank",rel:"noopener noreferrer"},d=t(`<ul><li><p>off或 0：关闭规则</p></li><li><p>warn或 1：开启规则，warn级别的错误 (不会导致程序退出)</p></li><li><p>error或 2：开启规则，error级别的错误(当被触发的时候，程序会退出)</p><p>如以下代码，在rules中设置关闭某些规则</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;no-loop-func&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;no-param-reassign&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&#39;no-nested-ternary&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
   no<span class="token operator">-</span>underscore<span class="token operator">-</span>dangle<span class="token string">&#39;: &#39;</span>off&#39;<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（5）plugins插件</strong></p><p>虽然官方提供了上百种的规则可供选择，但是这还不够，因为官方的规则只能检查标准的JavaScript语法，如果你写的是JSX或者TypeScript，ESLint 的规则就开始束手无策了。</p><p>这个时候就需要安装 ESLint 的插件，来定制一些特定的规则进行检查。ESLint 的插件与扩展一样有固定的命名格式，以eslint-plugin-开头，使用的时候也可以省略这个头。</p><p>举个例子，我们要在项目中使用TypeScript，前面提到过，需要将解析器改为@typescript-eslint/parser，同时需要安装@typescript-eslint/eslint-plugin插件来拓展规则，添加的plugins中的规则默认是不开启的，我们需要在rules中选择我们要使用的规则。也就是说 plugins是要和rules结合使用的。如下所示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// npm i --save-dev @typescript-eslint/eslint-plugin    // 注册插件</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;parser&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@typescript-eslint/parser&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;@typescript-eslint&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// 引入插件</span>
  <span class="token string-property property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;@typescript-eslint/rule-name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;error&quot;</span>    <span class="token comment">// 使用插件规则</span>
    <span class="token string-property property">&#39;@typescript-eslint/adjacent-overload-signatures&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;@typescript-eslint/ban-ts-comment&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;@typescript-eslint/ban-types&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;@typescript-eslint/explicit-module-boundary-types&#39;</span><span class="token operator">:</span> <span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;@typescript-eslint/no-array-constructor&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;no-empty-function&#39;</span><span class="token operator">:</span> <span class="token string">&#39;off&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;@typescript-eslint/no-empty-function&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;@typescript-eslint/no-empty-interface&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;@typescript-eslint/no-explicit-any&#39;</span><span class="token operator">:</span> <span class="token string">&#39;warn&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;@typescript-eslint/no-extra-non-null-assertion&#39;</span><span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（6）extends扩展</strong></p><p>extends可以理解为一份配置好的plugin和rules，extends属性值一般包括以下两种：\`\`</p>`,9),v={href:"https://github.com/eslint/eslint/blob/v6.0.1/conf/eslint-recommended.js",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/yannickcr/eslint-plugin-react/blob/master/index.js#L108",target:"_blank",rel:"noopener noreferrer"},m=s("li",null,"字符串数组：每个配置继承它前面的配置。如下所示，拓展是一个数组，ESLint 递归地扩展配置, 然后使用rules属性来拓展或者覆盖extends配置规则。",-1),g=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 官方拓展</span>
        <span class="token string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 插件拓展</span>
        <span class="token string">&quot;standard&quot;</span><span class="token punctuation">,</span> <span class="token comment">// npm包，开源社区流行的配置方案，比如：eslint-config-airbnb、eslint-config-standard</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;rules&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
     <span class="token string-property property">&quot;indent&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 拓展或覆盖extends配置的规则</span>
      <span class="token string-property property">&quot;no-console&quot;</span><span class="token operator">:</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-运行eslint检查文件" tabindex="-1"><a class="header-anchor" href="#_2-5-运行eslint检查文件" aria-hidden="true">#</a> 2.5 运行ESLint检查文件</h3><p>当我们配置好.eslintrc.js文件后，我们就可以通过运行ESLint相关命令，对指定文件进行检查，假设当前的项目目录如下所示：</p><img src="https://article.biliimg.com/bfs/article/d3e6b7a9b79c7ff46cfbc3fe3fd05f709985facc.png" alt="image-20230216220756431" style="zoom:80%;"><p>其中，.eslintrc.js文件的配置如下，这里采用了Vue-Cli创建项目后给出的默认配置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">env</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;plugin:vue/essential&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;@vue/prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">parserOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">parser</span><span class="token operator">:</span> <span class="token string">&quot;babel-eslint&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;no-console&quot;</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;warn&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;no-debugger&quot;</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">&quot;production&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;warn&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;off&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们想对某个文件进行检查时，只需要在当前目录打开命令行窗口，输入以下命令，就可以对某个文件或某个目录下的所有文件进行检查。如果执行完命令后什么也没有输出，就说明我们的代码已经通过ESLint检查，可以放心提交代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>eslint src/APP.vue　　// 检查指定的文件
eslint src/*.vue　　  // 检查src目录下的所有文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果出现以下提示或报错，就说明我们的代码没有通过ESLint的检查，需要按照提示进行修改。</p><figure><img src="https://article.biliimg.com/bfs/article/92d5204ec22066dedfa3750a8f3401947949a527.png" alt="image-20230216221616412" tabindex="0" loading="lazy"><figcaption>image-20230216221616412</figcaption></figure><p>有些同学一执行完上述命令，可能会吓了一跳，怎么报了这么多错误？不急，我们可以执行以下的ESLint自动修复命令，对一些错误进行自动修复。不过，这个命令只能自动修复一些代码格式上的错误（比如ESLint的配置要求需要使用双引号，但是写代码时采用了单引号而报错），对于一些语法错误，就需要我们手动去修复。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>eslint src/APP.vue --fix   // 检查指定的文件，并且自动修复错误    
eslint src/*.vue --fix     // 检查src目录下的所有文件，并且自动修复错误
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-跳过eslint的检查" tabindex="-1"><a class="header-anchor" href="#_2-6-跳过eslint的检查" aria-hidden="true">#</a> 2.6 跳过ESLint的检查</h3><p>在实际的使用场景中，我们可能存在某些文件或某行代码，希望能够跳过ESLint的检查，下面主要介绍了几种跳过ESLint检查的方式：</p><p><strong>（1）使用注释跳过ESLint的检查</strong></p><ul><li>块注释： 使用如下方式，可以在整个文件或者代码块禁用所有规则或者禁用特定规则：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/* eslint-disable */</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;该注释放在文件顶部，整个文件都不会出现 lint 警告&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* eslint-disable */</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;块注释 - 禁用所有规则&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* eslint-enable */</span>

<span class="token comment">/* eslint-disable no-console, no-alert */</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;块注释 - 禁用 no-console, no-alert 特定规则&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/* eslint-enable no-console, no-alert */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>行注释： 使用如下方式可以在某一特定的行上禁用所有规则或者禁用特定规则：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;禁用该行所有规则&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// eslint-disable-line</span>

<span class="token comment">// eslint-disable-next-line</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;禁用该行所有规则&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* eslint-disable-next-line no-alert */</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;禁用该行 no-alert 特定规则&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>
 <span class="token string">&#39;禁用该行 no-alert, quotes, semi 特定规则&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* eslint-disable-line no-alert, quotes, semi*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（<strong>2）创建.eslintignore文件忽略某些文件的检查</strong></p><p>在项目根目录创建.eslintignore文件，在该文件中添加需要跳过检查的文件名称，ESLint将会跳过这些文件的检查。如下所示，ESLint将会跳过dist、node_modules和package.json文件的检查。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dist
node_modules
package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-prettier" tabindex="-1"><a class="header-anchor" href="#_3-prettier" aria-hidden="true">#</a> 3. Prettier</h2><h3 id="_3-1-什么是prettier" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是prettier" aria-hidden="true">#</a> 3.1 什么是Prettier</h3><p>Prettier是一个<strong>代码格式化工具，可以格式化代码，但不具备代码检查功能</strong>，它可以通过解析代码并使用自己的规则重新打印它，并考虑最大行长来强制一致的样式，并在必要时包装代码，如今，它已成为解决所有代码格式问题的优选方案，支持多种语言，可以将ESLint和Prettier结合使用，提高代码质量。</p><h3 id="_3-2-为什么要用prettier" tabindex="-1"><a class="header-anchor" href="#_3-2-为什么要用prettier" aria-hidden="true">#</a> 3.2 为什么要用Prettier</h3><p>上面Prettier的定义一看，是不是觉得和ESLint差不了多少？那么，有了ESLint，为什么还要用Prettier呢？</p><p>其实呀，**ESLint虽然是一个代码检测工具，可以检测代码质量问题并给出提示，但是提供的格式化功能有限，在代码风格上面做的不是很好，并且也只能格式化JS，不支持CSS,HTML等语言。而在代码风格上面，Prettier具有更加强大的功能，并且能够支持包括 JavaScript、TypeScript、各种 CSS、Vue 和 Markdown 等前端绝大部分的语言和文件格式。**因此，我们一般会将ESLint和Prettier一起结合起来使用，用ESLint进行代码校验，用Prettier统一代码风格。</p><h3 id="_3-3-安装prettier" tabindex="-1"><a class="header-anchor" href="#_3-3-安装prettier" aria-hidden="true">#</a> 3.3 安装Prettier</h3><p><strong>（1）脚手架自动安装</strong></p><p>如果是采用脚手架如Vue-Cli创建项目，在创建项目时就可以选择安装Prettier，安装完成后，会自动在项目根目录生成一个.prettierrc.js文件，里面的默认配置中已经包含了prettier的相关扩展。</p><figure><img src="https://article.biliimg.com/bfs/article/da4a5c1fd90d7625a79014d963cf60a8bb935c63.png" alt="image-20230216223830801" tabindex="0" loading="lazy"><figcaption>image-20230216223830801</figcaption></figure><p><strong>（2）手动安装</strong></p><p>如果已经存在一个项目，并且想要安装Prettier，可以通过npm的方式进行安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> prettier --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-4-安装eslint-config-prettier" tabindex="-1"><a class="header-anchor" href="#_3-4-安装eslint-config-prettier" aria-hidden="true">#</a> 3.4 安装eslint-config-prettier</h3><p>安装好Prettier之后，我们还需要安装eslint-config-prettier，这是因为eslint和prettier里面的一些规则可能会存在冲突，这个时候我们就需要安装eslint-config-prettier，并且关掉所有和prettier冲突的eslint配置。</p><p>通过npm安装eslint-config-prettier。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install eslint-config-prettier --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装好eslint-config-prettier之后，接下来我们就需要关掉所有和prettier冲突的eslint配置。这里只需要在.eslintrc.js的extends中将prettier设置为最后一个extends即可，相当于用 prettier 的规则，覆盖掉 eslint:recommended 的部分规则。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-5-安装eslint-plugin-prettier" tabindex="-1"><a class="header-anchor" href="#_3-5-安装eslint-plugin-prettier" aria-hidden="true">#</a> 3.5 安装eslint-plugin-prettier</h3><p>接下来，我们还需要安装eslint-plugin-prettier，eslint-plugin-prettier的作用时是将prettier 的能力集成到eslint中，使得我们在运行eslint检查我们的代码时，能够按照prettier的规则检查代码规范性，并进行修复。</p><p>使用npm安装eslint-plugin-prettier。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install eslint-plugin-prettier
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装eslint-plugin-prettier后，需要对.eslintrc.js进行配置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;prettier&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;rules&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;prettier/prettier&quot;</span><span class="token operator">:</span><span class="token string">&quot;error&quot;</span> 
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面这种配置之外，我们也可以直接将上面两个步骤结合在一起，使用下面的配置就可以。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
 <span class="token string-property property">&quot;extends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
     <span class="token string">&quot;eslint:recommended&quot;</span><span class="token punctuation">,</span>
     <span class="token string">&quot;plugin:prettier/recommended&quot;</span>
 <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-配置文件" tabindex="-1"><a class="header-anchor" href="#_3-6-配置文件" aria-hidden="true">#</a> 3.6 配置文件</h3><p>Prettier和ESLint一样，支持我们通过配置文件的方式，实现自定义配置，覆盖原来的Prettier配置。</p><p>我们可以在根目录创建.prettierrc文件，.prettierrc文件支持写入YAML，JSON的配置格式，并且支持.yaml，.yml，.json和.js后缀。在平时的开发中，我们团队一般会选择创建.prettierrc.js文件，实现对prettier配置的覆盖。</p><figure><img src="https://article.biliimg.com/bfs/article/e2e58c6ef8823740a5b738642b6300464ca59251.png" alt="image-20230216224516405" tabindex="0" loading="lazy"><figcaption>image-20230216224516405</figcaption></figure><p>在.prettierrc.js文件中，我们可以对prettier的默认配置进行修改。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 一行最多 120 字符</span>
  <span class="token literal-property property">printWidth</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>
  <span class="token comment">// 使用 2 个空格缩进</span>
  <span class="token literal-property property">tabWidth</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token comment">// 不使用缩进符，而使用空格</span>
  <span class="token literal-property property">useTabs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 行尾需要有分号</span>
  <span class="token literal-property property">semi</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 使用单引号</span>
  <span class="token literal-property property">singleQuote</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// 对象的 key 仅在必要时用引号</span>
  <span class="token literal-property property">quoteProps</span><span class="token operator">:</span> <span class="token string">&#39;as-needed&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// jsx 不使用单引号，而使用双引号</span>
  <span class="token literal-property property">jsxSingleQuote</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 末尾需要有逗号</span>
  <span class="token literal-property property">trailingComma</span><span class="token operator">:</span> <span class="token string">&#39;all&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 大括号内的首尾需要空格</span>
  <span class="token literal-property property">bracketSpacing</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token comment">// jsx 标签的反尖括号需要换行</span>
  <span class="token literal-property property">jsxBracketSameLine</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 箭头函数，只有一个参数的时候，也需要括号</span>
  <span class="token literal-property property">arrowParens</span><span class="token operator">:</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 每个文件格式化的范围是文件的全部内容</span>
  <span class="token literal-property property">rangeStart</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rangeEnd</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token comment">// 不需要写文件开头的 @prettier</span>
  <span class="token literal-property property">requirePragma</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 不需要自动在文件开头插入 @prettier</span>
  <span class="token literal-property property">insertPragma</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 使用默认的折行标准</span>
  <span class="token literal-property property">proseWrap</span><span class="token operator">:</span> <span class="token string">&#39;preserve&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 根据显示样式决定 html 要不要折行</span>
  <span class="token literal-property property">htmlWhitespaceSensitivity</span><span class="token operator">:</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// vue 文件中的 script 和 style 内不用缩进</span>
  <span class="token literal-property property">vueIndentScriptAndStyle</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// 换行符使用 lf</span>
  <span class="token literal-property property">endOfLine</span><span class="token operator">:</span> <span class="token string">&#39;lf&#39;</span><span class="token punctuation">,</span>
  <span class="token comment">// 格式化内嵌代码</span>
  <span class="token literal-property property">embeddedLanguageFormatting</span><span class="token operator">:</span> <span class="token string">&#39;auto&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-忽略某些文件的格式化" tabindex="-1"><a class="header-anchor" href="#_3-7-忽略某些文件的格式化" aria-hidden="true">#</a> 3.7 忽略某些文件的格式化</h3><p>Prettier和ESLint一样，也支持忽略对某些文件的格式化。如果我们存在一些不需要格式化的文件，可以在根目录创建.prettierignore文件，并且将不需要格式化的文件或目录名称写在该文件中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dist
node_modules
.eslintignore
.prettierignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-vscode插件" tabindex="-1"><a class="header-anchor" href="#_4-vscode插件" aria-hidden="true">#</a> 4. VSCode插件</h2><h3 id="_4-1-安装vscode插件" tabindex="-1"><a class="header-anchor" href="#_4-1-安装vscode插件" aria-hidden="true">#</a> 4.1 安装VSCode插件</h3><p>配置好ESLint和Prettier之后，我们通过运行eslint命令，就可以对我们代码进行检查啦。但是，每次要手动运行命令才能检查我们的代码还是有点麻烦，有没有更简单的方式，让我们在编写代码的过程中，只要保存文件就能够对当前文件进行检查，并且自动修复一些错误呢？接下来，接下来，VSCode插件就登场啦~</p><p>首先，我们需要安装的ESLint插件，安装方法很简单，在VSCode的EXTENSIONS中找到ESLint插件，然后点击install就可以啦。</p><figure><img src="https://article.biliimg.com/bfs/article/3491422afcad5e5d496714a84ba9dede24a1ed5d.png" alt="image-20230216224629340" tabindex="0" loading="lazy"><figcaption>image-20230216224629340</figcaption></figure><p>接着，我们还需要安装Prettier插件。</p><figure><img src="https://article.biliimg.com/bfs/article/6f903e20cb543e70d2d0836a56faa28ec1bf6cfc.png" alt="image-20230216224640206" tabindex="0" loading="lazy"><figcaption>image-20230216224640206</figcaption></figure><p>最后，我们也把EditorConfig for VS Code插件安装上，这个插件可以让编译器读取配置文件，并且按照配置文件里面的规定来格式化代码，有了这个插件，只要定义好一份配置文件，就算团队成员用的编译器不同，也能够输出风格统一的代码。</p><figure><img src="https://article.biliimg.com/bfs/article/fdbb43c03d279912b33f6d58f01c1f29df14f932.png" alt="image-20230216224652284" tabindex="0" loading="lazy"><figcaption>image-20230216224652284</figcaption></figure><h3 id="_4-2-配置settings-json文件" tabindex="-1"><a class="header-anchor" href="#_4-2-配置settings-json文件" aria-hidden="true">#</a> 4.2 配置settings.json文件</h3><p>安装好插件之后，我们还需要设置VSCode的settings.json文件，实现保存代码时就自动执行ESLint检查。VSCode的setting.json设置分为工作区和用户两个级别，其中用户区会对所有项目生效，而工作区的设置只会对当前项目生效。</p><p><strong>（1）用户区settings.json配置</strong></p><p>点击VSCode左下角的设置按钮，选择Settings，选择以文本编辑形式打开settings.json，并且在setting.json中加入以下代码。配置完成之后，当我们保存某个文件时，就可以自动对当前文件进行ESLint检查，并且自动对一些错误进行修复啦。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token comment">// #每次保存的时候自动格式化</span>
  <span class="token property">&quot;editor.formatOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;editor.codeActionsOnSave&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;source.fixAll.eslint&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）工作区settings.json配置</strong></p><p>除了配置用户区的settings.json之外，我们也可以配置工作区的settings.json，工作区的配置只会对当前项目生效。</p><p>首先，我们需要在项目根目录创建.vscode目录，并且在该目录下创建settings.json文件。</p><img src="https://article.biliimg.com/bfs/article/ceb389219dfdeb05b570cd662080c44d66fa2a87.png" alt="image-20230216224735432" style="zoom:67%;"><p>接着，在settings.json中加入以下代码，配置完成后，当我们保存该项目中某个文件时，也会自动对该文件进行ESLint检查，并且自动修复一些问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;editor.formatOnSave&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;editor.codeActionsOnSave&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;source.fixAll.eslint&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;eslint.validate&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;typescript&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;javascript&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-配置editorconfig文件" tabindex="-1"><a class="header-anchor" href="#_4-3-配置editorconfig文件" aria-hidden="true">#</a> 4.3 配置EditorConfig文件</h3><p>上面在安装VSCode插件时，我们提到了要安装EditorConfig for VS Code插件，那这个插件需要怎么起作用呢？</p><p>首先，我们需要在项目根目录创建.editorconfig文件。创建完成之后，这个文件里面定义的代码规范规则会高于编译器默认的代码规范规则。</p><img src="https://article.biliimg.com/bfs/article/8fe019124200cf275dfd1a9836d76b9437a71ec1.png" alt="image-20230216224801532" style="zoom:67%;"><p>接着，我们只需要在.editorconfig文件中加入我们想要覆盖的编译器的配置，比如下面的配置定义了缩进为2个空格，那么就算编译器默认的是4个空格的缩进，最后也会按照我们的.editorconfig配置，按照2个空格进行缩进。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true
end_of_line = auto
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们完成上面的步骤之后，接下来我们只要编写代码，保存，就能够得到一份风格统一的代码啦~</p>`,85);function b(y,f){const a=r("ExternalLinkIcon");return i(),o("div",null,[c,s("p",null,[n("ESLint 附带有"),s("a",u,[n("大量的规则"),e(a)]),n("，你可以在配置文件的rules属性中配置你想要的规则。要改变一个规则设置，你必须将规则 ID 设置为下列值之一：")]),d,s("ul",null,[s("li",null,[n("指定配置的字符串: 比如官方提供的两个拓展"),s("a",v,[n("eslint:recommended"),e(a)]),n("或"),s("a",k,[n("eslint:all"),e(a)]),n("，可以启用当前安装的 ESLint 中所有的核心规则，省得我们在rules中一一配置。")]),m]),g])}const q=p(l,[["render",b],["__file","01.html.vue"]]);export{q as default};
