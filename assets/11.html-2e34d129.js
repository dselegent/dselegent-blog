const n=JSON.parse(`{"key":"v-5b52f998","path":"/front_end/js_advanced/es6/11.html","title":"11【async 函数】","lang":"zh-CN","frontmatter":{"description":"11【async 函数】 1.基本用法 async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。 下面是一个例子。 async function getStockPriceByName(name) { const symbol = await getStockSymbol(name); const stockPrice = await getStockPrice(symbol); return stockPrice; } getStockPriceByName('goog').then(function (result) { console.log(result); });","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.icu/front_end/js_advanced/es6/11.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"11【async 函数】"}],["meta",{"property":"og:description","content":"11【async 函数】 1.基本用法 async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。 下面是一个例子。 async function getStockPriceByName(name) { const symbol = await getStockSymbol(name); const stockPrice = await getStockPrice(symbol); return stockPrice; } getStockPriceByName('goog').then(function (result) { console.log(result); });"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11【async 函数】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.基本用法","slug":"_1-基本用法","link":"#_1-基本用法","children":[]},{"level":2,"title":"2.语法","slug":"_2-语法","link":"#_2-语法","children":[{"level":3,"title":"2.1 返回 Promise 对象","slug":"_2-1-返回-promise-对象","link":"#_2-1-返回-promise-对象","children":[]},{"level":3,"title":"2.2 Promise 对象的状态变化","slug":"_2-2-promise-对象的状态变化","link":"#_2-2-promise-对象的状态变化","children":[]},{"level":3,"title":"2.3 await 命令","slug":"_2-3-await-命令","link":"#_2-3-await-命令","children":[]},{"level":3,"title":"2.4 错误处理","slug":"_2-4-错误处理","link":"#_2-4-错误处理","children":[]}]},{"level":2,"title":"3.使用注意点","slug":"_3-使用注意点","link":"#_3-使用注意点","children":[]},{"level":2,"title":"4.es13新增","slug":"_4-es13新增","link":"#_4-es13新增","children":[]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":8.35,"words":2506},"filePathRelative":"front_end/js_advanced/es6/11.md","localizedDate":"2023年1月30日","excerpt":"<h1> 11【async 函数】</h1>\\n<h2> 1.基本用法</h2>\\n<p><code>async</code>函数返回一个 Promise 对象，可以使用<code>then</code>方法添加回调函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p>\\n<p>下面是一个例子。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">getStockPriceByName</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> symbol <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">getStockSymbol</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> stockPrice <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">getStockPrice</span><span class=\\"token punctuation\\">(</span>symbol<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">return</span> stockPrice<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">getStockPriceByName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'goog'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">result</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
