import{ab as a,G as t,H as p,ac as s,E as n}from"./framework-09305b5d.js";const e={},o=s(`<h1 id="_06-【函数-下-】" tabindex="-1"><a class="header-anchor" href="#_06-【函数-下-】" aria-hidden="true">#</a> 06 【函数（下）】</h1><h2 id="_1-用new操作符调用函数" tabindex="-1"><a class="header-anchor" href="#_1-用new操作符调用函数" aria-hidden="true">#</a> 1.用new操作符调用函数</h2><p>现在，我们学习一种新的函数调用方式：<code>new 函数()</code></p><p>你可能知道 new 操作符和 “面向对象” 息息相关，但是现在我们先不探讨它的 “面向对象” 意义，而是先把用 new 调用函数的执行步骤和它上下文弄清楚。</p><h3 id="_1-1-用new调用函数的四步走" tabindex="-1"><a class="header-anchor" href="#_1-1-用new调用函数的四步走" aria-hidden="true">#</a> 1.1 用new调用函数的四步走</h3><p>JS 规定，使用 new 操作符调用函数会进行 “四步走”：</p><ol><li>函数体内会自动创建出一个空白对象</li><li>函数的上下文（this）会指向这个对象</li><li>函数体内的语句会执行</li><li>函数会自动返回上下文对象，即使函数没有 return 语句</li></ol><h3 id="_1-2-四步走详解" tabindex="-1"><a class="header-anchor" href="#_1-2-四步走详解" aria-hidden="true">#</a> 1.2 四步走详解</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// fun { a: 3, b: 5 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【第一步：函数体内会自动创建出一个空白对象】</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/ff0b62fdc7a6e8989c73adea482e9d9e4656a586.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>【第二步：函数的上下文（this）会指向这个对象】</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/1e7346e5533f239cbf457ee686d08f24bb9ef97a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>【第三步：执行函数体中的语句】</strong></p><blockquote><p>之后这个对象就不再是空对象了。</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/a12b06c4f4aab35ecb5f09cefecc8d19f6db9016.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>【第四步：函数会自动返回上下文对象，即使函数没有 return 语句】</strong></p>`,17),c=n("blockquote",{"a:":"","3,":"","b:":"",5:""},[n("p",null,"执行结果为：")],-1),i=s(`<figure><img src="https://i0.hdslb.com/bfs/album/5c2a93aff832c8dbefb66c427a347cc8e7b1e852.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【案例】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// fun { a: 3, b: 6, c: 36 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-上下文规则总结" tabindex="-1"><a class="header-anchor" href="#_1-3-上下文规则总结" aria-hidden="true">#</a> 1.3 上下文规则总结</h3><table><thead><tr><th>规则</th><th>上下文</th></tr></thead><tbody><tr><td><code>对象.函数()</code></td><td>对象</td></tr><tr><td><code>函数()</code></td><td>window</td></tr><tr><td><code>数组[下标]()</code></td><td>数组</td></tr><tr><td><code>IIFE</code></td><td>window</td></tr><tr><td><code>定时器</code></td><td>window</td></tr><tr><td><code>DOM事件处理函数</code></td><td>绑定 DOM 的元素</td></tr><tr><td><code>call和apply</code></td><td>任意指定</td></tr><tr><td><code>用new调用函数</code></td><td>秘密创建出的对象</td></tr></tbody></table><h2 id="_2-构造函数" tabindex="-1"><a class="header-anchor" href="#_2-构造函数" aria-hidden="true">#</a> 2.构造函数</h2><figure><img src="https://i0.hdslb.com/bfs/album/4ba104ec372c3827894f3e82cddbc9e7c5064105.png" alt="image-20220813220531771" tabindex="0" loading="lazy"><figcaption>image-20220813220531771</figcaption></figure><h3 id="_2-1-什么是构造函数" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是构造函数" aria-hidden="true">#</a> 2.1 什么是构造函数</h3><p>构造函数是专门用来创建对象的函数<br><strong>一个构造函数我们也可以称为一个类</strong><br> 通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例<br> 通过同一个构造函数创建的对象，我们称为一类对象<br> 构造函数就是一个普通的函数，只是他的调用方式不同，<br> 如果直接调用，它就是一个普通函数<br> 如果使用new来调用，则它就是一个构造函数</p><p>我们将之前书写的函数进行一下小改进：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 书写规范：构造函数首字母大写</span>
<span class="token comment">// 接收三个参数</span>
<span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// this上绑定三个参数的同名属性</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 传入三个参数</span>
<span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> xiaohong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> xiaogang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小刚&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// People { name: &#39;小明&#39;, age: 12, sex: &#39;男&#39; }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaohong<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// People { name: &#39;小红&#39;, age: 10, sex: &#39;女&#39; }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaogang<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// People { name: &#39;小刚&#39;, age: 13, sex: &#39;男&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用 new 调用一个函数，这个函数就被称为 “构造函数”，任何函数都可以是构造函数，只需要用 new 调用它</li><li>顾名思义，构造函数用来 “构造新对象”，它内部的语句将为新对象添加若干属性和方法，完成对象的初始化</li><li>构造函数必须用 new 关键字调用，否则不能正常工作，正因如此，开发者约定构造函数命名时首字母要大写</li></ul><blockquote><p>注意：一个函数是不是构造函数，要看它是否用 new 调用，而至于名称首字母大写，完全是开发者的习惯约定。</p></blockquote><h3 id="_2-2-如果不用new调用构造函数" tabindex="-1"><a class="header-anchor" href="#_2-2-如果不用new调用构造函数" aria-hidden="true">#</a> 2.2 如果不用new调用构造函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">People</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">People</span><span class="token punctuation">(</span><span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">People</span><span class="token punctuation">(</span><span class="token string">&#39;小刚&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* 此时的 this 为 windown 对象，所以下面三条语句会依次给 windown 的三个属性（全局变量）赋值又相互覆盖 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-为对象添加方法" tabindex="-1"><a class="header-anchor" href="#_2-3-为对象添加方法" aria-hidden="true">#</a> 2.3 为对象添加方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
    <span class="token comment">// 添加方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;，我&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&#39;岁了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> xiaohong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小红&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> xiaogang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小刚&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xiaoming<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xiaohong<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xiaogang<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> say <span class="token operator">=</span> xiaoming<span class="token punctuation">.</span>sayHello<span class="token punctuation">;</span>
<span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/*
我是小明，我12岁了
我是小红，我10岁了
我是小刚，我13岁了
我是undefined，我undefined岁了（上下文为 window）
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：直接将方法写在构造函数中的方式是不妥的，后面会讲解原因。</p></blockquote><h2 id="_3-类与实例" tabindex="-1"><a class="header-anchor" href="#_3-类与实例" aria-hidden="true">#</a> 3.类与实例</h2><h3 id="_3-1-基本介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-基本介绍" aria-hidden="true">#</a> 3.1 基本介绍</h3><figure><img src="https://i0.hdslb.com/bfs/album/70020571a04b4bc0e622e9475451a275c516ebb7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【类好比是 “蓝图”】</p><p>如同 “蓝图” 一样，类只描述对象会拥有哪些属性和方法，但是并不具体指明属性的值。</p><p>【实例是具体的对象】</p><figure><img src="https://i0.hdslb.com/bfs/album/9716c6eeaccc1fd705a3d46c5180f02c68682a0c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【构造函数和 “类”】</p><ul><li>Java、C++ 等是 <strong>“面向对象”</strong> 语言</li><li>JavaScript 是 <strong>“基于对象”</strong> 语言</li><li>JavaScript 中的构造函数可以类比于 OO 语言中的 “类”，写法的确类似，但和真正 OO语言 还是有本质不同，在后续课程还将看见 JS 和其他 OO 语言完全不同的、特有的原型特性。</li></ul><blockquote><p>JS 构造函数 ≈ OO 语言 “类”</p><p>JS 构造函数可以看做是面向对象语言中的 “类”</p></blockquote><h3 id="_3-2-实例成员和静态成员" tabindex="-1"><a class="header-anchor" href="#_3-2-实例成员和静态成员" aria-hidden="true">#</a> 3.2 实例成员和静态成员</h3><figure><img src="https://i0.hdslb.com/bfs/album/f584e1e793b649b653ede2d197dd501329b9c16c.png" alt="image-20220813220653492" tabindex="0" loading="lazy"><figcaption>image-20220813220653492</figcaption></figure><p><code>new</code>出来的实例对象就是构造函数内部的<code>this</code><strong>实例成员</strong>就是<code>this</code>后面的属性和方法</p><figure><img src="https://i0.hdslb.com/bfs/album/a325098ff8a551375a8c415ac701110d24cda534.png" alt="image-20220813220700738" tabindex="0" loading="lazy"><figcaption>image-20220813220700738</figcaption></figure><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
			<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gender</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sex</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
					console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
			Person<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;ds&#39;</span><span class="token punctuation">;</span>
			Person<span class="token punctuation">.</span><span class="token function-variable function">sex</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span><span class="token punctuation">;</span>
			<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;ds&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			p1<span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			Person<span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://fastly.jsdelivr.net/gh/dselegent/picture_bed@master/img/202206071108258.png" alt="image-20220607110855302" tabindex="0" loading="lazy"><figcaption>image-20220607110855302</figcaption></figure><ul><li>实例成员的this指向实例对象</li><li>静态成员的this指向该构造函数本身</li></ul><h2 id="_4-原型-prototype" tabindex="-1"><a class="header-anchor" href="#_4-原型-prototype" aria-hidden="true">#</a> 4.原型(prototype)</h2><h3 id="_4-1-什么是prototype" tabindex="-1"><a class="header-anchor" href="#_4-1-什么是prototype" aria-hidden="true">#</a> 4.1 什么是prototype</h3><figure><img src="https://i0.hdslb.com/bfs/album/e5fd09d5ce0a60b72bbbaddd66cd80da20655585.png" alt="image-20220813221457199" tabindex="0" loading="lazy"><figcaption>image-20220813221457199</figcaption></figure><p>任何函数都有 prototype 属性，prototype 是英语 “原型” 的意思。</p><p>prototype 属性值是个对象， 每个原型对象里面都有个constructor 属性（constructor 构造函数） 作用：该属性指向该原型对象的构造函数，</p><blockquote><p>constructor：制造商</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/5dcab9b97d368e39ac9961a0565bb00c6dcd26eb.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> sum<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> sum<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*
{}
object
[Function: sum]
function
true
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于普通函数来说的 prototype 属性没有任何用处，而<strong>构造函数的 prototype 属性非常有用</strong>。</p><p><strong>构造函数的 prototype 属性是它的实例的原型</strong>。</p><p>所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法：</p><ul><li><code>Date</code> 对象从 <code>Date.prototype</code> 继承。</li><li><code>Array</code> 对象从 <code>Array.prototype</code> 继承。</li><li><code>Person</code> 对象从 <code>Person.prototype</code> 继承。</li></ul><p>所有 JavaScript 中的对象都是位于<strong>原型链顶端的 Object 的实例</strong>。</p><p>JavaScript 对象<strong>有一个指向一个原型对象的链。</strong></p><p>创建一个函数以后，<strong>解析器都会默认在函数中添加一个数prototype</strong></p><p>prototype属性指向的是一个对象，这个对象我们称为原型对象。</p><h3 id="_4-2-构造函数的prototype是实例的原型" tabindex="-1"><a class="header-anchor" href="#_4-2-构造函数的prototype是实例的原型" aria-hidden="true">#</a> 4.2 构造函数的prototype是实例的原型</h3><p>实例对象都会有一个属性 <strong>proto（对象原型）</strong> 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有 <strong>proto</strong> 原型的存在。</p><figure><img src="https://i0.hdslb.com/bfs/album/ac25c96779d412acc995d44627cf343ddf292e7d.png" alt="image-20220813221243209" tabindex="0" loading="lazy"><figcaption>image-20220813221243209</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/8e0a7c2f2c79cb8ddf62ef05ff952f205043a668.png" alt="image-20220813221312823" tabindex="0" loading="lazy"><figcaption>image-20220813221312823</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>这个隐含的属性可以通过对象<span class="token punctuation">.</span>__proto__来访问。  
__proto__ 属性：Chrome 提出的一个属性（<span class="token constant">W3C</span> 中没有）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。</strong></p><p>我们可以将对象中共有的属性和方法统一添加到原型对象中，<br> 这样我们只需要添加一次，就可以使所有的对象都可以使用。</p><figure><img src="https://i0.hdslb.com/bfs/album/66ede9e0d5d993f7f79389586f6fcad0b14cfa25.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>People.prototype</code> 是 <code>xiaoming</code> 的原型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span>sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 实例化</span>
<span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 测试三角关系是否存在</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>补充一张关于原型的图</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/d4f262ab414729a22d06eabbb1e80761b97e623d.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-3-原型链查找" tabindex="-1"><a class="header-anchor" href="#_4-3-原型链查找" aria-hidden="true">#</a> 4.3 原型链查找</h3><p>JavaScript 规定：实例可以 “打点” 访问<strong>它的原型的属性和方法</strong>，这被称为 “原型链查找”。</p><p>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 在构造函数的 prototype 上添加 nationality 属性</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>nationality <span class="token operator">=</span> <span class="token string">&#39;中国&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 实例可以 “打点” 访问原型的属性和方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>nationality<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 中国</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/df7e8cddd47cdda702a8cd2a76a4bb0c1f09470f.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>【遮蔽效应】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span>sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>nationality <span class="token operator">=</span> <span class="token string">&#39;中国&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>nationality<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 中国</span>

<span class="token keyword">var</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;汤姆&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tom<span class="token punctuation">.</span>nationality <span class="token operator">=</span> <span class="token string">&#39;美国&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 被遮蔽</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>nationality<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 美国</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/98a60557b04a3f053888a87731aa1b348ac1e4ed.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-4-hasownproperty" tabindex="-1"><a class="header-anchor" href="#_4-4-hasownproperty" aria-hidden="true">#</a> 4.4 hasOwnProperty</h3><p>hasOwnProperty 方法可以检查对象是否真正 “自己拥有” 某属性或者方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xiaoming<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// true</span>
xiaoming<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// true</span>
xiaoming<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// true</span>
xiaoming<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;nationality&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	 <span class="token comment">// false（没有的属性或方法及原型上的属性或方法会返回 false）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-in" tabindex="-1"><a class="header-anchor" href="#_4-5-in" aria-hidden="true">#</a> 4.5 in</h3><p>in 运算符只能检查某个属性或方法是否可以被对象访问，不能检查是否是自己的属性或方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> xiaoming			<span class="token comment">// true</span>
<span class="token string">&#39;age&#39;</span> <span class="token keyword">in</span> xiaoming			<span class="token comment">// true</span>
<span class="token string">&#39;sex&#39;</span> <span class="token keyword">in</span> xiaoming			<span class="token comment">// true</span>
<span class="token string">&#39;nationality&#39;</span> <span class="token keyword">in</span> xiaoming	 <span class="token comment">// true</span>
<span class="token string">&#39;love&#39;</span> <span class="token keyword">in</span> xiaoming			<span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-原型-添加属性和方法" tabindex="-1"><a class="header-anchor" href="#_5-原型-添加属性和方法" aria-hidden="true">#</a> 5.原型-添加属性和方法</h2><h3 id="_5-1-为什么要写在原型上" tabindex="-1"><a class="header-anchor" href="#_5-1-为什么要写在原型上" aria-hidden="true">#</a> 5.1 为什么要写在原型上</h3><p>在之前的课程中，我们把方法都是直接添加到实例身上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>	<span class="token comment">// 方法直接添加到实例身上</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/831abf9eef7eb688f58f7e98e49504d9df7a0d55.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>把方法直接添加到实例身上的缺点：每个实例和每个实例的方法函数都是内存中不同的函数，造成了内存的浪费。</p><p>解决办法：将方法写到 prototype 上。</p><h3 id="_5-2-方法要写到-prototype-上" tabindex="-1"><a class="header-anchor" href="#_5-2-方法要写到-prototype-上" aria-hidden="true">#</a> 5.2 方法要写到 prototype 上</h3><p><strong>使用 prototype 属性</strong>就可以给<strong>对象的构造函数添加新的属性和方法</strong>。</p><figure><img src="https://i0.hdslb.com/bfs/album/64e984e4c2492a6ede3cfdfab555d824400d3d81.png" alt="image-20220813214903427" tabindex="0" loading="lazy"><figcaption>image-20220813214903427</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span>sex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方法要写到 prototype 上</span>
<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&#39;开始睡觉.zzzz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xiaoming<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 我是小明</span>
xiaoming<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 小明开始睡觉.zzzz</span>

<span class="token keyword">var</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">&#39;汤姆&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 同一份方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>sayHello <span class="token operator">===</span> tom<span class="token punctuation">.</span>sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原型对象里面放的是方法, 这个方法里面的this 指向的是这个方法的调用者, 也就是这个实例对象。</strong></p><h2 id="_6-原型链" tabindex="-1"><a class="header-anchor" href="#_6-原型链" aria-hidden="true">#</a> 6.原型链</h2><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对 象的链状结构关系称为原型链.</p><p>Object 可以看做是所有对象的构造函数。</p><p>所以，People.prototype 这个对象可以看做是 Object new 出来的。</p><figure><img src="https://i0.hdslb.com/bfs/album/0f5a02019a1a67ab07e171d57ed6bbfd6ee780f4.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/1d3ece11ccf502dc5cade43c80f3bd65f96e87f2.png" alt="image-20220813221727150" tabindex="0" loading="lazy"><figcaption>image-20220813221727150</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// true</span>

<span class="token comment">// Object 是原型链的终点</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查找规则</strong></p><p>① 当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。 ② 如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象） ③ 如果还没有就查找原型对象的原型（Object的原型对象） ④ 依此类推一直找到 Object 为止（null） ⑤ __proto__对象原型的意义就在于为实例对象查找机制提供一个方向，或者说一条路线</p><p>【关于数组的原型链】</p><p>任何数组实际上都是可以看做是 Array 这个构造函数 new 出来的。</p><figure><img src="https://i0.hdslb.com/bfs/album/9a9238394188072ad1538b00e9e6718e01d6ba1c.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_7-包装类" tabindex="-1"><a class="header-anchor" href="#_7-包装类" aria-hidden="true">#</a> 7.包装类</h2><h3 id="_7-1-定义" tabindex="-1"><a class="header-anchor" href="#_7-1-定义" aria-hidden="true">#</a> 7.1 定义</h3><ul><li><p>在JS中为我们提供了<strong>三个包装类：</strong><br> String() Boolean() Number()<br> 通过这三个包装类可以创建基本数据类型的对象</p></li><li><p>很多编程语言都有 “包装类” 的设计，包装类的目的就是为了让基本类型值可以从它们的构造函数的 prototype 上获得方法</p></li><li><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">var</span> bool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>Number</code>、<code>String</code>和<code>Boolean</code>这三个原生对象，如果不作为构造函数调用（即调用时不加<code>new</code>），而是作为普通函数调用，常常用于将任意类型的值转为数值、字符串和布尔值。</p></blockquote><p>总结一下，这三个对象作为构造函数使用（带有<code>new</code>）时，可以将原始类型的值转为对象；作为普通函数使用时（不带有<code>new</code>），可以将任意类型的值，转为原始类型的值。</p><p><strong>在实际应用中千万不要这么干。</strong></p><p>某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。</p><p>比如，字符串可以调用<code>length</code>属性，返回字符串的长度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span>length <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>abc</code>是一个字符串，本身不是对象，不能调用<code>length</code>属性。JavaScript 引擎自动将其转为包装对象，在这个对象上调用<code>length</code>属性。调用结束后，这个临时对象就会被销毁。这就叫原始类型与实例对象的自动转换。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>
str<span class="token punctuation">.</span>length <span class="token comment">// 3</span>

<span class="token comment">// 等同于</span>
<span class="token keyword">var</span> strObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token comment">// String {</span>
<span class="token comment">//   0: &quot;a&quot;, 1: &quot;b&quot;, 2: &quot;c&quot;, length: 3, [[PrimitiveValue]]: &quot;abc&quot;</span>
<span class="token comment">// }</span>
strObj<span class="token punctuation">.</span>length <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，字符串<code>abc</code>的包装对象提供了多个属性，<code>length</code>只是其中之一。</p><p>自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span>x <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码为字符串<code>s</code>添加了一个<code>x</code>属性，结果无效，总是返回<code>undefined</code>。</p><p>另一方面，调用结束后，包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象，所以取不到赋值在上一个对象的属性。如果要为字符串添加属性，只有在它的原型对象<code>String.prototype</code>上定义（参见《面向对象编程》章节）。</p></li></ul><h3 id="_7-2-举例" tabindex="-1"><a class="header-anchor" href="#_7-2-举例" aria-hidden="true">#</a> 7.2 举例</h3><p>请看下面的程序：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;慕课网&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment">// [Number: 123]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment">// [String: &#39;慕课网&#39;]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>					<span class="token comment">// [Boolean: true]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// object</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>				<span class="token comment">// 128</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 慕课</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>			<span class="token comment">// true</span>

<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>

<span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token string">&#39;慕课网&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-实例方法" tabindex="-1"><a class="header-anchor" href="#_7-3-实例方法" aria-hidden="true">#</a> 7.3 实例方法</h3><p>三种包装对象各自提供了许多实例方法，详见后文。这里介绍两种它们共同具有、从<code>Object</code>对象继承的方法：<code>valueOf()</code>和<code>toString()</code>。</p><p><strong>valueOf</strong>()</p><p><code>valueOf()</code>方法返回包装对象实例对应的原始类型的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>
<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;abc&quot;</span>
<span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>toString</strong>()</p><p><code>toString()</code>方法返回对应的字符串形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;123&quot;</span>
<span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;abc&quot;</span>
<span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;true&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-自定义方法" tabindex="-1"><a class="header-anchor" href="#_7-4-自定义方法" aria-hidden="true">#</a> 7.4 自定义方法</h3><p>除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用。</p><p>比如，我们可以新增一个<code>double</code>方法，使得字符串和数字翻倍。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// abcabc</span>

<span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 246</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码在<code>String</code>和<code>Number</code>这两个对象的原型上面，分别自定义了一个方法，从而可以在所有实例对象上调用。注意，最后一行的<code>123</code>外面必须要加上圆括号，否则后面的点运算符（<code>.</code>）会被解释成小数点。</p><h3 id="_7-5-总结" tabindex="-1"><a class="header-anchor" href="#_7-5-总结" aria-hidden="true">#</a> 7.5 总结</h3><ul><li>Number()、String() 和 Boolean() 的实例都是 object 类型，它们的 PrimitiveValue 属性存储它们的本身值</li><li>new 出来的基本类型值可以正常参与运算</li><li>包装类的目的就是为了让基本类型值可以从它们的构造函数的 prototype 上获得方法（打点调用）</li></ul><blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>

<span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token string">&#39;慕课网&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上代码可以看出，直接定义的基本变量本质也是 new 出来的，所以才可以直接打点调用相关方法。</p></blockquote><blockquote><p>注意：只有 Number()、String()、Boolean() 才是包装类， 而 Array() 不是数组的包装类，因为数组不是基本类型谈不上 “包装类” 这一说法的。</p></blockquote><h2 id="_8-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_8-垃圾回收" aria-hidden="true">#</a> 8.垃圾回收</h2><ol><li><p>什么是垃圾回收机制？</p><blockquote><p>垃圾回收机制(Garbage Collection) 简称 GC JS中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收。如果不了解JS的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况 （不再用到的内存，没有及时释放，就叫做内存泄漏）</p></blockquote></li><li><p>内存的生命周期</p><blockquote><p>JS环境中分配的内存, 一般有如下生命周期：</p><ol><li><p>内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</p></li><li><p>内存使用：即读写内存，也就是使用变量、函数等</p></li><li><p>内存回收：使用完毕，由垃圾回收自动回收不再使用的内存</p><p>说明： 全局变量一般不会回收(关闭页面回收)； 一般情况下局部变量的值, 不用了, 会被自动回收掉</p></li></ol></blockquote></li></ol><figure><img src="https://i0.hdslb.com/bfs/album/6001fefdb3790c27e45453e816c543c052df0c45.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾<br> 这些垃圾积攒过多以后，会导致程序运行的速度过慢，<br> 所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾<br> 当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，<br> 此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，<br> 所以这种垃圾必须进行清理。<br> 在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，<br> 我们不需要也不能进行垃圾回收的操作<br> 我们需要做的只是要将不再使在使用的变量设置为null</p><figure><img src="https://i0.hdslb.com/bfs/album/7d958c8ac19f0934b06e9ddc69c28cd9d1af076c.png" alt="junk" tabindex="0" loading="lazy"><figcaption>junk</figcaption></figure><h2 id="_9-高阶函数-回调函数" tabindex="-1"><a class="header-anchor" href="#_9-高阶函数-回调函数" aria-hidden="true">#</a> 9.高阶函数-回调函数</h2><figure><img src="https://i0.hdslb.com/bfs/album/7d719c343589e7d65d5d4de676e37cdda6be574d.png" alt="image-20220813143329567" tabindex="0" loading="lazy"><figcaption>image-20220813143329567</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/7d719c343589e7d65d5d4de676e37cdda6be574d.png" alt="image-20220813143324854" tabindex="0" loading="lazy"><figcaption>image-20220813143324854</figcaption></figure><p>​ 1. 函数表达式 ,函数也是【数据】,把函数赋值给变量</p><ol start="2"><li>回调函数 , 把函数当做另外一个函数的参数传递，这个函数就叫回调函数 。回调函数本质还是函数，只不过把它当成参数使用 , 使用匿名函数做为回调函数比较常见。</li></ol><p>如果将函数 A 做为参数传递给函数 B 时，我们称函数 A 为回调函数。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 声明 foo 函数</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 普通的值做为参数</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;css&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;javascript&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数也能当参数...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 函数也可以做为参数！！！！</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 <code>bar</code> 做参数传给了 <code>foo</code> 函数，<code>bar</code> 就是所谓的回调函数了！！！</p><p>我们回顾一下间歇函数 <code>setInterval</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是回调函数...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 调用定时器</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fn</code> 函数做为参数传给了 <code>setInterval</code> ，这便是回调函数的实际应用了，结合刚刚学习的函数表达式上述代码还有另一种更常见写法。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">// 调用定时器，匿名函数做为参数</span>
  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是回调函数...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：</p><ol><li>回调函数本质还是函数，只不过把它当成参数使用</li><li>使用匿名函数做为回调函数比较常见</li></ol><h2 id="_10-高阶函数-闭包" tabindex="-1"><a class="header-anchor" href="#_10-高阶函数-闭包" aria-hidden="true">#</a> 10.高阶函数-闭包</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个全局变量</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;ABC&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个函数</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义局部变量</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;ds&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回一个局部函数</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用外部函数，就能得到内部函数，用变量 inn 来接收</span>
<span class="token keyword">var</span> inn <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行 inn 函数，就相当于在 fun 函数的外部，执行了内部函数</span>
<span class="token function">inn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;ds&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-1-什么是闭包" tabindex="-1"><a class="header-anchor" href="#_10-1-什么是闭包" aria-hidden="true">#</a> 10.1 什么是闭包</h3><figure><img src="https://i0.hdslb.com/bfs/album/4032783dd84c99d73caca683a720a341c4214772.png" alt="3caca683a720a341c4214772" tabindex="0" loading="lazy"><figcaption>3caca683a720a341c4214772</figcaption></figure><p>闭包是函数本身和该函数声明时所处的环境状态的组合。</p><p>函数能够 “记忆” 其定义时所处的环境，<strong>即使函数不在其定义的环境中被调用，也能访问定义时所处环境的变量。</strong></p><p><strong>在 JS 中，每次创建函数时都会创建闭包。</strong></p><p><strong>但是，闭包特性往往需要将函数 “换一个地方” 执行，才能被直观的体现出来。</strong></p><p>闭包很有用，因为它允许我们将数据与操作该数据的函数关联起来，这与 “面向对象编程” 有少许相似之处。</p><p>闭包的功能：记忆性、模拟私有变量（相当于把函数的数据封装了）。</p><figure><img src="https://i0.hdslb.com/bfs/album/c6bb35903d2b5a53aed8d0e33194aafa80d570f0.png" alt="image-20220814140242277" tabindex="0" loading="lazy"><figcaption>image-20220814140242277</figcaption></figure><h3 id="_10-2-闭包常见写法" tabindex="-1"><a class="header-anchor" href="#_10-2-闭包常见写法" aria-hidden="true">#</a> 10.2 闭包常见写法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     简单的写法
     <span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>
       <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
       <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
     <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


   <span class="token comment">// 常见的闭包的形式   外部可以访问使用 函数内部的变量</span>
   <span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
     <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">return</span> fn
   <span class="token punctuation">}</span>
   <span class="token comment">// outer()   ===  fn   ===  function fn() {}</span>
   <span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token comment">// 常见的写法2</span>
     <span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
       <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用函数</span>
      
      
    <span class="token comment">// 常见的写法3(将里面变量的值返回出来)</span>
     <span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
       <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> a
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
     <span class="token comment">// console.log(outer())</span>
     <span class="token keyword">const</span> fun1 <span class="token operator">=</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token comment">// 调用函数</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-3-闭包用途-记忆性" tabindex="-1"><a class="header-anchor" href="#_10-3-闭包用途-记忆性" aria-hidden="true">#</a> 10.3 闭包用途 - 记忆性</h3><p>当闭包产生时，函数所处环境的状态会始终保持在内存中，不会在外层函数调用后自动清除。这就是闭包的记忆性。</p><p>【闭包的记忆性举例】</p><p>创建体温检测函数 checkTemp(n)，可以检查体温 n 是否正常，函数会返回布尔值。</p><p>但是，不同的小区有不同的体温检测标准，比如 A 小区体温合格线是 37.1℃，而 B 小区体温合格线是 37.3℃，应该怎么编程呢？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createCheckTemp</span><span class="token punctuation">(</span><span class="token parameter">standardTemp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">checkTemp</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> standardTemp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你的体温正常&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;你的体温偏高&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> checkTemp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一个 checkTemp 函数，它以 37.1 度为标准线</span>
<span class="token keyword">var</span> checkTemp_A <span class="token operator">=</span> <span class="token function">createCheckTemp</span><span class="token punctuation">(</span><span class="token number">37.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 再创建一个 checkTemp 函数， 它以 37.3 度为标准线</span>
<span class="token keyword">var</span> checkTemp_B <span class="token operator">=</span> <span class="token function">createCheckTemp</span><span class="token punctuation">(</span><span class="token number">37.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">checkTemp_A</span><span class="token punctuation">(</span><span class="token number">37.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// &quot;你的体温偏高&quot;</span>
<span class="token function">checkTemp_A</span><span class="token punctuation">(</span><span class="token number">37.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// &quot;你的体温正常&quot;</span>
<span class="token function">checkTemp_B</span><span class="token punctuation">(</span><span class="token number">37.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// &quot;你的体温正常&quot;</span>
<span class="token function">checkTemp_B</span><span class="token punctuation">(</span><span class="token number">37.6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// &quot;你的体温偏高&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>计数器案例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token comment">// 闭包的应用 </span>
    <span class="token comment">// 普通形式 统计函数调用的次数</span>
    <span class="token comment">// let i = 0</span>
    <span class="token comment">// function fn() {</span>
    <span class="token comment">//   i++</span>
    <span class="token comment">//   console.log(\`函数被调用了\${i}次\`)</span>
    <span class="token comment">// }</span>
    <span class="token comment">//  因为 i 是全局变量，容易被修改</span>
    <span class="token comment">// 闭包形式 统计函数调用的次数</span>
    <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i<span class="token operator">++</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">函数被调用了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">次</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> fn
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
    <span class="token comment">/* 总结:
        因为垃圾回收机制，只要还有人使用就不会回收，
        用一个全局变量保存使用函数内部变量的函数，
        这样那个变量其实一直都在
     */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>闭包有点像c语言的静态属性</p></blockquote><h3 id="_11-3-使用闭包的注意点" tabindex="-1"><a class="header-anchor" href="#_11-3-使用闭包的注意点" aria-hidden="true">#</a> 11.3 使用闭包的注意点</h3><p>不能滥用闭包！否则会造成网页的性能问题，严重时可能导致 “内存泄漏”。</p><p>所谓 “内存泄漏” 就是指程序中已经动态分配的内存由于某种原因未释放或无法释放。</p><blockquote><p>目前，Chrome 等比较先进的浏览器很少发生内存泄漏。</p></blockquote><h3 id="_11-4-闭包面试题" tabindex="-1"><a class="header-anchor" href="#_11-4-闭包面试题" aria-hidden="true">#</a> 11.4 闭包面试题</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> fun1 <span class="token operator">=</span> <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fun2 <span class="token operator">=</span> <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 1</span>
<span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 1</span>
<span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 2</span>
<span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 2</span>
<span class="token comment">/* 即：闭包是独立的 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-立即执行函数-iife" tabindex="-1"><a class="header-anchor" href="#_11-立即执行函数-iife" aria-hidden="true">#</a> 11.立即执行函数 IIFE</h2><h3 id="_11-1-形成-iife-的方法" tabindex="-1"><a class="header-anchor" href="#_11-1-形成-iife-的方法" aria-hidden="true">#</a> 11.1 形成 IIFE 的方法</h3><p>IIFE 立即调用函数表达式，是一种特殊的 JS 函数写法，函数定义完，立即被调用，这种函数叫做立即执行函数。<br> 立即执行函数往往只会执行一次</p><figure><img src="https://i0.hdslb.com/bfs/album/a35092fff3de18a7505790d2e269d69c61946e01.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>蓝色括号里写传递的参数。</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/6122337cd59b2520666081a733b69d3356478ce7.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>常用 <code>()</code> 来将函数转为 “函数表达式”。</p></blockquote><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">/*(function(){
        alert(&quot;我是一个匿名函数~~~&quot;);
    })();*/</span>

    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a = &quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b = &quot;</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-2-iife的作用1-为变量赋值" tabindex="-1"><a class="header-anchor" href="#_11-2-iife的作用1-为变量赋值" aria-hidden="true">#</a> 11.2 IIFE的作用1 - 为变量赋值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&#39;小朋友&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sex <span class="token operator">==</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&#39;先生&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&#39;女士&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-3-iife的作用2-将全局变量变为局部变量" tabindex="-1"><a class="header-anchor" href="#_11-3-iife的作用2-将全局变量变为局部变量" aria-hidden="true">#</a> 11.3 IIFE的作用2 - 将全局变量变为局部变量</h3><p>先看一个问题：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;-------------------&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
0
1
2
3
4
-------------------
5
5
5
5
5
*/</span>

<span class="token comment">/*
解释：因为 arr 数组中的每个元素都是 function(){alert(i)} 这个函数，
arr[2] ——&gt; function(){alert(i)}
arr[2](); ——&gt; function(){alert(i)}()
由于 i 为全局变量，所以所有闭包内存都是同一个 i, 而 i 最终确定为 5，根据闭包原理，所以都输出 5；
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IIFE 可以在一些场合（如 for 循环中）将全局变量变为局部变量，语法显得紧凑。</p><blockquote><p>在 ES6 中，有更好的方式可以约定变量的作用域</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
0
1
2
3
4
*/</span>

<span class="token comment">/*
解释：
function () {console.log(i);}，的闭包中的 i 是对应每次循环的 (function (i) {...})(i);
而，function (i) 中的 i 是一个形参，每次的值都是固定的。
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,187),l=[o,c,i];function u(r,d){return t(),p("div",null,l)}const v=a(e,[["render",u],["__file","06.html.vue"]]);export{v as default};
