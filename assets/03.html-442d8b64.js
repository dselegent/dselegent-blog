import{ab as p,G as l,H as c,E as n,S as a,N as e,ac as i,W as t}from"./framework-09305b5d.js";const d={},o=i('<h1 id="_03-【npm的使用】" tabindex="-1"><a class="header-anchor" href="#_03-【npm的使用】" aria-hidden="true">#</a> 03 【npm的使用】</h1><h2 id="_1-包和npm" tabindex="-1"><a class="header-anchor" href="#_1-包和npm" aria-hidden="true">#</a> 1.包和npm</h2><h3 id="_1-1-什么是包" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是包" aria-hidden="true">#</a> 1.1 什么是包</h3><p>由于 Node 是一套轻内核的平台，虽然提供了一系列的内置模块，但是不足以满足开发者的需求，于是乎出现了包（package）的概念： 与核心模块类似，就是将一些预先设计好的功能或者说 API 封装到一个文件夹，提供给开发者使用。</p><p>Node 本身并没有太多的功能性 API，所以市面上涌现出大量的第三方人员开发出来的 Package。</p><h3 id="_1-2-包的加载机制" tabindex="-1"><a class="header-anchor" href="#_1-2-包的加载机制" aria-hidden="true">#</a> 1.2 包的加载机制</h3><p>Node.js中使用<code>CommonJs</code>模块化机制，通过<code>npm</code>下载的第三方包，我们在项目中引入第三方包都是：<code>let xx = require(&#39;第三方包名&#39;)</code>，究竟<code>require</code>方法加载第三方包的原理机制是什么，今天我们来探讨下。</p><ol><li><code>require(&#39;第三方包名&#39;)</code>优先在加载该包的模块的同级目录<code>node_modules</code>中查找第三方包。</li><li>找到该第三方包中的<code>package.json</code>文件，并且找到里面的<code>main</code>属性对应的入口模块，该入口模块即为加载的第三方模块。</li><li>如果在要加载的第三方包中没有找到<code>package.json</code>文件或者是<code>package.json</code>文件中没有<code>main</code>属性，则默认加载第三方包中的<code>index.js</code>文件。</li><li>如果在加载第三方模块的文件的同级目录没有找到<code>node_modules</code>文件夹，或者以上所有情况都没有找到，则会向上一级父级目录下查找<code>node_modules</code>文件夹，查找规则如上一致。</li><li>如果一直找到该模块的磁盘根路径都没有找到，则会报错：<code>can not find module xxx</code>。</li></ol><p>比如说：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">requiere</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">fs</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那加载的肯定是系统的包。所以，我们尽量不要创建一些和现有的包重名的包。</p><h3 id="_1-3-npm-的概念" tabindex="-1"><a class="header-anchor" href="#_1-3-npm-的概念" aria-hidden="true">#</a> 1.3 npm 的概念</h3>',12),r=n("strong",null,"NPM",-1),u={href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"},m=i('<p>Node.js 发展到现在，已经形成了一个非常庞大的生态圈。包的生态圈一旦繁荣起来，就必须有工具去来管理这些包。NPM 应运而生。</p><p>举个例子，当我们在使用 Java 语言做开发时，需要用到 JDK 提供的内置库，以及第三方库。同样，在使用 JS 做开发时，我们可以使用 NPM 包管理器，方便地使用成熟的、优秀的第三方框架，融合到我们自己的项目中，极大地加速日常开发的构建过程。</p><p>随着时间的发展，NPM 出现了两层概念：</p><ul><li>一层含义是 Node 的开放式模块登记和管理系统，亦可以说是一个生态圈，一个社区。</li><li>另一层含义是 Node 默认的模块管理器，是一个命令行下的软件，用来安装和管理 Node 模块。</li></ul><h3 id="_1-4-npm-的安装-不需要单独安装" tabindex="-1"><a class="header-anchor" href="#_1-4-npm-的安装-不需要单独安装" aria-hidden="true">#</a> 1.4 npm 的安装（不需要单独安装）</h3><p>NPM 不需要单独安装。默认在安装 Node 的时候，会连带一起安装 NPM</p><p>NVM、Node、NPM 安装之后，目录分布如下：</p><figure><img src="https://i0.hdslb.com/bfs/album/9d95a2589e45d1d9eaf6fc481335363b9490ec24.png" alt="image-20221102143348894" tabindex="0" loading="lazy"><figcaption>image-20221102143348894</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/11a2587512af408095fe6f2786c596b7ee5e6dbf.png" alt="image-20221102143357922" tabindex="0" loading="lazy"><figcaption>image-20221102143357922</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/137d79fa1ea96221bf9f4baa465ebe7080b500ca.png" alt="image-20221102143410471" tabindex="0" loading="lazy"><figcaption>image-20221102143410471</figcaption></figure><p>输入 <code>npm -v</code>，查看 npm 的版本</p>',11),v={href:"https://segmentfault.com/a/1190000011114680",target:"_blank",rel:"noopener noreferrer"},b=i(`<p>另外，Node 附带的 NPM 可能不是最新版本，可以用下面的命令，更新到最新版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token function">npm</span> <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-5-配置-npm-的全局目录" tabindex="-1"><a class="header-anchor" href="#_1-5-配置-npm-的全局目录" aria-hidden="true">#</a> 1.5 配置 NPM 的全局目录</h3><p>NPM 默认安装到当前正在使用 Node 版本所在目录下。我们建议重新配置 NPM 的全局目录。</p><p>输入<code>npm config ls</code>，查看</p>`,5),h={href:"https://blog.csdn.net/smalCat/article/details/79505441",target:"_blank",rel:"noopener noreferrer"},g=i(`<h2 id="_2-npm-的常用命令" tabindex="-1"><a class="header-anchor" href="#_2-npm-的常用命令" aria-hidden="true">#</a> 2.NPM 的常用命令</h2><p>查看 npm 当前版本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新 npm：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> npm@latest <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>项目初始化：（执行完成后，会生成<code>package.json</code>文件）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init

<span class="token comment"># 快速跳过问答式界面，选择默认配置</span>
<span class="token function">npm</span> init <span class="token parameter variable">--yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只在当前工程下安装指定的包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在全局安装指定的包：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g [package]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装的包只用于开发环境，不用于生产环境：（会出现在 package.json 文件中的 devDependencies 属性中）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> --save-dev

<span class="token comment"># 或者</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装的包需要发布到生产环境：（会出现在 package.json 文件中的 dependencies 属性中）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> <span class="token parameter variable">--save</span>

<span class="token comment"># 或者</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看当前目录下已安装的 node 包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看全局已经安装的 node 包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> list <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看 npm 帮助命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看指定命令的帮助：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token punctuation">[</span>指定命令<span class="token punctuation">]</span> <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>更新指定的包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> update <span class="token punctuation">[</span>package<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>卸载指定的包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> uninstall <span class="token punctuation">[</span>package<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看配置信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看本地安装的指定包的信息，没有则显示 empty：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">ls</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看全局安装的指定包的信息，没有则显示 empty：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">ls</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看远程 npm 上指定包的所有版本信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> info <span class="token punctuation">[</span>package<span class="token punctuation">]</span> versions
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看当前包的安装路径：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> root
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看全局包的安装路径：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> root <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-配置-npm-镜像源" tabindex="-1"><a class="header-anchor" href="#_3-配置-npm-镜像源" aria-hidden="true">#</a> 3.配置 npm 镜像源</h2>`,40),k={href:"http://npmjs.com",target:"_blank",rel:"noopener noreferrer"},f=i(`<p>切换镜像源，有下面这几种方式：</p><ul><li>方式 1：临时切换镜像源。</li><li>方式 2：切换镜像源</li><li>方式 3：通过 NRM 切换镜像源（最为推荐的方式）。</li><li>方式 4：cnpm。</li></ul><h3 id="_3-1-方式-1-临时切换镜像源" tabindex="-1"><a class="header-anchor" href="#_3-1-方式-1-临时切换镜像源" aria-hidden="true">#</a> 3.1 方式 1：临时切换镜像源</h3><p>安装指定包的时候，通过追加 <code>--registry</code>参数即可。格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 格式</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> <span class="token parameter variable">--registry</span> <span class="token punctuation">[</span>https://xxx<span class="token punctuation">]</span>

<span class="token comment"># 举例：在下载安装 express 这个包的时候，临时指定镜像源为 https://registry.npm.taobao.org</span>
<span class="token function">npm</span> <span class="token function">install</span> express <span class="token parameter variable">--registry</span> https://registry.npmmirror.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-方式-2-切换镜像源" tabindex="-1"><a class="header-anchor" href="#_3-2-方式-2-切换镜像源" aria-hidden="true">#</a> 3.2 方式 2：切换镜像源</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行上述命令后，以后下载所有 npm 包的时候，都会改为使用淘宝的镜像源。</p><h3 id="_3-3-方式-3-通过-nrm-切换镜像源-推荐" tabindex="-1"><a class="header-anchor" href="#_3-3-方式-3-通过-nrm-切换镜像源-推荐" aria-hidden="true">#</a> 3.3 方式 3：通过 NRM 切换镜像源（推荐）</h3><p><strong>NRM</strong>：Node Registry Manager。作用是：<strong>切换和管理 npm 包的镜像源</strong>。</p>`,10),_={href:"https://www.npmjs.com/package/nrm",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/Pana/nrm",target:"_blank",rel:"noopener noreferrer"},N=i(`<p><strong>安装 NRM</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> nrm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>执行命令<code>nrm ls</code>查看可选的源。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> ---------- https://registry.npmjs.org/
<span class="token function">yarn</span> --------- https://registry.yarnpkg.com/
tencent ------ https://mirrors.cloud.tencent.com/npm/
cnpm --------- https://r.cnpmjs.org/
taobao ------- https://registry.npmmirror.com/
npmMirror ---- https://skimdb.npmjs.com/registry/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>切换</li></ol><p>如果要切换到<code>taobao</code>源，执行命令 <code>nrm use taobao</code>。</p><ol start="2"><li>增加</li></ol><p>你可以增加定制的源，特别适用于添加企业内部的私有源，执行命令 <code>nrm add &lt;registry&gt; &lt;url&gt;</code>，其中<code>reigstry</code>为源名，<code>url</code>为源的路径。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nrm <span class="token function">add</span> registry http://registry.npm.frp.trmap.cn/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>删除</li></ol><p>执行命令<code>nrm del &lt;registry&gt;</code>删除对应的源。</p><ol start="4"><li>测试速度</li></ol><p>你还可以通过 <code>nrm test</code> 测试相应源的响应时间。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nrm <span class="token builtin class-name">test</span> <span class="token function">npm</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-4-方式-4-安装-cnpm" tabindex="-1"><a class="header-anchor" href="#_3-4-方式-4-安装-cnpm" aria-hidden="true">#</a> 3.4 方式 4：安装 cnpm</h3>`,15),y={href:"https://npmmirror.com/",target:"_blank",rel:"noopener noreferrer"},j=i(`<p>安装<code>cnpm</code>替换 npm（npm 由于源服务器在国外，下载包的速度较慢，cnpm 会使用国内镜像）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npmmirror.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以后我们就可以通过 cnpm 命令去安装一个包。举例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装 vue 这个包</span>
cnpm <span class="token function">install</span> vue
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的单词 <code>install</code> 可以简写成 <code>i</code>。</p><h2 id="_4-什么是-npm-脚本" tabindex="-1"><a class="header-anchor" href="#_4-什么是-npm-脚本" aria-hidden="true">#</a> 4.什么是 npm 脚本</h2><blockquote><p>npm 允许在<code>package.json</code>文件里面，使用<code>scripts</code>字段定义脚本命令。<code>package.json</code> 里面的<code>scripts</code> 字段是一个对象。它的每一个属性，对应一段脚本。定义在<code>package.json</code>里面的脚本，就称为 <code>npm</code> 脚本。</p></blockquote><p>查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的<code>npm run</code>命令。</p><h3 id="_4-1-使用" tabindex="-1"><a class="header-anchor" href="#_4-1-使用" aria-hidden="true">#</a> 4.1 使用</h3><ul><li><code>npm run</code> 脚本名称</li><li>如果是并行执行（即同时的平行执行），可以使用&amp;符号。 <code>npm run script1.js &amp; npm run script2.js</code></li><li>如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用&amp;&amp;符号。<code>npm run script1.js &amp;&amp; npm run script2.js</code></li></ul><h3 id="_4-2-简写形式" tabindex="-1"><a class="header-anchor" href="#_4-2-简写形式" aria-hidden="true">#</a> 4.2 简写形式</h3><ul><li><code>npm start</code> 即 <code>npm run start</code></li><li><code>npm stop</code> 即 <code>npm run stop</code></li><li><code>npm test</code> 即 <code>npm run test</code></li><li><code>npm restart</code> 即 <code>npm run stop &amp;&amp; npm run restart &amp;&amp; npm run start</code></li></ul><h2 id="_5-pnpm" tabindex="-1"><a class="header-anchor" href="#_5-pnpm" aria-hidden="true">#</a> 5.pnpm</h2><h3 id="_5-1-pnpm-是什么" tabindex="-1"><a class="header-anchor" href="#_5-1-pnpm-是什么" aria-hidden="true">#</a> 5.1 pnpm 是什么</h3><blockquote><p>pnpm是 Node.js 的替代包管理器。它是 npm 的直接替代品，但速度更快、效率更高。</p></blockquote><blockquote><p>为什么效率更高？当您安装软件包时，我们会将其保存在您机器上的全局存储中，然后我们会从中创建一个硬链接，而不是进行复制。对于模块的每个版本，磁盘上只保留一个副本。例如，当使用 npm 或 yarn 时，如果您有 100 个使用 lodash 的包，则磁盘上将有 100 个 lodash 副本。pnpm 可让您节省数 GB 的磁盘空间！</p></blockquote><p>pnpm优势 pnpm 拥有 Yarn 超过 npm 的所有附加功能：</p><ul><li><strong>安全</strong>: 与 yarn 一样，pnpm 有一个包含所有已安装包校验和的特殊文件，用于在执行代码之前验证每个已安装包的完整性。</li><li><strong>离线模式</strong>: pnpm 将所有下载的包 tarball 保存在本地注册表镜像中。当包在本地可用时，它从不发出请求。使用该--offline参数可以完全禁止 HTTP 请求。</li><li><strong>速度</strong>: pnpm 不仅比 npm 快，而且比 yarn 快。无论是冷缓存还是热缓存，它都比 yarn 快。yarn 从缓存中复制文件，而 pnpm 只是从全局存储中链接它们。</li></ul><h3 id="_5-2-pnpm-的使用" tabindex="-1"><a class="header-anchor" href="#_5-2-pnpm-的使用" aria-hidden="true">#</a> 5.2 pnpm 的使用</h3><p><strong>官网</strong>： <code>https://pnpm.js.org/installation/</code></p><p><strong>全局安装</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">pnpm</span> <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置源</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//查看源
<span class="token function">pnpm</span> config get registry 
//切换淘宝源
<span class="token function">pnpm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmmirror.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//可以和npm一样使用方式

<span class="token function">pnpm</span> init //直接初始化
<span class="token function">pnpm</span> <span class="token function">install</span> 包  // 
<span class="token function">pnpm</span> i 包
<span class="token function">pnpm</span> <span class="token function">add</span> 包    // <span class="token parameter variable">-S</span>  默认写入dependencies
<span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span>    // <span class="token parameter variable">-D</span> devDependencies
<span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-g</span>    // 全局安装
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>移除</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> remove<span class="token punctuation">(</span>uninstall<span class="token punctuation">)</span> 包                            //移除包
<span class="token function">pnpm</span> remove 包 <span class="token parameter variable">--global</span>                   //移除全局包
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>更新</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> up                //更新所有依赖项
<span class="token function">pnpm</span> upgrade 包        //更新包
<span class="token function">pnpm</span> upgrade 包 <span class="token parameter variable">--global</span>   //更新全局包
<span class="token function">pnpm</span> up <span class="token parameter variable">--latest</span> //最新更新所有依赖项，忽略package.json中指定的范围
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-npm命令总结" tabindex="-1"><a class="header-anchor" href="#_6-npm命令总结" aria-hidden="true">#</a> 6.npm命令总结</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>.npm init <span class="token parameter variable">-y</span> 添加初始化文件记录安装信息，如果在后面加-S或者-D会自动创建该文件

<span class="token number">2</span>.npm <span class="token function">install</span> 包名 –g  （uninstall,update）

<span class="token number">3</span>.npm <span class="token function">install</span> 包名 --save（-S） --dev<span class="token punctuation">(</span>-D<span class="token punctuation">)</span>  <span class="token punctuation">(</span>uninstall,update<span class="token punctuation">)</span>
如果不写后缀默认是安装到生产环境
如果先装到了开发环境，那么后面覆盖安装不写后缀也是本身的环境下
一个包只能存在在一种环境，得先卸载才能换环境

<span class="token number">4</span>.npm list <span class="token parameter variable">-g</span> <span class="token punctuation">(</span>不加-g，列举当前目录下的安装包<span class="token punctuation">)</span>

<span class="token number">5</span>.npm info 包名（详细信息） <span class="token function">npm</span> info 包名 version <span class="token punctuation">(</span>获取最新版本<span class="token punctuation">)</span>

<span class="token number">6</span>.npm <span class="token function">install</span> md5@1.8.0（安装指定版本）

<span class="token number">7</span>.npm outdated<span class="token punctuation">(</span>检查包是否已经过时<span class="token punctuation">)</span>
如果版本比较新就不会有输出

<span class="token number">8</span>.pwd输出当前目录的绝对路径

<span class="token number">9</span>.npm view 包名 version查看当前版本   <span class="token function">npm</span> view 包名 versions查看该包所有版本

<span class="token number">10</span>.npm update 包名 更新指定包 <span class="token function">npm</span> update 更新所有的包（pnpm up）

<span class="token number">11</span>.npm config list  查看npm配置信息

<span class="token number">12</span>.npm 指定命令 <span class="token parameter variable">--help</span> 查看指定命令的帮助。

<span class="token number">13</span>.npm root：查看当前包的安装路径。  <span class="token function">npm</span> root -g：查看全局的包的安装路径。

<span class="token number">14</span>.npm <span class="token function">ls</span> 包名：查看本地安装的指定包及版本信息，没有显示empty。 <span class="token function">npm</span> <span class="token function">ls</span> 包名 -g：查看全局安装的指定包及版本信息

<span class="token number">15</span>.npm cache clean <span class="token parameter variable">--force</span> 清除缓存

<span class="token number">16</span>.npm -v查看npm的版本


<span class="token string">&quot;dependencies&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">&quot;md5&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;^2.1.0&quot;</span>  <span class="token punctuation">}</span>  ^ 表示 如果 直接npm <span class="token function">install</span> 将会 安md5@2.*.*  	最新版本

<span class="token string">&quot;dependencies&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">&quot;md5&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;~2.1.0&quot;</span>  <span class="token punctuation">}</span>  ~ 表示 如果 直接npm <span class="token function">install</span> 将会 安装md5 <span class="token number">2.1</span>.*  最新版本

<span class="token string">&quot;dependencies&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">&quot;md5&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;*&quot;</span>  <span class="token punctuation">}</span>  * 表示 如果 直接npm <span class="token function">install</span> 将会 安装 md5  最新版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-使用-nodemon-自动重启服务" tabindex="-1"><a class="header-anchor" href="#_7-使用-nodemon-自动重启服务" aria-hidden="true">#</a> 7.使用 nodemon 自动重启服务</h2><p>我们在开发的过程中，每次改完代码之后都必须重启服务器，显然这样的操作效率是比较低，这里给大家推荐个工具，<code>nodemon</code>,<code>nodemon</code>可以帮我们实时监听项目中代码的变化，并且自动重启服务，而且配置简单。</p><ol><li><p>安装：<code>npm install -g nodemon</code></p><blockquote><p>如果无法使用nodemon，那么要去环境变量中进行配置</p></blockquote></li><li><p>使用<code>nodemon</code>运行项目，取代之前的<code>node app.js</code>。</p></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nodemon  app.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>项目运行之后，<code>nodemon</code>会自动监听代码的改动，并且重新启动服务，大大增加我们开发效率。</p><ol start="3"><li><code>nodemon</code>常见配置</li></ol><ul><li>在命令行指定应用的端口号：<code>nodemon ./server.js localhost 8080</code></li><li>查看帮助，帮助里面有很多选项都是一目了然：<code>nodemon -h 或者 nodemon --help</code></li><li>运行 debug 模式：<code>nodemon --debug ./server.js 80</code></li><li>手动重启项目： <code>Nodemon</code> 命令运行的终端 窗口中输入 <code>rs</code> 两个字符，然后再按下回车键，就能手动重启 <code>Nodemon</code>了。</li></ul>`,39);function q(M,P){const s=t("ExternalLinkIcon");return l(),c("div",null,[o,n("p",null,[r,a("：Node Package Manager。官方链接： "),n("a",u,[a("https://www.npmjs.com/"),e(s)])]),m,n("p",null,[a("如果上方命令无效，可能是之前的 node 并没有完全安装成功。解决办法："),n("a",v,[a("https://segmentfault.com/a/1190000011114680"),e(s)])]),b,n("p",null,[n("a",h,[a("https://blog.csdn.net/smalCat/article/details/79505441"),e(s)])]),g,n("p",null,[a("由于 npm 默认的下载地址在国外（"),n("a",k,[a("npmjs.com"),e(s)]),a("），有时候会被墙，导致无法下载或者下载很慢。因此，我们可以尝试切换成，从其他的镜像源下载 npm 包。")]),f,n("ul",null,[n("li",null,[a("项目地址："),n("a",_,[a("https://www.npmjs.com/package/nrm"),e(s)])]),n("li",null,[a("GitHub 地址： "),n("a",x,[a("https://github.com/Pana/nrm"),e(s)])])]),N,n("ul",null,[n("li",null,[a("项目地址："),n("a",y,[a("npmmirror 中国镜像站"),e(s)])])]),j])}const D=p(d,[["render",q],["__file","03.html.vue"]]);export{D as default};
