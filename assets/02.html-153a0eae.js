import{ab as p,G as o,H as c,E as n,S as s,N as t,ac as e,W as l}from"./framework-844b12a4.js";const i={},u=n("h1",{id:"_02-【使用预加载脚本】",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_02-【使用预加载脚本】","aria-hidden":"true"},"#"),s(" 02 【使用预加载脚本】")],-1),r=n("h2",{id:"_1-什么是预加载脚本",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-什么是预加载脚本","aria-hidden":"true"},"#"),s(" 1.什么是预加载脚本？")],-1),d={href:"https://www.electronjs.org/zh/docs/latest/api/app",target:"_blank",rel:"noopener noreferrer"},k={href:"https://nodejs.org/dist/latest/docs/api/",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[s("为了将 Electron 的不同类型的进程桥接在一起，我们需要使用被称为 "),n("strong",null,"预加载"),s(" 的特殊脚本。")],-1),m=n("h2",{id:"_2-使用预加载脚本来增强渲染器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-使用预加载脚本来增强渲染器","aria-hidden":"true"},"#"),s(" 2.使用预加载脚本来增强渲染器")],-1),h=n("p",null,"BrowserWindow 的预加载脚本运行在具有 HTML DOM 和 Node.js、Electron API 的有限子集访问权限的环境中。",-1),g=n("p",null,[n("strong",null,"预加载脚本沙盒化")],-1),_=n("p",null,[s("从 Electron 20 开始，预加载脚本默认 "),n("strong",null,"沙盒化"),s(" ，不再拥有完整 Node.js 环境的访问权。 实际上，这意味着你只拥有一个 polyfilled 的 "),n("code",null,"require"),s(" 函数，这个函数只能访问一组有限的 API。")],-1),b=n("thead",null,[n("tr",null,[n("th",null,"可用的 API"),n("th",null,"详细信息")])],-1),f=n("tr",null,[n("td",null,"Electron 模块"),n("td",null,"渲染进程模块")],-1),w=n("td",null,"Node.js 模块",-1),j={href:"https://nodejs.org/api/events.html",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"events",-1),x={href:"https://nodejs.org/api/timers.html",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"timers",-1),E={href:"https://nodejs.org/api/url.html",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"url",-1),I=n("td",null,"Polyfilled 的全局模块",-1),N={href:"https://nodejs.org/api/buffer.html",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"Buffer",-1),M={href:"https://www.electronjs.org/zh/docs/latest/api/process",target:"_blank",rel:"noopener noreferrer"},W=n("code",null,"process",-1),C={href:"https://nodejs.org/api/timers.html#timers_clearimmediate_immediate",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"clearImmediate",-1),T={href:"https://nodejs.org/api/timers.html#timers_setimmediate_callback_args",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"setImmediate",-1),S={href:"https://www.electronjs.org/zh/docs/latest/tutorial/sandbox",target:"_blank",rel:"noopener noreferrer"},D={href:"https://developer.chrome.com/docs/extensions/mv3/content_scripts/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.electronjs.org/zh/docs/latest/api/context-bridge",target:"_blank",rel:"noopener noreferrer"},A={href:"https://developer.mozilla.org/en-US/docs/Glossary/Global_object",target:"_blank",rel:"noopener noreferrer"},H=e(`<p>为了演示这一概念，你将会创建一个将应用中的 Chrome、Node、Electron 版本号暴露至渲染器的预加载脚本</p><p>新建一个 <code>preload.js</code> 文件。该脚本通过 <code>versions</code> 这一全局变量，将 Electron 的 <code>process.versions</code> 对象暴露给渲染器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> contextBridge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;versions&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">node</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node<span class="token punctuation">,</span>
  <span class="token function-variable function">chrome</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>chrome<span class="token punctuation">,</span>
  <span class="token function-variable function">electron</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>electron<span class="token punctuation">,</span>
  <span class="token comment">// 能暴露的不仅仅是函数，我们还可以暴露变量</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了将脚本附在渲染进程上，在 BrowserWindow 构造器中使用 <code>webPreferences.preload</code> 传入脚本的路径。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> BrowserWindow <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">createWindow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
    <span class="token literal-property property">webPreferences</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">preload</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;preload.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),O=n("p",null,[n("strong",null,"提示")],-1),V=n("p",null,"这里使用了两个Node.js概念：",-1),F={href:"https://nodejs.org/api/modules.html#modules_dirname",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"__dirname",-1),U={href:"https://nodejs.org/api/path.html#path_path_join_paths",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"path.join",-1),X=n("code",null,"versions",-1),Y=n("code",null,"window.versions",-1),J=n("code",null,"versions",-1),K=n("code",null,"renderer.js",-1),Q={href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"document.getElementById",-1),nn=n("code",null,"id",-1),sn=n("code",null,"info",-1),an=e(`<p><code>render.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> information <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;info&#39;</span><span class="token punctuation">)</span>
information<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">本应用正在使用 Chrome (v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>versions<span class="token punctuation">.</span><span class="token function">chrome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">), Node.js (v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>versions<span class="token punctuation">.</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">), 和 Electron (v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>versions<span class="token punctuation">.</span><span class="token function">electron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后请修改你的 <code>index.html</code> 文件。加上一个 <code>id</code> 属性为 <code>info</code> 的全新元素，并且记得加上你的 <code>renderer.js</code> 脚本：</p><p><code>index.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
      <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Security-Policy<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default-src &#39;self&#39;; script-src &#39;self&#39;<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
      <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-Content-Security-Policy<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default-src &#39;self&#39;; script-src &#39;self&#39;<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>来自 Electron 渲染器的问好！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>来自 Electron 渲染器的问好！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>👋<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>info<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./render.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>做完这几步之后，你的应用应该长这样：</p><h2 id="_3-在进程之间通信" tabindex="-1"><a class="header-anchor" href="#_3-在进程之间通信" aria-hidden="true">#</a> 3.在进程之间通信</h2><p>我们之前提到，Electron 的主进程和渲染进程有着清楚的分工并且不可互换。 这代表着无论是从渲染进程直接访问 Node.js 接口，亦或者是从主进程访问 HTML 文档对象模型 (DOM)，都是不可能的。</p><p>解决这一问题的方法是使用进程间通信 (IPC)。可以使用 Electron 的 <code>ipcMain</code> 模块和 <code>ipcRenderer</code> 模块来进行进程间通信。 为了从你的网页向主进程发送消息，你可以使用 <code>ipcMain.handle</code> 设置一个主进程处理程序（handler），然后在预处理脚本中暴露一个被称为 <code>ipcRenderer.invoke</code> 的函数来触发该处理程序（handler）。</p><p>我们将向渲染器添加一个叫做 <code>ping()</code> 的全局函数来演示这一点。这个函数将返回一个从主进程翻山越岭而来的字符串。</p><p>首先，在预处理脚本中设置 <code>invoke</code> 调用：</p><p><code>preload.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> contextBridge<span class="token punctuation">,</span> ipcRenderer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;versions&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">node</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node<span class="token punctuation">,</span>
  <span class="token function-variable function">chrome</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>chrome<span class="token punctuation">,</span>
  <span class="token function-variable function">electron</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>electron<span class="token punctuation">,</span>
  <span class="token function-variable function">ping</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 能暴露的不仅仅是函数，我们还可以暴露变量</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>IPC 安全</strong></p><p>可以注意到我们使用了一个辅助函数来包裹 <code>ipcRenderer.invoke(&#39;ping&#39;)</code> 调用，而并非直接通过 context bridge 暴露 <code>ipcRenderer</code> 模块。 你<strong>永远</strong>都不要想通过预加载直接暴露整个 <code>ipcRenderer</code> 模块，这将使得你的渲染器能够直接向主进程发送任意的 IPC 信息，会使得其成为恶意代码最强有力的攻击媒介。</p></blockquote><p>然后，在主进程中设置你的 <code>handle</code> 监听器。 我们在 HTML 文件加载<em>之前</em>完成了这些，所以才能保证在你从渲染器发送 <code>invoke</code> 调用之前处理程序能够准备就绪。</p><p><code>main.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> app<span class="token punctuation">,</span> BrowserWindow<span class="token punctuation">,</span> ipcMain <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">createWindow</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>
    <span class="token literal-property property">webPreferences</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">preload</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;preload.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;pong&#39;</span><span class="token punctuation">)</span>
  win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>createWindow<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将发送器与接收器设置完成之后，现在你可以将信息通过刚刚定义的 <code>&#39;ping&#39;</code> 通道从渲染器发送至主进程当中。</p><p><code>renderer.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span>versions<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment">// 打印 &#39;pong&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),tn=n("code",null,"ipcRenderer",-1),en=n("code",null,"ipcMain",-1),pn={href:"https://www.electronjs.org/zh/docs/latest/tutorial/ipc",target:"_blank",rel:"noopener noreferrer"},on=n("h2",{id:"_4-摘要",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-摘要","aria-hidden":"true"},"#"),s(" 4.摘要")],-1),cn=n("p",null,[s("预加载脚本包含在浏览器窗口加载网页之前运行的代码。 其可访问 DOM 接口和 Node.js 环境，并且经常在其中使用 "),n("code",null,"contextBridge"),s(" 接口将特权接口暴露给渲染器。")],-1),ln=n("p",null,"由于主进程和渲染进程有着完全不同的分工，Electron 应用通常使用预加载脚本来设置进程间通信 (IPC) 接口以在两种进程之间传输任意信息。",-1);function un(rn,dn){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[s("Electron 的主进程是一个拥有着完全操作系统访问权限的 Node.js 环境。 除了 "),n("a",d,[s("Electron 模组"),t(a)]),s(" 之外，你也可以使用 "),n("a",k,[s("Node.js 内置模块"),t(a)]),s(" 和所有通过 npm 安装的软件包。 另一方面，出于安全原因，渲染进程默认跑在网页页面上，而并非 Node.js里。")]),v,m,h,n("blockquote",null,[g,_,n("table",null,[b,n("tbody",null,[f,n("tr",null,[w,n("td",null,[n("a",j,[y,t(a)]),s("、"),n("a",x,[q,t(a)]),s("、"),n("a",E,[B,t(a)])])]),n("tr",null,[I,n("td",null,[n("a",N,[P,t(a)]),s("、"),n("a",M,[W,t(a)]),s("、"),n("a",C,[R,t(a)]),s("、"),n("a",T,[z,t(a)])])])])]),n("p",null,[s("有关详细信息，请阅读 "),n("a",S,[s("沙盒进程"),t(a)]),s(" 教程。")])]),n("p",null,[s("预加载脚本像 Chrome 扩展的 "),n("a",D,[s("内容脚本"),t(a)]),s("（Content Script）一样，会在渲染器的网页加载之前注入。 如果你想向渲染器加入需要特殊权限的功能，你可以通过 "),n("a",L,[s("contextBridge"),t(a)]),s(" 接口定义 "),n("a",A,[s("全局对象"),t(a)]),s("。")]),H,n("blockquote",null,[O,V,n("ul",null,[n("li",null,[n("a",F,[G,t(a)]),s(" 字符串指向当前正在执行脚本的路径 (在本例中，它指向你的项目的根文件夹)。")]),n("li",null,[n("a",U,[$,t(a)]),s(" API 将多个路径联结在一起，创建一个跨平台的路径字符串。")])])]),n("p",null,[s("现在渲染器能够全局访问 "),X,s(" 了，让我们快快将里边的信息显示在窗口中。 这个变量不仅可以通过 "),Y,s(" 访问，也可以很简单地使用 "),J,s(" 来访问。 新建一个 "),K,s(" 脚本， 这个脚本使用 "),n("a",Q,[Z,t(a)]),s(" DOM 接口来替换 "),nn,s(" 属性为 "),sn,s(" 的 HTML 元素显示文本。")]),an,n("p",null,[s("如欲了解使用 "),tn,s(" 模块和 "),en,s(" 模块的详细说明，请访问完整的 "),n("a",pn,[s("进程间通信"),t(a)]),s(" 指南。")]),on,cn,ln])}const vn=p(i,[["render",un],["__file","02.html.vue"]]);export{vn as default};
