const t=JSON.parse('{"key":"v-753a4159","path":"/front_end/other/git/01.html","title":"01 【版本控制和Git的安装介绍】","lang":"zh-CN","frontmatter":{"description":"01 【版本控制和Git的安装介绍】 工程设计领域中，使用“版本控制”管理工程蓝图的设计过程。在 IT 开发中也可以使用版本控制思想管理代码的版本迭代。 1.目的 协同修改：支持在服务器对同一个文件多人协同地修改； 数据备份：同时保存目录及文件的当前状态与每次提交时的历史状态； 版本管理：不保存版本间的重复数据以节约存储空间； 为此，SVN 和 Git 分别采用增量式管理 和文件系统快照 的方式。 权限控制：对团队协作者进行权限控制（SVN 和 Git 共有）；审核团队外开发者贡献的代码（Git 独有）； 历史记录：查看修改者、修改时间、修改内容、日志信息等项目；将本地文件恢复到某一指定的历史状态； 分支管理：允许开发团队同时优雅地推进多条生产线任务，提高效率。","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.cf/front_end/other/git/01.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"01 【版本控制和Git的安装介绍】"}],["meta",{"property":"og:description","content":"01 【版本控制和Git的安装介绍】 工程设计领域中，使用“版本控制”管理工程蓝图的设计过程。在 IT 开发中也可以使用版本控制思想管理代码的版本迭代。 1.目的 协同修改：支持在服务器对同一个文件多人协同地修改； 数据备份：同时保存目录及文件的当前状态与每次提交时的历史状态； 版本管理：不保存版本间的重复数据以节约存储空间； 为此，SVN 和 Git 分别采用增量式管理 和文件系统快照 的方式。 权限控制：对团队协作者进行权限控制（SVN 和 Git 共有）；审核团队外开发者贡献的代码（Git 独有）； 历史记录：查看修改者、修改时间、修改内容、日志信息等项目；将本地文件恢复到某一指定的历史状态； 分支管理：允许开发团队同时优雅地推进多条生产线任务，提高效率。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01 【版本控制和Git的安装介绍】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.目的","slug":"_1-目的","link":"#_1-目的","children":[]},{"level":2,"title":"2. 工具","slug":"_2-工具","link":"#_2-工具","children":[{"level":3,"title":"2.1 集中式版本控制工具","slug":"_2-1-集中式版本控制工具","link":"#_2-1-集中式版本控制工具","children":[]},{"level":3,"title":"2.2 分布式版本控制工具","slug":"_2-2-分布式版本控制工具","link":"#_2-2-分布式版本控制工具","children":[]}]},{"level":2,"title":"3.Git 简介","slug":"_3-git-简介","link":"#_3-git-简介","children":[{"level":3,"title":"3.2 Git：分布式版本控制系统","slug":"_3-2-git-分布式版本控制系统","link":"#_3-2-git-分布式版本控制系统","children":[]},{"level":3,"title":"3.2 发展史","slug":"_3-2-发展史","link":"#_3-2-发展史","children":[]},{"level":3,"title":"3.3 优势","slug":"_3-3-优势","link":"#_3-3-优势","children":[]}]},{"level":2,"title":"4.Git 软件的安装","slug":"_4-git-软件的安装","link":"#_4-git-软件的安装","children":[]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":3.75,"words":1125},"filePathRelative":"front_end/other/git/01.md","localizedDate":"2023年1月30日","excerpt":"<h1> 01 【版本控制和Git的安装介绍】</h1>\\n<p>工程设计领域中，使用“版本控制”管理工程蓝图的设计过程。在 IT 开发中也可以使用版本控制思想管理代码的版本迭代。</p>\\n<h2> 1.目的</h2>\\n<p>协同修改：支持在服务器对同一个文件多人协同地修改；\\n数据备份：同时保存目录及文件的当前状态与每次提交时的历史状态；\\n版本管理：不保存版本间的重复数据以节约存储空间；</p>\\n<blockquote>\\n<p>为此，SVN 和 Git 分别采用增量式管理 和文件系统快照 的方式。</p>\\n</blockquote>\\n<p>权限控制：对团队协作者进行权限控制（SVN 和 Git 共有）；审核团队外开发者贡献的代码（Git 独有）；\\n历史记录：查看修改者、修改时间、修改内容、日志信息等项目；将本地文件恢复到某一指定的历史状态；\\n分支管理：允许开发团队同时优雅地推进多条生产线任务，提高效率。</p>","autoDesc":true}');export{t as data};
