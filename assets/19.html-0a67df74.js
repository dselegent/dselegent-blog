import{ab as p,G as o,H as c,E as n,S as s,N as t,ac as e,W as i}from"./framework-09305b5d.js";const l={},u=e('<h1 id="_19-【rtk-query】" tabindex="-1"><a class="header-anchor" href="#_19-【rtk-query】" aria-hidden="true">#</a> 19 【RTK Query】</h1><h2 id="_1-目前前端常见的发起-ajax-请求的方式" tabindex="-1"><a class="header-anchor" href="#_1-目前前端常见的发起-ajax-请求的方式" aria-hidden="true">#</a> 1.目前前端常见的发起 ajax 请求的方式</h2><ul><li>1、使用原生的<code>ajax</code>请求</li><li>2、使用<code>jquery</code>封装好的<code>ajax</code>请求</li><li>3、使用<code>fetch</code>发起请求</li><li>4、第三方的比如<code>axios</code>请求</li><li>5、<code>angular</code>中自带的<code>HttpClient</code></li></ul><p>就目前前端框架开发中来说我们在开发<code>vue</code>、<code>react</code>的时候一般都是使用<code>fetch</code>或<code>axios</code>自己封装一层来与后端数据交互，至于<code>angular</code>肯定是用自带的<code>HttpClient</code>请求方式，但是依然存在几个致命的弱点，</p><ul><li>1、对当前请求数据不能缓存，</li><li>2、一个页面上由多个组件组成，但是刚好有遇到复用相同组件的时候，那么就会发起多次<code>ajax</code>请求</li></ul><blockquote><p>📢 针对同一个接口发起多次请求的解决方法，目前常见的解决方案</p></blockquote>',6),r=n("code",null,"axios",-1),d={href:"http://www.axios-js.com/zh-cn/docs/#%E5%8F%96%E6%B6%88",target:"_blank",rel:"noopener noreferrer"},k=n("li",null,[s("2、"),n("code",null,"vue"),s("中还没看到比较好的方法")],-1),v=n("code",null,"rect",-1),m={href:"https://react-query.tanstack.com/",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,[s("4、对于"),n("code",null,"angular"),s("中直接使用"),n("code",null,"rxjs"),s("的操作符"),n("code",null,"shareReplay")],-1),g=n("h2",{id:"_2-rtk-query-概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-rtk-query-概述","aria-hidden":"true"},"#"),s(" 2.RTK Query 概述")],-1),y=n("p",null,"RTK不仅帮助我们解决了state的问题，同时，它还为我们提供了RTK Query用来帮助我们处理数据加载的问题。RTK Query是一个强大的数据获取和缓存工具。在它的帮助下，Web应用中的加载变得十分简单，它使我们不再需要自己编写获取数据和缓存数据的逻辑。",-1),f=n("code",null,"rtk-query",-1),h={href:"https://redux-toolkit.js.org/",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"redux-toolkit",-1),w=n("code",null,"react",-1),_=e(`<p><strong>RTK Query</strong> 是一个强大的数据获取和缓存工具。它旨在简化在 Web 应用程序中加载数据的常见情况，<strong>无需自己手动编写数据获取和缓存逻辑</strong>。</p><p>RTK Query 是<strong>一个包含在 Redux Toolkit 包中的可选插件</strong>，其功能构建在 Redux Toolkit 中的其他 API 之上。</p><p><strong>Web应用中加载数据时需要处理的问题：</strong></p><ol><li>根据不同的加载状态显示不同UI组件</li><li>减少对相同数据重复发送请求</li><li>使用乐观更新，提升用户体验</li><li>在用户与UI交互时，管理缓存的生命周期</li></ol><p>这些问题，RTKQ都可以帮助我们处理。首先，可以直接通过RTKQ向服务器发送请求加载数据，并且RTKQ会自动对数据进行缓存，避免重复发送不必要的请求。其次，RTKQ在发送请求时会根据请求不同的状态返回不同的值，我们可以通过这些值来监视请求发送的过程并随时中止。</p><p>我们将 <code>createAsyncThunk</code> 与 <code>createSlice</code> 一起使用，在发出请求和管理加载状态方面仍然需要进行大量手动工作。我们必须创建异步 thunk，发出实际请求，从响应中提取相关字段，添加加载状态字段，在 <code>extraReducers</code> 中添加处理程序以处理 <code>pending/fulfilled/rejected</code> 情况，并实际编写正确的状态更新。</p><p>在过去的几年里，React 社区已经意识到 <strong>“数据获取和缓存” 实际上是一组不同于 “状态管理” 的关注点</strong>。虽然你可以使用 Redux 之类的状态管理库来缓存数据，但用例差异较大，因此值得使用专门为数据获取用例构建的工具。</p><p>RTK Query 在其 API 设计中添加了独特的方法：</p><ul><li>数据获取和缓存逻辑构建在 Redux Toolkit 的 <code>createSlice</code> 和 <code>createAsyncThunk</code> API 之上</li><li>由于 Redux Toolkit 与 UI 无关，因此 RTK Query 的功能可以与任何 UI 层一起使用</li><li>API 请求接口是提前定义的，包括如何从参数生成查询参数和转换响应以进行缓存</li><li>RTK Query 还可以生成封装整个数据获取过程的 React hooks ，为组件提供 <code>data</code> 和 <code>isFetching</code> 字段，并在组件挂载和卸载时管理缓存数据的生命周期</li><li>RTK Query 提供“缓存数据项生命周期函数”选项，支持在获取初始数据后通过 websocket 消息流式传输缓存更新等用例</li><li>我们有从 OpenAPI 和 GraphQL 模式生成 API slice 代码的早期工作示例</li><li>最后，RTK Query 完全用 TypeScript 编写，旨在提供出色的 TS 使用体验</li></ul><blockquote><p>📢 <code>rtk-query</code>的使用环境，必须是<code>react</code>版本大于 17,可以使用<code>hooks</code>的版本，因为使用<code>rtk-query</code>的查询都是<code>hooks</code>的方式，如果你项目简单<code>redux</code>都未使用到，本人不建议你用<code>rtk-query</code>，可能直接使用<code>axios</code>请求更加的简单方便。</p></blockquote><h2 id="_3-基础开发流程" tabindex="-1"><a class="header-anchor" href="#_3-基础开发流程" aria-hidden="true">#</a> 3.基础开发流程</h2><blockquote><p>后面这些案例后端接口返回格式都是</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><ul><li>创建一个store文件夹</li><li>创建一个index.ts做为主入口</li><li>创建一个festures/api文件夹用来装所有的API Slice</li><li>创建一个sudentApiSlice.js文件，并导出简单的加减方法</li></ul><h3 id="_3-1-定义-api-slice" tabindex="-1"><a class="header-anchor" href="#_3-1-定义-api-slice" aria-hidden="true">#</a> 3.1 定义 API Slice</h3><p>使用 RTK Query，<strong>管理缓存数据的逻辑被集中到每个应用程序的单个“API Slice”中</strong>。就像每个应用程序只有一个 Redux 存储一样，我们现在有一个Slice 用于 <em>所有</em> 我们的缓存数据。</p><p>我们将从定义一个新的 <code>sudentApiSlice.js</code> 文件开始。由于这不是特定于我们已经编写的任何其他“功能”，我们将添加一个新的 <code>features/api/</code> 文件夹并将 <code>sudentApiSlice.js</code> 放在那里。让我们填写 API Slice 文件，然后分解里面的代码，看看它在做什么：</p><p><code>features/api/sudentApiSlice.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从特定于 React 的入口点导入 RTK Query 方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApi<span class="token punctuation">,</span> fetchBaseQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit/dist/query/react&#39;</span>
<span class="token comment">// 上面这个引入的会自动创建钩子</span>
<span class="token comment">// import { createApi } from &#39;@reduxjs/toolkit/query&#39;</span>

<span class="token comment">// 定义我们的单个 API Slice 对象</span>
<span class="token comment">//createApi() 用来创建RTKQ中的API对象</span>
<span class="token comment">// RTKQ的所有功能都需要通过该对象来进行</span>
<span class="token comment">// createApi() 需要一个对象作为参数</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> sudentApiSlice <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">reducerPath</span><span class="token operator">:</span> <span class="token string">&#39;studentApi&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Api的标识，不能和其他的Api或reducer重复</span>
  <span class="token comment">// 指定查询的基础信息，发送请求使用的工具</span>
  <span class="token literal-property property">baseQuery</span><span class="token operator">:</span> <span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 我们所有的请求都有以 “/api 开头的 URL</span>
    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:8080/api&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// “endpoints” 代表对该服务器的操作和请求</span>
  <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token parameter">builder</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// \`getStudents\` endpoint 是一个返回数据的 “Query” 操作</span>
    <span class="token literal-property property">getStudents</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 请求的 URL 是“/api/all/student”</span>
      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;/all/student&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// Api对象创建后，对象中会根据各种方法自动的生成对应的钩子函数</span>
<span class="token comment">// 通过这些钩子函数，可以来向服务器发送请求</span>
<span class="token comment">// 钩子函数的命名规则 getStudents --&gt; useGetStudentsQuery</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> useGetStudentsQuery <span class="token punctuation">}</span> <span class="token operator">=</span> sudentApiSlice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例是一个比较简单的Api对象的例子，我们来分析一下，首先我们需要调用<code>createApi()</code>来创建Api对象。这个方法在RTK中存在两个版本，一个位于<code>@reduxjs/toolkit/dist/query</code>下，一个位于<code>@reduxjs/toolkit/dist/query/react</code>下。react目录下的版本会自动生成一个钩子，方便我们使用Api。如果不要钩子，可以引入query下的版本，当然我不建议你这么做。</p><p><code>createApi()</code>需要一个配置对象作为参数，配置对象中的属性繁多，我们暂时介绍案例中用到的属性：</p><p><strong>reducerPath</strong></p><p>用来设置reducer的唯一标识，主要用来在创建store时指定action的type属性，如果不指定默认为api。</p><p><strong>baseQuery</strong></p><p>用来设置发送请求的工具，就是你是用什么发请求，RTKQ为我们提供了fetchBaseQuery作为查询工具，它对fetch进行了简单的封装，很方便，如果你不喜欢可以改用其他工具，这里暂时不做讨论。</p><p><strong>fetchBaseQuery</strong></p><p>简单封装过的fetch调用后会返回一个封装后的工具函数。需要一个配置对象作为参数，baseUrl表示Api请求的基本路径，指定后请求将会以该路径为基本路径。配置对象中其他属性暂不讨论。</p><p><strong>endpoints</strong></p><p>Api对象封装了一类功能，比如学生的增删改查，我们会统一封装到一个对象中。一类功能中的每一个具体功能我们可以称它是一个端点。endpoints用来对请求中的端点进行配置。</p><p>endpoints是一个回调函数，可以用普通方法的形式指定，也可以用箭头函数。回调函数中会收到一个build对象，使用build对象对点进行映射。回调函数的返回值是一个对象，Api对象中的所有端点都要在该对象中进行配置。</p><p>对象中属性名就是要实现的功能名，比如获取所有学生可以命名为getStudents，根据id获取学生可以命名为getStudentById。属性值要通过build对象创建，分两种情况：</p><p>查询：<code>build.query({})</code></p><p>增删改：<code>build.mutation({})</code></p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">getStudents</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 请求的 URL 是“/api/all/student”</span>
  <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;/all/student&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先说query，query也需要一个配置对象作为参数。配置对象里同样有n多个属性，现在直说一个，query方法。注意不要搞混两个query，一个是build的query方法，一个是query方法配置对象中的属性，这个方法需要返回一个子路径，这个子路径将会和baseUrl拼接为一个完整的请求路径。比如：getStudets的最终请求地址是:</p><div class="language-absh line-numbers-mode" data-ext="absh"><pre class="language-absh"><code>http://localhost:8080/api + /all/student = http://localhost:8080/api/all/student
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可算是介绍完了，但是注意了这个只是最基本的配置。RTKQ功能非常强大，但是配置也比较麻烦。不过，熟了就好了。</p><p>上例中，我们创建一个Api对象studentApi，并且在对象中定义了一个getStudents方法用来查询所有的学生信息。如果我们使用react下的createApi，则其创建的Api对象中会自动生成钩子函数，钩子函数名字为useXxxQuery或useXxxMutation，中间的Xxx就是方法名，查询方法的后缀为Query，修改方法的后缀为Mutation。所以上例中，Api对象中会自动生成一个名为useGetStudentsQuery的钩子，我们可以获取并将钩子向外部暴露。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>useGetStudentsQuery<span class="token punctuation">}</span> <span class="token operator">=</span> studentApi<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-2-配置-store" tabindex="-1"><a class="header-anchor" href="#_3-2-配置-store" aria-hidden="true">#</a> 3.2 配置 Store</h3><p>我们现在需要将 API Slice 连接到我们的 Redux 存储。我们可以修改现有的 <code>store.js</code> 文件，将 API slice 的 cache reducer 添加到状态中。此外，API slice 会生成需要添加到 store 的自定义 middleware。这个 middleware <em>必须</em> 被添加——它管理缓存的生命周期和控制是否过期。</p><p><code>store/index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> sudentApiSlice <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./features/api/sudentApiSlice&#39;</span>

<span class="token comment">// configureStore创建一个redux数据</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 合并多个Slice</span>
  <span class="token literal-property property">reducer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>sudentApiSlice<span class="token punctuation">.</span>reducerPath<span class="token punctuation">]</span><span class="token operator">:</span> sudentApiSlice<span class="token punctuation">.</span>reducer<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">middleware</span><span class="token operator">:</span> <span class="token parameter">getDefaultMiddleware</span> <span class="token operator">=&gt;</span> <span class="token function">getDefaultMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>sudentApiSlice<span class="token punctuation">.</span>middleware<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在 <code>reducer</code> 参数中重用 <code>sudentApiSlice.reducerPath</code> 字段作为计算键，以确保在正确的位置添加缓存 reducer。</p><p>我们需要在 store 设置中保留所有现有的标准 middleware，例如“redux-thunk”，而 API slice 的 middleware 通常会在这些 middleware 之后使用。我们可以通过向 <code>configureStore</code> 提供 <code>middleware</code> 参数，调用提供的 <code>getDefaultMiddleware()</code> 方法，并在返回的 middleware 数组的末尾添加 <code>sudentApiSlice.middleware</code> 来做到这一点。</p><p>store创建完毕同样要设置Provider标签，这里不再展示。</p><h3 id="_3-3-在组件中使用-query-hooks" tabindex="-1"><a class="header-anchor" href="#_3-3-在组件中使用-query-hooks" aria-hidden="true">#</a> 3.3 在组件中使用 Query Hooks</h3><p>接下来，我们来看看如果通过studentApi发送请求。由于我们已经将studentApi中的钩子函数向外部导出了，所以我们只需通过钩子函数即可自动加载到所有的学生信息。比如，现在在App.js中加载信息可以这样编写代码：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useGetStudentsQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/features/api/sudentApiSlice&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span>studentsRes<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isSuccess<span class="token punctuation">,</span> isError<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetStudentsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">let</span> content
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> <span class="token string">&#39;正在加载中&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> studentsRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">stu</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>_id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"> ---
        </span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token plain-text"> ---
        </span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们能够用对 <code>useGetStudentsQuery()</code> 的单个调用来替换多个 <code>useSelector</code> 调用和 <code>useEffect</code> 调度。</p><p>直接调用<code>useGetStudentsQuery()</code>它会自动向服务器发送请求加载数据，每个生成的 Query hooks 都会返回一个包含多个字段的“结果”对象，包括：</p><ol><li><code>data</code> – 来自服务器的实际响应内容。 <strong>在收到响应之前，该字段将是 “undefined”</strong>。</li><li><code>currentData</code> – 当前的数据</li><li><code>isUninitialized</code> – 如果为true则表示查询还没开始</li><li><code>data</code>:来自服务器的实际响应内容。 <strong>在收到响应之前，该字段将是 “undefined”</strong>。</li><li><code>isLoading</code>: 一个 boolean，指示此 hooks 当前是否正在向服务器发出 <em>第一次</em> 请求。（请注意，如果参数更改以请求不同的数据，<code>isLoading</code> 将保持为 false。）</li><li><code>isFetching</code>: 一个 boolean，指示 hooks 当前是否正在向服务器发出 <em>any</em> 请求</li><li><code>isSuccess</code>: 一个 boolean，指示 hooks 是否已成功请求并有可用的缓存数据（即，现在应该定义 data）</li><li><code>isError</code>: 一个 boolean，指示最后一个请求是否有错误</li><li><code>error</code>: 一个 serialized 错误对象</li><li><code>refetch </code>函数，用来重新加载数据</li></ol><p>从结果对象中解构字段是很常见的，并且可能将 <code>data</code> 重命名为更具体的变量，例如 <code>studentRes</code> 来描述它包含的内容。然后我们可以使用状态 boolean 和 <code>data/error</code> 字段来呈现我们想要的 UI。 但是，如果你使用的是 TypeScript，你可能需要保持原始对象不变，并在条件检查中将标志引用为 <code>result.isSuccess</code>，以便 TS 可以正确推断 <code>data</code> 是有效的。</p><figure><img src="https://i0.hdslb.com/bfs/album/f1cc5755cb70b40751511b3dbf6ebdb2cfab7133.png" alt="Snipaste_2022-11-04_22-57-20" tabindex="0" loading="lazy"><figcaption>Snipaste_2022-11-04_22-57-20</figcaption></figure><p>这是最终效果：</p><figure><img src="https://i0.hdslb.com/bfs/album/e0818fbcb9a2c521bcf4ded7d67336911813198e.png" alt="image-20221104231936997" tabindex="0" loading="lazy"><figcaption>image-20221104231936997</figcaption></figure><h2 id="_4-传递参数" tabindex="-1"><a class="header-anchor" href="#_4-传递参数" aria-hidden="true">#</a> 4.传递参数</h2><h3 id="_4-1-定义接收参数" tabindex="-1"><a class="header-anchor" href="#_4-1-定义接收参数" aria-hidden="true">#</a> 4.1 定义接收参数</h3><p><code>features/api/sudentApiSlice.js</code></p><p>这里定义了一个新的接口，通过id获取学生信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从特定于 React 的入口点导入 RTK Query 方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApi<span class="token punctuation">,</span> fetchBaseQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit/dist/query/react&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> sudentApiSlice <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">reducerPath</span><span class="token operator">:</span> <span class="token string">&#39;studentApi&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">baseQuery</span><span class="token operator">:</span> <span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token parameter">builder</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">getStudentById</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token comment">// 从query方法这里接收参数</span>
      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token parameter">sutId</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/student/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sutId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> useGetStudentsQuery<span class="token punctuation">,</span> useGetStudentByIdQuery <span class="token punctuation">}</span> <span class="token operator">=</span> sudentApiSlice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-传递参数" tabindex="-1"><a class="header-anchor" href="#_4-2-传递参数" aria-hidden="true">#</a> 4.2 传递参数</h3><p><code>App.jsx</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useGetStudentByIdQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/features/api/sudentApiSlice&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stuId <span class="token operator">=</span> <span class="token string">&#39;63652d2c03155b63eea7b9f5&#39;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> studentRes<span class="token punctuation">,</span>
    isLoading<span class="token punctuation">,</span>
    isSuccess<span class="token punctuation">,</span>
    isError<span class="token punctuation">,</span>
    error<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetStudentByIdQuery</span><span class="token punctuation">(</span>stuId<span class="token punctuation">)</span>
  
  <span class="token keyword">let</span> content
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> <span class="token string">&#39;正在加载中&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>studentRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"> ---</span><span class="token punctuation">{</span>studentRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token plain-text"> ---</span><span class="token punctuation">{</span>studentRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>useGetPostQuery</code>这个钩子接收的第一个参数传递到<code>query</code>方法，使用起来很简单</p><figure><img src="https://i0.hdslb.com/bfs/album/8f9e3ec4a807396819fcb6d9ef6628816da0df14.png" alt="image-20221105135329712" tabindex="0" loading="lazy"><figcaption>image-20221105135329712</figcaption></figure><h2 id="_5-转换响应" tabindex="-1"><a class="header-anchor" href="#_5-转换响应" aria-hidden="true">#</a> 5.转换响应</h2><p><strong>请求接口可以定义一个 <code>transformResponse</code> 处理程序，该处理程序可以在缓存之前提取或修改从服务器接收到的数据</strong>。我们可以有 <code>transformResponse: (responseData) =&gt; responseData.data</code>，它只会缓存实际的 <code>student</code> 对象，而不是整个响应体。</p><p><code>features/api/sudentApiSlice.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">getStudentById</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token parameter">sutId</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/student/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sutId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token function-variable function">transformResponse</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">responseData<span class="token punctuation">,</span> meta<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> responseData<span class="token punctuation">.</span>data
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上一个案例中通过id获取学生信息的接口，加一个<code>transformResponse</code>方法，我们来看看他接受到的参数<code>responseData</code>是什么</p><figure><img src="https://i0.hdslb.com/bfs/album/8e08b7d67470ca1eeafadf751a723966090f855e.png" alt="image-20221105140454626" tabindex="0" loading="lazy"><figcaption>image-20221105140454626</figcaption></figure><p>可以看到<code>responseData</code>这个参数就是我们的响应体</p><p>在使用的过程中，发现这个方法类似于响应拦截器。</p><p>我们在<code>App.jsx</code>中看看<code>useGetStudentByIdQuery</code>这个钩子函数返回的<code>data</code>有什么变化</p><figure><img src="https://i0.hdslb.com/bfs/album/79bbe6858e5a55b3f62201d3db8643984d69e29b.png" alt="image-20221105140911763" tabindex="0" loading="lazy"><figcaption>image-20221105140911763</figcaption></figure><h2 id="_6-rtk-query-缓存简单介绍" tabindex="-1"><a class="header-anchor" href="#_6-rtk-query-缓存简单介绍" aria-hidden="true">#</a> 6.RTK Query 缓存简单介绍</h2><blockquote><p>后面在介绍缓存的灵活使用</p></blockquote><h3 id="_6-1-什么是相同查询" tabindex="-1"><a class="header-anchor" href="#_6-1-什么是相同查询" aria-hidden="true">#</a> 6.1 什么是相同查询</h3><p>RTK Query 会将查询查询参数序列化为字符串，并将相同钩子、相同参数的查询视为相同的查询，他们将共享一个请求与缓存数据。</p><p>因此，下面两个调用返回结果相同（即使在不同的组件中）：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useGetXXXQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 订阅 + 1</span>
<span class="token function">useGetXXXQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 订阅 + 1</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为：</p><ul><li>他们使用相同的查询：GetXXX</li><li>查询参数的序列化结果相同：<code>&#39;{&quot;a&quot;:1,&quot;b&quot;:2}&#39;</code></li></ul><p>你不需要担心嵌套或是字段顺序，或是不同对象不同引用会被认为是不同的查询，因为 RTK Query 已经在默认的序列化函数中处理了相关用例。同时，你也可以提供自己的序列化函数。</p><h3 id="_6-2-引用计数与垃圾回收" tabindex="-1"><a class="header-anchor" href="#_6-2-引用计数与垃圾回收" aria-hidden="true">#</a> 6.2 引用计数与垃圾回收</h3><p>当在组件中使用某个查询时，该查询的引用计数会 + 1，当该组件被卸载时，引用计数会 -1。当一个查询的引用计数为 0 时，说明没有任何组件在使用这个查询。此时，经过 <code>keepUnusedDataFor</code>（默认为 30 ）秒后，如果缓存仍为被使用过，那么他将被从缓存中移除。</p><h3 id="_6-3-缓存初体验" tabindex="-1"><a class="header-anchor" href="#_6-3-缓存初体验" aria-hidden="true">#</a> 6.3 缓存初体验</h3><p>缓存的配置</p><p><code>store/index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// configureStore创建一个redux数据</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 合并多个Slice</span>
  <span class="token literal-property property">reducer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>sudentApiSlice<span class="token punctuation">.</span>reducerPath<span class="token punctuation">]</span><span class="token operator">:</span> sudentApiSlice<span class="token punctuation">.</span>reducer<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">middleware</span><span class="token operator">:</span> <span class="token parameter">getDefaultMiddleware</span> <span class="token operator">=&gt;</span> <span class="token function">getDefaultMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>sudentApiSlice<span class="token punctuation">.</span>middleware<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> store

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是在这个<code>store</code>配置这个中间件，一开始就配好了。</p><p>来看看实际效果</p><p>先改写下上面的案例</p><p><code>App.jsx</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> StudentA <span class="token keyword">from</span> <span class="token string">&#39;./StudentA&#39;</span>
<span class="token keyword">import</span> StudentB <span class="token keyword">from</span> <span class="token string">&#39;./StudentB&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>tab<span class="token punctuation">,</span> setTab<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

  <span class="token keyword">let</span> content
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>tab<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
      content <span class="token operator">=</span> <span class="token string">&#39;首页&#39;</span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
      content <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StudentA</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token keyword">break</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
      content <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StudentB</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token keyword">break</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTab</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">首页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTab</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">学生A</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTab</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">学生B</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>StudentA.jsx</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useGetStudentByIdQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/features/api/sudentApiSlice&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stuId <span class="token operator">=</span> <span class="token string">&#39;63652d2c03155b63eea7b9f5&#39;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> studentRes<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isSuccess<span class="token punctuation">,</span> isError<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetStudentByIdQuery</span><span class="token punctuation">(</span>stuId<span class="token punctuation">)</span>

  <span class="token keyword">let</span> content
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> <span class="token string">&#39;正在加载中&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>studentRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"> ---</span><span class="token punctuation">{</span>studentRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token plain-text"> ---</span><span class="token punctuation">{</span>studentRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;渲染了&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">组件StudentA</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>StudentB.jsx</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useGetStudentByIdQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/features/api/sudentApiSlice&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> stuId <span class="token operator">=</span> <span class="token string">&#39;63652d2c03155b63eea7b9f5&#39;</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> studentRes<span class="token punctuation">,</span> isLoading<span class="token punctuation">,</span> isSuccess<span class="token punctuation">,</span> isError<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetStudentByIdQuery</span><span class="token punctuation">(</span>stuId<span class="token punctuation">)</span>

  <span class="token keyword">let</span> content
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> <span class="token string">&#39;正在加载中&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>studentRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"> ---</span><span class="token punctuation">{</span>studentRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token plain-text"> ---</span><span class="token punctuation">{</span>studentRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;渲染了&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">组件StudentB</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们把学生信息抽离成两个组件，里面除了标题都是一样的，在<code>App.jsx</code>中设置了个三个按钮控制显示隐藏</p><p>切换到<code>StudentA</code>组件</p><figure><img src="https://i0.hdslb.com/bfs/album/82cdd432c4ba92162d0b00a97c17086e4319de99.png" alt="image-20221105151052394" tabindex="0" loading="lazy"><figcaption>image-20221105151052394</figcaption></figure><p>切换到<code>StudentB</code>组件</p><figure><img src="https://i0.hdslb.com/bfs/album/5cb7363a0c93dbea2ce3c1a6f2243ba4012e57c4.png" alt="image-20221105151112395" tabindex="0" loading="lazy"><figcaption>image-20221105151112395</figcaption></figure><p>可以看到切换到<code>StudentB</code>组件并没有重新发起请求，这就是缓存生效了。</p><p><strong>RTK Query 允许多个组件订阅相同的数据，并且将确保每个唯一的数据集只获取一次。</strong> 在内部，RTK Query 为每个请求接口 + 缓存键组合保留一个 action 订阅的引用计数器。如果组件 A 调用 <code>useGetStudentByIdQuery(stuId)</code>，则将获取该数据。如果组件 B 挂载并调用 <code>useGetStudentByIdQuery(stuId)</code>，则请求的数据完全相同。两种钩子用法将返回完全相同的结果，包括获取的 “data” 和加载状态标志。</p><p>当活跃订阅数下降到 0 时，RTK Query 会启动一个内部计时器。 <strong>如果在添加任何新的数据订阅之前计时器到期，RTK Query 将自动从缓存中删除该数据</strong>，因为应用程序不再需要该数据。但是，如果在计时器到期之前添加了新订阅，则取消计时器，并使用已缓存的数据而无需重新获取它。</p><p>在这种情况下，我们的 <code>&lt;StudentA&gt;</code> 挂载并通过 ID 请求。当我们“切换” 时，<code>&lt;StudentA&gt;</code> 组件被路由器卸载，并且活动订阅由于卸载而被删除。RTK Query 立即启动 “remove this post data” 计时器。但是，<code>&lt;StudentB&gt;</code> 组件会立即挂载并使用相同的缓存键订阅相同的 <code>student</code> 数据。因此，RTK Query 取消了计时器并继续使用相同的缓存数据，而不是从服务器获取数据。</p><p>默认情况下，<strong>未使用的数据会在 60 秒后从缓存中删除</strong>，但这可以在根 API Slice 定义中进行配置，也可以使用 <code>keepUnusedDataFor</code> 标志在各个请求接口定义中覆盖，该标志指定缓存生存期 秒。</p><p><code>features/api/sudentApiSlice.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">getStudentById</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 从query方法这里接收参数</span>
  <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token parameter">sutId</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/student/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sutId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">keepUnusedDataFor</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token comment">// 设置数据缓存的时间，单位秒 默认60s</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-mutation-请求接口" tabindex="-1"><a class="header-anchor" href="#_7-mutation-请求接口" aria-hidden="true">#</a> 7.mutation 请求接口</h2><p>我们已经看到了如何通过定义查询请求接口从服务器获取数据，但是向服务器发送更新呢？</p><p>RTK Query 让我们定义 <strong>mutation 请求接口</strong> 来更新服务器上的数据。让我们添加一个可以让我们添加新学生的 Mutation。</p><h3 id="_7-1-添加新的-mutations-后请求接口" tabindex="-1"><a class="header-anchor" href="#_7-1-添加新的-mutations-后请求接口" aria-hidden="true">#</a> 7.1 添加新的 Mutations 后请求接口</h3><p>添加 Mutation 请求接口与添加查询请求接口非常相似。 最大的不同是我们使用 <code>builder.mutation()</code> 而不是 <code>builder.query()</code> 来定义请求接口。 此外，我们现在需要将 HTTP 方法更改为“POST”请求，并且我们还必须提供请求的正文。</p><p><code>features/api/sudentApiSlice.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApi<span class="token punctuation">,</span> fetchBaseQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit/dist/query/react&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> sudentApiSlice <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">reducerPath</span><span class="token operator">:</span> <span class="token string">&#39;studentApi&#39;</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">baseQuery</span><span class="token operator">:</span> <span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token parameter">builder</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">getStudents</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;/all/student&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">getStudentById</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token parameter">sutId</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/student/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sutId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">addNewStudent</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">mutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token parameter">student</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/student&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 将整个post对象作为请求的主体</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> student<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> useGetStudentsQuery<span class="token punctuation">,</span> useGetStudentByIdQuery<span class="token punctuation">,</span> useAddNewStudentMutation <span class="token punctuation">}</span> <span class="token operator">=</span>
  sudentApiSlice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们的 <code>query</code> 选项返回一个包含 <code>{url, method, body}</code> 的对象。 由于我们使用 <code>fetchBaseQuery</code> 来发出请求，<code>body</code> 字段将自动为我们进行 JSON 序列化。</p><p>与查询请求接口一样，API slice 会自动为 Mutation 请求接口生成一个 React hooks - 在本例中为 <code>useAddNewPostMutation</code>。</p><h3 id="_7-2-在组件中使用-mutation-hooks" tabindex="-1"><a class="header-anchor" href="#_7-2-在组件中使用-mutation-hooks" aria-hidden="true">#</a> 7.2 在组件中使用 Mutation Hooks</h3><p>每当我们单击“添加”按钮时，我们以前得调度了一个异步 thunk 来添加。 为此，它必须导入 <code>useDispatch</code> 和 <code>addNewPost</code> thunk。 Mutation hooks 取代了这两者，并且使用模式非常相似。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useAddNewStudentMutation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/features/api/sudentApiSlice&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>sex<span class="token punctuation">,</span> setSex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

  <span class="token comment">// 获取添加的钩子，useMutation的钩子返回的是一个数组</span>
  <span class="token comment">// 数组中有两个东西，第一个是操作的触发器，第二个是结果集</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>addNewStudent<span class="token punctuation">,</span> <span class="token punctuation">{</span> isLoading <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useAddNewStudentMutation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> canSubmit <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isLoading

  <span class="token keyword">const</span> <span class="token function-variable function">onAddStuClicked</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canSubmit<span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">await</span> <span class="token function">addNewStudent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Failed to add student: &#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">首页</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onAddStuClicked<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">添加学生</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        姓名：
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">setName</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        年龄：
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token operator">+</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
        性别：
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>sex<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">setSex</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mutation hooks 返回一个包含两个值的数组：</p><ul><li>第一个值是触发函数。当被调用时，它会使用你提供的任何参数向服务器发出请求。这实际上就像一个已经被包装以立即调度自身的 thunk。</li><li>第二个值是一个对象，其中包含有关当前正在进行的请求（如果有）的元数据。这包括一个 <code>isLoading</code> 标志以指示请求是否正在进行中。</li></ul><p>我们可以用 <code>useAddNewStudentMutation</code> hooks 中的触发函数和 <code>isLoading</code> 标志替换现有的 thunk 调度和组件加载状态，组件的其余部分保持不变。</p><p>与 thunk 调度一样，我们使用初始 post 对象调用 <code>addNewStudent</code>。 这会返回一个带有<code>.unwrap()</code>方法的特殊 Promise ，我们可以 <code>await addNewStudent().unwrap()</code> 使用标准的 <code>try/catch</code> 块来处理任何潜在的错误。</p><figure><img src="https://i0.hdslb.com/bfs/album/218da1adc96ca99b2f9ee57c5b7a8c96ef48448d.png" alt="image-20221105193209910" tabindex="0" loading="lazy"><figcaption>image-20221105193209910</figcaption></figure><h2 id="_8-usequery-hook-参数" tabindex="-1"><a class="header-anchor" href="#_8-usequery-hook-参数" aria-hidden="true">#</a> 8.useQuery Hook 参数</h2><p>查询钩子需要两个参数：<code>(queryArg?, queryOptions?)</code></p><p>参数将被传递到底层回调以生成URL。<code>queryArg</code> <code>query</code></p><p>该对象接受几个可用于控制数据获取行为的附加参数：<code>queryOptions</code></p>`,133),S={href:"https://redux-toolkit.js.org/rtk-query/usage/conditional-fetching",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"false",-1),A={href:"https://redux-toolkit.js.org/rtk-query/usage/polling",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"0",-1),Q={href:"https://redux-toolkit.js.org/rtk-query/usage/queries#selecting-data-from-a-query-result",target:"_blank",rel:"noopener noreferrer"},R={href:"https://redux-toolkit.js.org/rtk-query/api/createApi#refetchonmountorargchange",target:"_blank",rel:"noopener noreferrer"},T=n("code",null,"true",-1),B=n("code",null,"true",-1),I=n("code",null,"number",-1),P=n("code",null,"false",-1),K={href:"https://redux-toolkit.js.org/rtk-query/api/createApi#refetchonfocus",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"false",-1),M={href:"https://redux-toolkit.js.org/rtk-query/api/createApi#refetchonreconnect",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"false",-1),E=e(`<h3 id="_8-1-条件提取" tabindex="-1"><a class="header-anchor" href="#_8-1-条件提取" aria-hidden="true">#</a> 8.1 条件提取</h3><p>默认为<code>false</code>。一旦挂载组件，查询钩子就会自动开始获取数据。但是，在某些用例中，您可能希望延迟获取数据，直到某些条件变为真。RTK 查询支持条件提取以启用该行为。</p><p>如果要阻止查询自动运行，可以在钩子中使用参数<code>skip</code></p><p>跳过示例</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">Pokemon</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> skip <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> status <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetPokemonByNameQuery</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    skip<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token plain-text"> - </span><span class="token punctuation">{</span>status<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果查询缓存了数据： <ul><li>缓存的数据<strong>将不会在</strong>初始加载时使用，并且将忽略来自任何相同查询的更新，直到删除条件<code>skip</code></li><li>查询的状态为<code>uninitialized</code></li><li>初始加载后设置的 ifis，将使用缓存结果<code>skip: false</code></li></ul></li><li>如果查询没有缓存数据： <ul><li>查询的状态为<code>uninitialized</code></li><li>使用开发工具查看查询时，查询将不存在于该状态</li><li>查询不会在装载时自动获取</li><li>当添加具有相同查询的其他组件时，查询不会自动运行</li></ul></li></ul><p>这里我想演示的例子是如果我们给钩子函数传递的参数是一个<code>undefined</code>，这个时候发起请求是会报错的，我们可以使用<code>skip</code>来来跳过这次无法进行的请求。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>useGetStudentByIdQuery<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./store/features/api/sudentApiSlice&quot;</span>

<span class="token keyword">const</span> <span class="token function-variable function">StudentForm</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 调用钩子来加载数据</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span>stuData<span class="token punctuation">,</span> isSuccess<span class="token punctuation">,</span> isFetching<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetStudentByIdQuery</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>stuId<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">skip</span><span class="token operator">:</span><span class="token operator">!</span>props<span class="token punctuation">.</span>stuId
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> StudentForm<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里如果父组件传过来的<code>stuId</code>是个<code>undefined</code>,那么这次就不会发起请求了。</p><h3 id="_8-2-轮询" tabindex="-1"><a class="header-anchor" href="#_8-2-轮询" aria-hidden="true">#</a> 8.2 轮询</h3><p>默认值为<code>0</code>。轮询使您能够通过使查询按指定的时间间隔运行来产生“实时”效果。若要为查询启用轮询，请以毫秒为单位的间隔将值传递给钩子</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useGetPokemonByNameQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./services/pokemon&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Pokemon</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> string <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 每过3s会自动调用一次这个钩子函数</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> status<span class="token punctuation">,</span> error<span class="token punctuation">,</span> refetch <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetPokemonByNameQuery</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">pollingInterval</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-从查询结果中选择数据" tabindex="-1"><a class="header-anchor" href="#_8-3-从查询结果中选择数据" aria-hidden="true">#</a> 8.3 从查询结果中选择数据</h3><p><code>selectFromResult</code>允许您以高性能方式从查询结果中获取特定段。使用此功能时，除非所选项的基础数据已更改，否则组件不会重新呈现。如果所选项是较大集合中的一个元素，它将忽略对同一集合中元素的更改。</p><p><code>AllStudent.jsx</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useGetStudentsQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/features/api/sudentApiSlice&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> studentsRes<span class="token punctuation">,</span>
    isLoading<span class="token punctuation">,</span>
    isSuccess<span class="token punctuation">,</span>
    isError<span class="token punctuation">,</span>
    error<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetStudentsQuery</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">selectFromResult</span><span class="token operator">:</span> <span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
      <span class="token keyword">return</span> result
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">let</span> content
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> <span class="token string">&#39;正在加载中&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> studentsRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">stu</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>_id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"> ---
        </span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token plain-text"> ---
        </span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先看这个<code>selectFromResult</code>方法的参数是什么</p><figure><img src="https://i0.hdslb.com/bfs/album/0b94738405c63d074254fc70485f6449e4f9f222.png" alt="image-20221105195834361" tabindex="0" loading="lazy"><figcaption>image-20221105195834361</figcaption></figure><p>这里我们可以对学生数据进行过滤</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">selectFromResult</span><span class="token operator">:</span> <span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> result<span class="token punctuation">.</span>data
  <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>res<span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">stu</span> <span class="token operator">=&gt;</span> stu<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/1dd255644e0bc2800e6fd13a4a5440fe5818dc38.png" alt="image-20221105201840326" tabindex="0" loading="lazy"><figcaption>image-20221105201840326</figcaption></figure><h3 id="_8-4-refetchonmountorargchange" tabindex="-1"><a class="header-anchor" href="#_8-4-refetchonmountorargchange" aria-hidden="true">#</a> 8.4 refetchOnMountOrArgChange</h3><p>默认为<code>false</code>。此设置允许您控制缓存结果是否已经可用 RTK 查询将仅提供缓存的结果，或者是否应该设置为 或 自上次成功查询结果以来已经过去了足够的时间。</p><ul><li><code>false</code>- 除非查询尚不存在*，否则*不会导致执行查询。</li><li><code>true</code>- 在添加查询的新订阅者时，将始终重新获取。行为与调用回调或传入操作创建者相同。</li><li><code>number</code> - <strong>值以秒为单位</strong>。如果提供了一个数字，并且缓存中存在现有查询，它将比较当前时间与上次实现的时间戳，并且仅在经过足够时间时才重新获取。</li></ul><p>如果同时指定此选项<code>skip: true</code>，则在 false 之前<strong>不会对其进行计算</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> studentsRes<span class="token punctuation">,</span>
    isLoading<span class="token punctuation">,</span>
    isSuccess<span class="token punctuation">,</span>
    isError<span class="token punctuation">,</span>
    error<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetStudentsQuery</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	 <span class="token literal-property property">refetchOnMountOrArgChange</span><span class="token operator">:</span><span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),N=n("p",null,"注意",-1),O={href:"https://redux-toolkit.js.org/rtk-query/api/createApi#refetchonmountorargchange",target:"_blank",rel:"noopener noreferrer"},U=n("code",null,"createApi",-1),D=n("code",null,"refetchOnMountOrArgChange",-1),F={href:"https://redux-toolkit.js.org/rtk-query/api/created-api/endpoints#initiate",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"启动",-1),C=n("code",null,"createApi",-1),X=n("h3",{id:"_8-5-refetchonfocus",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-5-refetchonfocus","aria-hidden":"true"},"#"),s(" 8.5 refetchOnFocus")],-1),H=n("p",null,[s("默认值为"),n("code",null,"false"),s("。此设置允许您控制 RTK 查询是否在应用程序窗口重新获得焦点后尝试重新获取所有订阅的查询。")],-1),V=n("p",null,[s("如果同时指定此选项"),n("code",null,"skip: true"),s("，则在 false 之前"),n("strong",null,"不会对其进行计算"),s("。")],-1),W={href:"https://redux-toolkit.js.org/rtk-query/api/setupListeners",target:"_blank",rel:"noopener noreferrer"},$=n("code",null,"安装程序侦听器",-1),J=n("p",null,"注意",-1),Y={href:"https://redux-toolkit.js.org/rtk-query/api/createApi#refetchonfocus",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"createApi",-1),nn=n("code",null,"refetchOnFocus",-1),sn={href:"https://redux-toolkit.js.org/rtk-query/api/created-api/endpoints#initiate",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"启动",-1),tn=n("p",null,"如果您指定手动分派查询的时间，RTK 查询将无法自动为您重新获取。",-1),en=e(`<p>想使用还得为<code>store</code>添加一个配置才行</p><p><code>store/index.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupListeners <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit/query&#39;</span>

<span class="token comment">// configureStore创建一个redux数据</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
 <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
    
<span class="token comment">// 设置以后，将会支持 refetchOnFocus refetchOnReconnect</span>
<span class="token function">setupListeners</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span> 

<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们看下效果</p><figure><img src="https://i0.hdslb.com/bfs/album/b1516ee2e8d603cde783a51a7b1438bdf6735714.png" alt="image-20221105203424540" tabindex="0" loading="lazy"><figcaption>image-20221105203424540</figcaption></figure><p>从<code>devtool</code>回来点一下网页会重新发一次请求，然后从别的网站点回来也会重新发起请求。</p><h3 id="_8-6-refetchonreconnect" tabindex="-1"><a class="header-anchor" href="#_8-6-refetchonreconnect" aria-hidden="true">#</a> 8.6 refetchOnReconnect</h3><p>默认值为<code>false</code>，此设置允许您控制 RTK 查询在重新获得网络连接后是否尝试重新获取所有订阅的查询。</p><p>如果同时指定此选项<code>skip: true</code>，则在 false 之前<strong>不会对其进行计算</strong>。</p>`,9),pn={href:"https://redux-toolkit.js.org/rtk-query/api/setupListeners",target:"_blank",rel:"noopener noreferrer"},on=n("code",null,"安装程序侦听器",-1),cn=n("p",null,"注意",-1),ln=n("code",null,"createApi",-1),un=n("code",null,"refetchOnReconnect",-1),rn={href:"https://redux-toolkit.js.org/rtk-query/api/created-api/endpoints#initiate",target:"_blank",rel:"noopener noreferrer"},dn=n("code",null,"启动",-1),kn=n("p",null,[s("如果您指定手动分派查询的时间，RTK 查询将无法自动为您重新获取。"),n("code",null,"track: false")],-1),vn=e(`<h2 id="_9-刷新缓存数据" tabindex="-1"><a class="header-anchor" href="#_9-刷新缓存数据" aria-hidden="true">#</a> 9.刷新缓存数据</h2><p>当我们点击<code>添加学生</code>时，我们可以在浏览器 DevTools 中查看 Network 选项卡，确认 HTTP <code>POST</code> 请求成功。 但是，如果我们回到<code>所有学生组件</code>，新的学生信息并不会被展示出来。我们在内存中仍然有相同的缓存数据。</p><p>我们需要告诉 RTK Query 刷新其缓存的学生列表，以便我们可以看到我们刚刚添加的新学生信息。</p><h3 id="_9-1-手动刷新" tabindex="-1"><a class="header-anchor" href="#_9-1-手动刷新" aria-hidden="true">#</a> 9.1 手动刷新</h3><p>第一个选项是手动强制 RTK Query 重新获取给定请求接口的数据。Query hooks 结果对象包含一个 “refetch” 函数，我们可以调用它来强制重新获取。 我们可以暂时将“重新获取学生列表”按钮添加到<code>&lt;AllStudent&gt;</code>，并在添加新学生后单击该按钮。</p><p><code>AllStudent.jsx</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> useGetStudentsQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/features/api/sudentApiSlice&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> studentsRes<span class="token punctuation">,</span>
    isLoading<span class="token punctuation">,</span>
    isSuccess<span class="token punctuation">,</span>
    isError<span class="token punctuation">,</span>
    error<span class="token punctuation">,</span>
    refetch<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetStudentsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">let</span> content
  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> <span class="token string">&#39;正在加载中&#39;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> studentsRes<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">stu</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>_id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"> ---
        </span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token plain-text"> ---
        </span><span class="token punctuation">{</span>stu<span class="token punctuation">.</span>sex<span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    content <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>refetch<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">重新获取学生列表</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先先从首页添加一个学生数据,然后回到<code>所有学生组件</code></p><figure><img src="https://i0.hdslb.com/bfs/album/60d83adac6a06c893f4642031d0af0256e755a2b.png" alt="image-20221106161045089" tabindex="0" loading="lazy"><figcaption>image-20221106161045089</figcaption></figure><p>这个时候由于有缓存，用的还是之前的数据，我们使用<code>reFetch</code>方法来强制刷新数据</p><figure><img src="https://i0.hdslb.com/bfs/album/867b54faf816fb065d0b2a6393652e9f5c49952f.png" alt="image-20221106161736244" tabindex="0" loading="lazy"><figcaption>image-20221106161736244</figcaption></figure><h3 id="_9-2-缓存失效自动刷新-数据标签" tabindex="-1"><a class="header-anchor" href="#_9-2-缓存失效自动刷新-数据标签" aria-hidden="true">#</a> 9.2 缓存失效自动刷新-数据标签</h3><p>有时需要让用户手动单击以重新获取数据，但对于正常使用而言绝对不是一个好的解决方案。</p><p>我们知道我们的服务器拥有所有帖子的完整列表，包括我们刚刚添加的帖子。 理想情况下，我们希望我们的应用程序在 Mutation 请求完成后自动重新获取更新的帖子列表。 这样我们就知道我们的客户端缓存数据与服务器所拥有的数据是同步的。</p><p><strong>RTK Query 让我们定义查询和 mutations 之间的关系，以启用自动数据重新获取，使用标签</strong>。标签是一个字符串或小对象，可让你命名某些类型的数据和缓存的 <em>无效</em> 部分。当缓存标签失效时，RTK Query 将自动重新获取标记有该标签的请求接口。</p><p>基本标签使用需要向我们的 API slice 添加三条信息：</p><ul><li>API slice 对象中的根 <code>tagTypes</code> 字段，声明数据类型的字符串标签名称数组，例如 <code>&#39;student&#39;</code></li><li>查询请求接口中的 “providesTags” 数组，列出了一组描述该查询中数据的标签</li><li>Mutation 请求接口中的“invalidatesTags”数组，列出了每次 Mutation 运行时失效的一组标签</li></ul><p>我们可以在 API slice 中添加一个名为 <code>&#39;student&#39;</code> 的标签，让我们在添加新帖子时自动重新获取 <code>getStudents</code> 请求接口：</p><p><code>features/api/sudentApiSlice.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApi<span class="token punctuation">,</span> fetchBaseQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@reduxjs/toolkit/dist/query/react&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> sudentApiSlice <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">reducerPath</span><span class="token operator">:</span> <span class="token string">&#39;studentApi&#39;</span><span class="token punctuation">,</span> 
  <span class="token literal-property property">baseQuery</span><span class="token operator">:</span> <span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> <span class="token string">&#39;/api&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">tagTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;student&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token parameter">builder</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">getStudents</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;/all/student&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">providesTags</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;student&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;LIST&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">addNewStudent</span><span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">mutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token parameter">student</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;/student&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">// 将整个post对象作为请求的主体</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> student<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token literal-property property">invalidatesTags</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;student&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;LIST&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> useGetStudentsQuery<span class="token punctuation">,</span>useAddNewStudentMutation <span class="token punctuation">}</span> <span class="token operator">=</span> sudentApiSlice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是我们所需要的！ 现在，如果我们单击<code>添加学生</code>，然后回到<code>AllStudent</code>组件重新发起请求，渲染新的数据</p><p>请注意，这里的文字字符串 <code>&#39;student&#39;</code> 没有什么特别之处。 我们可以称它为“Fred”、“qwerty”或其他任何名称。 它只需要在每个字段中使用相同的字符串，以便 RTK Query 知道“当发生这种 Mutation 时，使列出相同标签字符串的所有请求接口无效”。</p><h2 id="_10-rtkq-结合-axios" tabindex="-1"><a class="header-anchor" href="#_10-rtkq-结合-axios" aria-hidden="true">#</a> 10.RTKQ 结合 Axios</h2><p>先来看看一个简单的案例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom/client&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-redux&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createApi<span class="token punctuation">,</span> fetchBaseQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit/dist/query/react&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit&quot;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> setupListeners <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@reduxjs/toolkit/dist/query&quot;</span>

<span class="token keyword">const</span> productApi <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">reducerPath</span><span class="token operator">:</span> <span class="token string">&quot;productApi&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">baseQuery</span><span class="token operator">:</span> <span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">baseUrl</span><span class="token operator">:</span>
            <span class="token string">&quot;https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">endpoints</span><span class="token punctuation">(</span><span class="token parameter">build</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">getProducts</span><span class="token operator">:</span> build<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token punctuation">{</span>
                        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;/products.json&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> useGetProductsQuery <span class="token punctuation">}</span> <span class="token operator">=</span> productApi

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">reducer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span>productApi<span class="token punctuation">.</span>reducerPath<span class="token punctuation">]</span><span class="token operator">:</span> productApi<span class="token punctuation">.</span>reducer<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function-variable function">middleware</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">getDefaultMiddleware</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token function">getDefaultMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>productApi<span class="token punctuation">.</span>middleware<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">setupListeners</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isSuccess <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetProductsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
            App
            <span class="token operator">&lt;</span>hr <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token punctuation">{</span>isSuccess <span class="token operator">&amp;&amp;</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中<code>productApi</code>用来调用product数据，定义api时的baseQuery属性用来指定我们要使用的发送请求的工具，其中的fetchBaseQuery是RTKQ中为我们提供的工具，它对Fetch进行了包装，设置后RTKQ中将会使用Fetch做为发送请求的工具。</p><h3 id="_10-1-basequery" tabindex="-1"><a class="header-anchor" href="#_10-1-basequery" aria-hidden="true">#</a> 10.1 BaseQuery</h3><p>要设置通过Axios发送请求，关键就在于BaseQuery。只需要使用Axios的BaseQuery替换掉fetchBaseQuery即可。但是可惜的是RTKQ中并没有为我们提供Axios的BaseQuery，所以我们需要自定义一个BaseQuery才能达到目的。</p><p>BaseQuery本身就是一个函数，定义BaseQuery直接定义一个函数即可，可以通过函数的参数来指定查询中要使用的默认参数，比如baseUrl，参数可以根据自己的实际需要指定：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myBaseQuery <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>baseUrl<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">baseUrl</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BaseQuery需要一个函数作为返回值，这个函数将会成为最终的发送请求的工具，且函数的返回值将会作为执行结果返回。我们可以将发送请求的逻辑编写到函数中，并且根据不同的情况设置返回值。</p><p>先看看返回值的格式，返回值的格式有两种，一种是请求成功返回的数据，一种是请求失败返回的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> YourData <span class="token punctuation">}</span> <span class="token comment">// 请求成功返回的数据</span>
<span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> YourError <span class="token punctuation">}</span> <span class="token comment">// 请求失败返回的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先尝试定义一个简单的BaseQuery：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">myBaseQuery</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">error</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&quot;出错了&quot;</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个BaseQuery不会真的去加载数据，而是根据随机数返回不同的数据。随机数大于0.5时会返回成功的数据，否则返回错误的数据。接下来修改Api的代码，将fetchBaseQuery修改为，myBaseQuery：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> productApi <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">reducerPath</span><span class="token operator">:</span> <span class="token string">&quot;productApi&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">baseQuery</span><span class="token operator">:</span> <span class="token function">myBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">endpoints</span><span class="token punctuation">(</span><span class="token parameter">build</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">getProducts</span><span class="token operator">:</span> build<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token punctuation">{</span>
                        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;/products.json&quot;</span><span class="token punctuation">,</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-2-axiosbasequery" tabindex="-1"><a class="header-anchor" href="#_10-2-axiosbasequery" aria-hidden="true">#</a> 10.2 AxiosBaseQuery</h3><p>如果你能理解myBaseQuery，下边我们尝试编写一个axiosBaseQuery：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> axiosBaseQuery <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>baseUrl<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">baseUrl</span><span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> data<span class="token punctuation">,</span> params<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">url</span><span class="token operator">:</span> baseUrl <span class="token operator">+</span> url<span class="token punctuation">,</span>
            method<span class="token punctuation">,</span>
            data<span class="token punctuation">,</span>
            params
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接使用axiosBaseQuery替换掉之前的BaseQuery，即可在RTKQ中使用Axios来发送请求了，同时我们也可以根据需要在BaseQuery中对axios做一些更详细的配置。</p><h2 id="_11-小总结" tabindex="-1"><a class="header-anchor" href="#_11-小总结" aria-hidden="true">#</a> 11.小总结</h2><ul><li>RTK Query 是 Redux Toolkit 中包含的数据获取和缓存解决方案 <ul><li>RTK Query 为你抽象了管理缓存服务器数据的过程，无需编写加载状态、存储结果和发出请求的逻辑</li><li>RTK Query 建立在 Redux 中使用的相同模式之上，例如异步 thunk</li></ul></li><li>RTK Query 对每个应用程序使用单个 “API slice”，使用 <code>createApi</code> 定义 <ul><li>RTK Query 提供与 UI 无关和特定于 React 的 <code>createApi</code> 版本</li><li>API slice 为不同的服务器操作定义了多个“请求接口”</li><li>如果使用 React 集成，API slice 包括自动生成的 React hooks</li></ul></li><li>查询请求接口允许从服务器获取和缓存数据 <ul><li>Query Hooks 返回一个 “data” 值，以及加载状态标志</li><li>查询可以手动重新获取，或者使用标签自动重新获取缓存失效</li></ul></li><li>Mutation 请求接口允许更新服务器上的数据 <ul><li>Mutation hooks 返回一个发送更新请求的“触发”函数，以及加载状态</li><li>触发函数返回一个可以解包并等待的 Promise</li></ul></li></ul>`,43);function mn(bn,gn){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[s("1、使用"),r,s("的取消发起请求，"),n("a",d,[s("参考文档"),t(a)])]),k,n("li",null,[s("3、在"),v,s("中可以借用类似"),n("a",m,[s("react-query"),t(a)]),s("工具对请求包装一层")]),b]),g,y,n("p",null,[f,s("是"),n("a",h,[x,t(a)]),s("里面的一个分之，专门用来优化前端接口请求，目前也只支持在"),w,s("中使用。")]),_,n("ul",null,[n("li",null,[n("a",S,[s("skip"),t(a)]),s(" - 允许查询“跳过”为该渲染运行。默认为"),j]),n("li",null,[n("a",A,[s("pollingInterval"),t(a)]),s(" - 允许查询按提供的时间间隔（以毫秒为单位指定）自动重新获取。默认为*（关闭）*"),q]),n("li",null,[n("a",Q,[s("selectFromResult"),t(a)]),s(" - 允许更改钩子的返回值以获取结果的子集，针对返回的子集进行渲染优化。")]),n("li",null,[n("a",R,[s("refetchOnMountOrArgChange"),t(a)]),s(" - 允许强制查询始终在挂载时重新取回迁（何时提供）。允许在自上次查询同一缓存（当设置为"),T,s("）以来已经过去了足够的时间（以秒为单位）时强制查询重新获取。默认为"),B,s(),I,s(),P]),n("li",null,[n("a",K,[s("refetchOnFocus"),t(a)]),s(" - 允许在浏览器窗口重新获得焦点时强制查询重新获取。默认为"),G]),n("li",null,[n("a",M,[s("refetchOnReconnect"),t(a)]),s(" - 允许在重新获得网络连接时强制查询重新获取。默认为"),L])]),E,n("blockquote",null,[N,n("p",null,[n("a",O,[s("fetchBaseQuery |Redux Toolkit (redux-toolkit.js.org)"),t(a)])]),n("p",null,[s("您可以在"),U,s("中全局设置此项"),D,s("，但您也可以覆盖默认值，并通过传递给每个单独的钩子调用或类似地通过 passingwhen 调度"),n("a",F,[z,t(a)]),s("操作来获得更精细的控制。"),C])]),X,H,V,n("p",null,[s("注意：要求已调用"),n("a",W,[$,t(a)]),s("。")]),n("blockquote",null,[J,n("p",null,[n("a",Y,[s("fetchBaseQuery |Redux Toolkit (redux-toolkit.js.org)"),t(a)])]),n("p",null,[s("您可以在"),Z,s("中全局设置中此项"),nn,s("，但也可以覆盖默认值，并通过传递给每个单独的钩子调用或在调度"),n("a",sn,[an,t(a)]),s("操作时进行更精细的控制。")]),tn]),en,n("p",null,[s("注意：要求已调用"),n("a",pn,[on,t(a)]),s("。")]),n("blockquote",null,[cn,n("p",null,[s("您可以在"),ln,s("中全局设置此项"),un,s("，但也可以覆盖默认值，并通过传递给每个单独的钩子调用或在调度"),n("a",rn,[dn,t(a)]),s("操作时进行更精细的控制。")]),kn]),vn])}const fn=p(l,[["render",mn],["__file","19.html.vue"]]);export{fn as default};
