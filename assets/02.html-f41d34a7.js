import{ab as c,G as o,H as n,E as a,S as e,N as t,ac as d,W as s}from"./framework-09305b5d.js";const g={},r=d('<h1 id="_02-【本地库操作】" tabindex="-1"><a class="header-anchor" href="#_02-【本地库操作】" aria-hidden="true">#</a> 02 【本地库操作】</h1><h2 id="_1-git的结构" tabindex="-1"><a class="header-anchor" href="#_1-git的结构" aria-hidden="true">#</a> 1.git的结构</h2><figure><img src="https://i0.hdslb.com/bfs/album/b0d661e04d3d9d717e9219742e17879cbf2eed01.png" alt="image-20221006131836575" tabindex="0" loading="lazy"><figcaption>image-20221006131836575</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/fb14c4af9eea2c44ce536bd4fb1331512d3c7b94.png" alt="image-20220827212525927" tabindex="0" loading="lazy"><figcaption>image-20220827212525927</figcaption></figure><h2 id="_2-git-远程库——代码托管中心" tabindex="-1"><a class="header-anchor" href="#_2-git-远程库——代码托管中心" aria-hidden="true">#</a> 2.Git 远程库——代码托管中心</h2><h3 id="_2-1-git工作流程" tabindex="-1"><a class="header-anchor" href="#_2-1-git工作流程" aria-hidden="true">#</a> 2.1 git工作流程</h3>',6),l={href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://gitee.com/",target:"_blank",rel:"noopener noreferrer"},f=d(`<p>一般工作流程如下：</p><p>1．从远程仓库中克隆 Git 资源作为本地仓库。</p><p>2．从本地仓库中checkout代码然后进行代码修改</p><p>3．在提交前先将代码提交到暂存区。</p><p>4．提交修改。提交到本地仓库。本地仓库中保存修改的各个历史版本。</p><p>5．在修改完成后，需要和团队成员共享代码时，可以将代码push到远程仓库。</p><p><strong>团队内部协作</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/bfa882dbf07515af78a194948502622a66c881b0.png" alt="image-20220827212710234" tabindex="0" loading="lazy"><figcaption>image-20220827212710234</figcaption></figure><p><strong>跨团队协作</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/10e1cab26b1a38ae304d5633de1473c1faf61782.png" alt="image-20220827212722660" tabindex="0" loading="lazy"><figcaption>image-20220827212722660</figcaption></figure><h3 id="_2-2-github-开源社区" tabindex="-1"><a class="header-anchor" href="#_2-2-github-开源社区" aria-hidden="true">#</a> 2.2 Github:开源社区</h3><p><strong>Github线上仓库结构介绍</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/5fc22b9d97197b34014f2804f124aeb37e742d00.png" alt="image-20221006132339079" tabindex="0" loading="lazy"><figcaption>image-20221006132339079</figcaption></figure><p><strong>Github Issues</strong></p><p><mark>作用</mark>：发现代码BUG，但是目前没有成型代码，需要讨论时用；或者使用开源项目出现问题时使用</p><p><strong>fork与git clone的区别</strong></p><p>1.区别</p><p>git clone 是在自己电脑直接敲命令，结果是将github仓库中的项目克隆到自己本地电脑中了(就是下载过来)</p><p>fork是直接访问github网站，在项目页面中点击fork，然后自己github项目中就会多出一个复制的项目</p><p>2.用法</p><p>如果我们想要修改他人github项目的话，我们直接git clone代码到本地是不能push的，所以我们使用fork，先把代码复制到自己的github仓库，然后git clone到本地修改，然后在提交push（这里的push是push到自己github仓库了，我们自己的github仓库中的代码是fork源的一个分支），这时候我们想要把修改的代码提交给他人的话，就可以在自己github上pull requests，等其他人看到后就可以把代码做一个合并</p><h2 id="_3-初始化配置" tabindex="-1"><a class="header-anchor" href="#_3-初始化配置" aria-hidden="true">#</a> 3.初始化配置</h2><p>以本地计算机的<code>G:\\Desktop\\git</code>的工作目录，在其中新建一个项目文件夹<code>git_demo</code>后打开。</p><p>执行<code>git init</code>对git存储库初始化</p><img src="https://i0.hdslb.com/bfs/album/e77254ad789b3b7f60e33113ffd5d2726d90ca0d.png" style="zoom:150%;"><p>查看<code>.git</code>文件夹中的信息</p><figure><img src="https://i0.hdslb.com/bfs/album/8245a4b176c0f05db878e807145b1a1c6f9b50d8.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>文件<code>./.git/config</code>用于记录该本地库的配置信息。</p><p><strong>注意：.git 目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡 乱修改。</strong></p><h3 id="_3-1-设置签名" tabindex="-1"><a class="header-anchor" href="#_3-1-设置签名" aria-hidden="true">#</a> 3.1 设置签名</h3><p>签名由<code>user. name </code>(用户名)和<code>user. email </code>(Email地址)组成，用于对不同开发者的身份作区分，包括项目/仓库级别、系统用户级别。</p><blockquote><p>这里设置的签名和登录远程库(代码托管中心)的账号、密码没有任何关系。 项目/仓库级别与系统用户级别必须有一个设置生效。</p></blockquote><h4 id="_3-1-1-项目-仓库级别" tabindex="-1"><a class="header-anchor" href="#_3-1-1-项目-仓库级别" aria-hidden="true">#</a> 3.1.1 项目/仓库级别</h4><blockquote><p>具有更高的优先级签名; 各个本地库的签名信息相互独立，互不干扰。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>git config user<span class="token punctuation">.</span>name <span class="token string">&quot;dselegent&quot;</span>
git config user<span class="token punctuation">.</span>email dselegent@qq<span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://i0.hdslb.com/bfs/album/1e207943b8849515d2c06d00d7fe9c43e8396ab1.png" style="zoom:80%;"><p>配置文件的修改保存在：<code>&lt;Project&gt;/.git/config</code>文件中。</p><figure><img src="https://i0.hdslb.com/bfs/album/ed0d9367bb4a6200bfeed0163a7d7cfbd86c16cc.png" alt="image-20220827214121295" tabindex="0" loading="lazy"><figcaption>image-20220827214121295</figcaption></figure><h4 id="_3-1-2-系统用户级别" tabindex="-1"><a class="header-anchor" href="#_3-1-2-系统用户级别" aria-hidden="true">#</a> 3.1.2 系统用户级别</h4><blockquote><p>若未设置项目/仓库级别的签名时，使用用户级别的签名。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>name <span class="token string">&quot;dselegent&quot;</span>
git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>email dselegent@qq<span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件的修改保存在：<code>~/.gitconfig</code>文件中。</p><figure><img src="https://i0.hdslb.com/bfs/album/b64cb3f5ea53fff050955d5dc76d4c19caa31b64.png" alt="image-20220827214440210" tabindex="0" loading="lazy"><figcaption>image-20220827214440210</figcaption></figure><p><strong>级别优先级</strong></p><ul><li>就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别 的签名</li><li>如果只有系统用户级别的签名，就以系统用户级别的签名为准</li><li>二者都没有不允许</li></ul><h3 id="_3-2-配置编辑器" tabindex="-1"><a class="header-anchor" href="#_3-2-配置编辑器" aria-hidden="true">#</a> 3.2 配置编辑器</h3><p>使用命令<code>git config [--global | --system] core.editor [...]</code>为 Git 的配置编辑器。</p><h3 id="_3-3-配置信息" tabindex="-1"><a class="header-anchor" href="#_3-3-配置信息" aria-hidden="true">#</a> 3.3 配置信息</h3><p>使用命令<code>git config --list</code>查看 Git 的配置信息。</p><figure><img src="https://i0.hdslb.com/bfs/album/d4e6351be48b7655489a4cf869a6919582c4f268.png" alt="image-20220827214826684" tabindex="0" loading="lazy"><figcaption>image-20220827214826684</figcaption></figure><h2 id="_4-版本控制" tabindex="-1"><a class="header-anchor" href="#_4-版本控制" aria-hidden="true">#</a> 4.版本控制</h2><h3 id="_4-1-在项目中新建文件" tabindex="-1"><a class="header-anchor" href="#_4-1-在项目中新建文件" aria-hidden="true">#</a> 4.1 在项目中新建文件</h3><p>在<code>G:\\Desktop\\git</code>中新建文件<code>test1.txt</code>后打开。</p><figure><img src="https://i0.hdslb.com/bfs/album/96962acef849ee00237af6928485396b17ed0cbd.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>hello git!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-1-1-查看状态" tabindex="-1"><a class="header-anchor" href="#_4-1-1-查看状态" aria-hidden="true">#</a> 4.1.1 查看状态</h4><p>使用<code>git status</code>查看工作区、暂存区状态</p><figure><img src="https://i0.hdslb.com/bfs/album/6c54b5c942ac767cc8f4470037111837ff8b23fd.png" alt="image-20211126104411928" tabindex="0" loading="lazy"><figcaption>image-20211126104411928</figcaption></figure><blockquote><p>对于master分支，本地库暂未有任何被提交的内容、暂存区亦未有任何可提交的内容(可用<code>git add</code>命令追踪新建的文件)， 存在未追踪的文件<code>test1.txt</code> (可用<code>git add &lt;file&gt;...</code> 命令将文件载入暂存 区以待提交)。</p></blockquote><h4 id="_4-1-2-添加到暂存区" tabindex="-1"><a class="header-anchor" href="#_4-1-2-添加到暂存区" aria-hidden="true">#</a> 4.1.2 添加到暂存区</h4><p>用<code>git add test1</code>命令将文件<code>test1.txt</code>添加到暂存区。</p><blockquote><p>警告：此时根据转换文本文件行尾换行的配置，默认按照Windows风格检出后用Unix的风格替换提交(将LF转换为CRLF) ，本地工作目录不受这一替换的影响。</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/0662f02b8211d46de3313bd25acf9aec423f86cf.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对于<code>master</code>分支，本地库暂未有任何被提交的内容、暂存区有以下新文件的改变可被提交:<code>test1.txt</code> (可用<code>git rm --cached &lt;fi1e&gt;... </code>命令将文件撤出暂存区)。</p><blockquote><p>从暂存区撤出文件的命令不会影响工作区的文件。</p></blockquote><blockquote><p><code>touch 文件名</code> 创建文件</p><p><code>git add 文件名</code> 将文件添加到暂存区</p><p><code>git add 文件名1 文件名2 文件名3</code> 将多个文件添加到暂存区</p><p><code>git add .</code> 添加当前目录下的文件到缓存区，注意有空格在.前面</p></blockquote><h4 id="_4-1-3-提交到本地库" tabindex="-1"><a class="header-anchor" href="#_4-1-3-提交到本地库" aria-hidden="true">#</a> 4.1.3 提交到本地库</h4><p>用<code>git commit test1 -m &#39;first commit&#39;</code>命令将文件<code>test1.txt</code>提交到本地库。</p><figure><img src="https://i0.hdslb.com/bfs/album/2545fcba879b8eea1c5eccdef3fc49dc3dc3c080.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>在<code>master</code>分支上创建了一个根提交(ID号:<code>da56888</code>) 。注释内容为: <code>first commit</code> 。这次提交修改/新建了1个文件,插入了1行内容。</p></blockquote><blockquote><p>对于<code>master</code>分支，暂存区暂未有任何可提交的内容，工作目录的文件系统树完全一致。</p></blockquote><h3 id="_4-2-修改文件内容" tabindex="-1"><a class="header-anchor" href="#_4-2-修改文件内容" aria-hidden="true">#</a> 4.2 修改文件内容</h3><p>对文件<code>test.txt</code>做出 1 处修改后保存：</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>hello git!
second
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-1-查看状态" tabindex="-1"><a class="header-anchor" href="#_4-2-1-查看状态" aria-hidden="true">#</a> 4.2.1 查看状态</h4><img src="https://i0.hdslb.com/bfs/album/41aa946c85d59ee6735a3518c100b2df59b80ce4.png" style="zoom:150%;"><blockquote><p>对于<code>master</code>分支，存在未暂存的修改: test1.txt (可用<code>git add &lt;file&gt;... </code>命令将文件更新到 暂存区以待提交或用<code>git restore &lt;file&gt;... </code>命令丢弃工作目录的更改)。暂存区没有可提交的修改(可用<code>git add </code>命令将修改添加到暂存区或用<code>git commit -a </code>将修改暂存后立即提交)。</p></blockquote><h4 id="_4-2-2-添加到暂存区" tabindex="-1"><a class="header-anchor" href="#_4-2-2-添加到暂存区" aria-hidden="true">#</a> 4.2.2 添加到暂存区</h4><figure><img src="https://i0.hdslb.com/bfs/album/2ff129d5ea300a535274dba0254fc3db3f17bdb3.png" alt="image-20220827215839107" tabindex="0" loading="lazy"><figcaption>image-20220827215839107</figcaption></figure><h4 id="_4-2-3-提交修改到本地库" tabindex="-1"><a class="header-anchor" href="#_4-2-3-提交修改到本地库" aria-hidden="true">#</a> 4.2.3 提交修改到本地库</h4><p>使用<code>git commit text -m &quot;My second commit”</code>命令提交修改到本地库，而不必单独用编辑器注释修改。</p><figure><img src="https://i0.hdslb.com/bfs/album/dd823e6ce7dbd6fa43bbd99ea04237dc4677f379.png" alt="image-20220827220146316" tabindex="0" loading="lazy"><figcaption>image-20220827220146316</figcaption></figure><h3 id="_4-3-查看提交的版本记录" tabindex="-1"><a class="header-anchor" href="#_4-3-查看提交的版本记录" aria-hidden="true">#</a> 4.3 查看提交的版本记录</h3><figure><img src="https://i0.hdslb.com/bfs/album/95c5eefe2bb4f0cc072ab32093828c6fff35d515.png" alt="image-20220827220308190" tabindex="0" loading="lazy"><figcaption>image-20220827220308190</figcaption></figure><p>每一个提交记录(<code>commit</code>)都有一个hash值作为提交记录的键，与提交人、提交时间以及提交注释对应。在当前的版本中，有<code>(HEAD -&gt; master)</code>的标记，即用HEAD指针指向当前版本。</p><blockquote><p>版本间的切换通过移动<code>HEAD</code>指针完成。</p></blockquote><p>若日志信息太多，可用<code>空格键</code>向下翻页、<code>b</code>键向上翻页、<code>q</code>键退出。</p><ul><li><p>可用<code>git 1og --pretty=oneline </code>命令以每个提交历史仅占1行的方式显示日志;</p></li><li><p>可用<code>git 1og --oneline</code>命令显示更简略的日志信息，此时只截取显示40位hash值的前7位;</p></li><li><p>可用<code>git reflog</code> 命令显示带HEAD指针移动次数的简略信息。.</p></li></ul><blockquote><p><code>git reflog</code>命令可显示HEAD指针前后的全部提交日志;其他日志查看命令只显示从当前版本往后的提交日志。</p></blockquote><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>DS@DS MINGW64 /g/Desktop/git/git_demo (master)
<span class="token equation string">$ git log --pretty=oneline
a087691b1b36033551860de2923512caaa593b06 (HEAD -&gt; master) My second commit
da568881807198113fa60debe615bcd0cc7834e1 first commit

DS@DS MINGW64 /g/Desktop/git/git_demo (master)
$</span> git log --oneline
a087691 (HEAD -&gt; master) My second commit
da56888 first commit

DS@DS MINGW64 /g/Desktop/git/git_demo (master)
$ git reflog
a087691 (HEAD -&gt; master) HEAD@<span class="token punctuation">{</span>0<span class="token punctuation">}</span>: commit: My second commit
da56888 HEAD@<span class="token punctuation">{</span>1<span class="token punctuation">}</span>: commit (initial): first commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-版本的切换" tabindex="-1"><a class="header-anchor" href="#_4-4-版本的切换" aria-hidden="true">#</a> 4.4 版本的切换</h3><p>版本前进后退的本质是<code>HEAD</code>指针的位置的移动。</p><h4 id="_4-4-1-版本的直达" tabindex="-1"><a class="header-anchor" href="#_4-4-1-版本的直达" aria-hidden="true">#</a> 4.4.1 版本的直达</h4><p>使用<code>git reset --hard &lt;hash_len_7&gt;</code>命令。</p><figure><img src="https://i0.hdslb.com/bfs/album/3d52eb3a779681f101323d26fcd2aaa34c77a548.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-4-2-版本后退" tabindex="-1"><a class="header-anchor" href="#_4-4-2-版本后退" aria-hidden="true">#</a> 4.4.2 版本后退</h4><p><strong>方法一</strong></p><p>使用<code>git reset --hard HEAD[^...]</code>执行版本的后退（每个^符号后退 1 版，不加^符号则恢复成当前指针所指位置的状态）。</p><p>git reset --hard HEAD^ 表示回退一个版本</p><p>git reset --hard HEAD^^ 表示回退两个版本</p><p>git reset --hard HEAD^^^ 表示回退三个版本</p><p>git reset --hard HEAD^^^^ 表示回退四个版本</p><figure><img src="https://i0.hdslb.com/bfs/album/6a7e8091f0541c24b9639679ae1c0f7bcd441a72.png" alt="image-20220827221518210" tabindex="0" loading="lazy"><figcaption>image-20220827221518210</figcaption></figure><p><strong>方法二</strong></p><p>使用<code>git reset --hard HEAD~[NumberOfSteps]</code>执行版本的前进（~符号后的数字注明了连续后退的步数）。</p><p>git reset --hard~3 表示回退三个版本</p><figure><img src="https://i0.hdslb.com/bfs/album/63224e0c7384acef6ab1fd56744836ae0123c597.png" alt="image-20220827222013161" tabindex="0" loading="lazy"><figcaption>image-20220827222013161</figcaption></figure><blockquote><p>做了第三次提交之后才回退版本</p></blockquote><h4 id="_4-4-3-reset-命令的-3-个参数" tabindex="-1"><a class="header-anchor" href="#_4-4-3-reset-命令的-3-个参数" aria-hidden="true">#</a> 4.4.3 reset 命令的 3 个参数</h4><blockquote><p>使用<code>git help &lt;command&gt;</code>命令用浏览器查看特定命令的本地帮助文件，如<code>git help reset</code>。</p></blockquote><p><strong>--soft</strong> 仅在本地库移动HEAD指针。</p><figure><img src="https://i0.hdslb.com/bfs/album/c8c0905eb69a7a2cf876ac8f981723739d4b0f7f.png" alt="image-20220827222244789" tabindex="0" loading="lazy"><figcaption>image-20220827222244789</figcaption></figure><p><strong>--mixed</strong></p><p>在本地库移动HEAD指针，且重置暂存区。</p><figure><img src="https://i0.hdslb.com/bfs/album/e3c70229bcd02e5f7d2f783eacc3a172696e1f4f.png" alt="image-20220827222307688" tabindex="0" loading="lazy"><figcaption>image-20220827222307688</figcaption></figure><p><strong>--hard</strong></p><p>在本地库移动HEAD指针，且重置暂存区和工作区。</p><figure><img src="https://i0.hdslb.com/bfs/album/e532162d74b2f68dbfdf87f8fe6b115991414838.png" alt="image-20220827222526891" tabindex="0" loading="lazy"><figcaption>image-20220827222526891</figcaption></figure><h3 id="_4-5-文件的删除与找回" tabindex="-1"><a class="header-anchor" href="#_4-5-文件的删除与找回" aria-hidden="true">#</a> 4.5 文件的删除与找回</h3><p>前提：文件存在时的状态提交到了本地库。 核心： 1.文件删除前已提交到本地库：<code>git reset --hard &lt;HistoricalRecords&gt;</code> 2.文件删除前未提交到本地库：<code>git reset --hard HEAD</code>。</p><h4 id="_4-5-1-创建待删除文件" tabindex="-1"><a class="header-anchor" href="#_4-5-1-创建待删除文件" aria-hidden="true">#</a> 4.5.1 创建待删除文件</h4><p>创建<code>test2.txt</code>文件，并写入一行内容：test2。</p><p>添加到暂存区后提交：</p><figure><img src="https://i0.hdslb.com/bfs/album/c4c20285f5a3c736f5e8d31fa28e2a4669a07890.png" alt="image-20220827222902821" tabindex="0" loading="lazy"><figcaption>image-20220827222902821</figcaption></figure><h4 id="_4-5-2-删除文件" tabindex="-1"><a class="header-anchor" href="#_4-5-2-删除文件" aria-hidden="true">#</a> 4.5.2 删除文件</h4><p><strong>删除文件</strong></p><blockquote><p><code>rm -rf 文件名</code> 通知要删除某文件</p><p><code>git rm 文件名</code> 删除缓存区的该文件</p><p><code>git reset .</code> 清空暂存区所有文件</p><p><code>git commit -m&quot;注释&quot;</code> 将仓库文件删除</p></blockquote><p>使用<code>rm test2.txt</code>命令删除test2.txt文件。</p><figure><img src="https://i0.hdslb.com/bfs/album/8717baa6b4f824e16f83de183ba7bb0e908d356f.png" alt="image-20220827223002700" tabindex="0" loading="lazy"><figcaption>image-20220827223002700</figcaption></figure><p><strong>删除后的状态</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/e6cc2d7141dfbd977557ad5d0e3ca28795586edb.png" alt="image-20220827223027325" tabindex="0" loading="lazy"><figcaption>image-20220827223027325</figcaption></figure><p><strong>暂存并提交</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/c0aad27660d3ac67be0c1a8f020338f470785bca.png" alt="image-20220827223136817" tabindex="0" loading="lazy"><figcaption>image-20220827223136817</figcaption></figure><h4 id="_4-5-3-找回文件" tabindex="-1"><a class="header-anchor" href="#_4-5-3-找回文件" aria-hidden="true">#</a> 4.5.3 找回文件</h4><p>将版本回退到删除文件前的那个版本，即可完成对文件的找回。</p><figure><img src="https://i0.hdslb.com/bfs/album/11685b6db36273762429c181bec314dedd34a151.png" alt="image-20220827224402028" tabindex="0" loading="lazy"><figcaption>image-20220827224402028</figcaption></figure><blockquote><p>若文件的删除变化只添加 (add) 到了暂存区而未提交 (commit) 到本地库，则可使用git reset --hard HEAD命令找回文件。</p></blockquote><h3 id="_4-6-文件差异性比较" tabindex="-1"><a class="header-anchor" href="#_4-6-文件差异性比较" aria-hidden="true">#</a> 4.6 文件差异性比较</h3><p>对于test1.txt文件，修改前：</p><figure><img src="https://i0.hdslb.com/bfs/album/e66f4a2f77dee5b06a1832ecb54473e73260e1e3.png" alt="image-20220827224506801" tabindex="0" loading="lazy"><figcaption>image-20220827224506801</figcaption></figure><p>修改后：</p><figure><img src="https://i0.hdslb.com/bfs/album/fd5dd1b65203eba2b78a62b538a423079956ac0f.png" alt="image-20220827224545434" tabindex="0" loading="lazy"><figcaption>image-20220827224545434</figcaption></figure><ul><li><p>使用<code>git diff &lt;filename&gt;</code>命令默认用于当前文件与暂存区对应文件的差异比较：</p></li><li><p>若使用<code>git diff &lt;hash_len_7|HEAD|HEAD^[^...]&gt; &lt;filename&gt;</code>命令，则可用于当前文件与特定历史版本或已暂存前文件的差异比较。</p></li><li><p>使用不带文件名的diff命令则可比较工作区的所有文件。</p></li></ul><figure><img src="https://i0.hdslb.com/bfs/album/98813510aa3bfc769ed60ed368c9639db256152e.png" alt="image-20220827224705855" tabindex="0" loading="lazy"><figcaption>image-20220827224705855</figcaption></figure><h3 id="_4-7-分支管理" tabindex="-1"><a class="header-anchor" href="#_4-7-分支管理" aria-hidden="true">#</a> 4.7 分支管理</h3><p>Git 分支是由指针管理起来的，可以快速创建、切换、合并与删除，适用于大型项目的开发。在分支上开发，调试后合并到主分支的策略使每个人的开发模块式相互独立不影响到其他人。 1.主分支（默认的<code>master</code>分支）只用来发布重大版本更新（各版本可以有不同的标签以便于查找）； 2.日常开发应该在其他分支上完成，如<code>develop</code>； 3.对于新增功能 (<code>feature</code>) 、用于预发布 (<code>release</code>) 、Bug 修复 (<code>bug/hot_fix</code>) 的临时性分支，应在使用完毕后及时删除，以免分支的混乱。 4.多人开发时，可分别创建自己专属的分支，当阶段性工作完成后应该合并到上级分支。</p><figure><img src="https://i0.hdslb.com/bfs/album/444e1721f03964bffbdf2f87ec5c3fffda084858.png" alt="image-20220827224809698" tabindex="0" loading="lazy"><figcaption>image-20220827224809698</figcaption></figure><h4 id="_4-7-1-创建分支" tabindex="-1"><a class="header-anchor" href="#_4-7-1-创建分支" aria-hidden="true">#</a> 4.7.1 创建分支</h4><p>使用<code>git branch &lt;BranchName&gt;</code>命令创建名为<code>&lt;BranchName&gt;</code>的新分支，如<code>git branch hot_fix</code>。</p><h4 id="_4-7-2-查看分支" tabindex="-1"><a class="header-anchor" href="#_4-7-2-查看分支" aria-hidden="true">#</a> 4.7.2 查看分支</h4><p>使用<code>git branch -v</code>命令可查看分支的详细 (verbose) 信息（哈希值和名称）。</p><figure><img src="https://i0.hdslb.com/bfs/album/216f1f7077a17c11064cec3e0e6ef466a441a125.png" alt="image-20220827224931315" tabindex="0" loading="lazy"><figcaption>image-20220827224931315</figcaption></figure><blockquote><p>列出全部分支后，分支名称前以星号*标注的是当前分支。 当前分支已在各命令行的括号()中提及。</p></blockquote><h4 id="_4-7-3-切换分支" tabindex="-1"><a class="header-anchor" href="#_4-7-3-切换分支" aria-hidden="true">#</a> 4.7.3 切换分支</h4><p>使用<code>git checkout &lt;BranchName&gt;</code>切换到指定分支，如<code>git checkout hot_fix</code>。</p><figure><img src="https://i0.hdslb.com/bfs/album/554350d142c24f7cb609d2b48ef57c3f13662740.png" alt="image-20220827225046032" tabindex="0" loading="lazy"><figcaption>image-20220827225046032</figcaption></figure><h4 id="_4-7-4-合并分支" tabindex="-1"><a class="header-anchor" href="#_4-7-4-合并分支" aria-hidden="true">#</a> 4.7.4 合并分支</h4><p>在<code>hot_fix</code>分支中产生修改：</p><figure><img src="https://i0.hdslb.com/bfs/album/4da7a8f0ad63ebae0c3df7e4d7390d0a2f7a13d9.png" alt="image-20220827225236563" tabindex="0" loading="lazy"><figcaption>image-20220827225236563</figcaption></figure><p>使用<code>git checkout master</code>命令切换到接受合并的分支后，在使用<code>git merge &lt;BranchName&gt;</code>命令合并分支：</p><figure><img src="https://i0.hdslb.com/bfs/album/f0e2b9a082601addd6b9eb2f2d39cf420e38a519.png" alt="image-20220827225451370" tabindex="0" loading="lazy"><figcaption>image-20220827225451370</figcaption></figure><h4 id="_4-7-5-分支合并的冲突产生" tabindex="-1"><a class="header-anchor" href="#_4-7-5-分支合并的冲突产生" aria-hidden="true">#</a> 4.7.5 分支合并的冲突产生</h4><p>分支的同一位置同时发生不同的修改时，将在相互合并分支时产生冲突。需要执行手动的冲突解决。 在<code>hot_fix</code>分支上修改，添加到暂存区后提交：</p><figure><img src="https://i0.hdslb.com/bfs/album/21900705d6e30194b859a120d8208df57aee15e7.png" alt="image-20220827225832007" tabindex="0" loading="lazy"><figcaption>image-20220827225832007</figcaption></figure><p>在<code>master</code>分支中的同一位置做出不同的修改，添加到暂存区后提交</p><figure><img src="https://i0.hdslb.com/bfs/album/7dbc3fc81ed8b052a25cf620c3041359d0142433.png" alt="image-20220827230801336" tabindex="0" loading="lazy"><figcaption>image-20220827230801336</figcaption></figure><p>并尝试将<code>hot_fix</code>合并到<code>master</code>：</p><figure><img src="https://i0.hdslb.com/bfs/album/c0e030dfc1f96df2e9d964eead9f839eb40da3a1.png" alt="image-20220827230808987" tabindex="0" loading="lazy"><figcaption>image-20220827230808987</figcaption></figure><blockquote><p>自动合并失败；需要手动修复冲突，然后提交结果。</p></blockquote><h4 id="_4-7-6-分支合并的冲突解决" tabindex="-1"><a class="header-anchor" href="#_4-7-6-分支合并的冲突解决" aria-hidden="true">#</a> 4.7.6 分支合并的冲突解决</h4><figure><img src="https://i0.hdslb.com/bfs/album/73ac28ab2799c927d428284cc86bdeeeb4485680.png" alt="image-20220827230851233" tabindex="0" loading="lazy"><figcaption>image-20220827230851233</figcaption></figure><blockquote><p>不同于 SVN，Git 产生冲突后，不会产生新的额外文件。</p></blockquote><p>对于产生冲突的文件，Git 会在冲突发生出做出特定的标记：</p><figure><img src="https://i0.hdslb.com/bfs/album/8a83d36cf3ee64df942e7cfd1624e774af1f2115.png" alt="image-20220827230923330" tabindex="0" loading="lazy"><figcaption>image-20220827230923330</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hello git<span class="token operator">!</span>
ds
<span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span> HEAD         ---
hot_fix2:master		 --- 这是当前分支的内容
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>				
hot_fix2			---
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> hot_fix		 --- 这是用于合并的内容

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.编辑文件，删除特殊符号，把文件修改到满意为止后保存退出； 2.使用<code>git add &lt;filename&gt;</code>命令将此文件添加暂存区； 3.使用<code>git commit -m &quot;fix merge&quot;</code>命令提交冲突修复（执行冲突修复时不能添加具体的文件名）。</p><figure><img src="https://i0.hdslb.com/bfs/album/d53724f88cac3efb6f669a278540e98fc191df0f.png" alt="image-20220827231307442" tabindex="0" loading="lazy"><figcaption>image-20220827231307442</figcaption></figure><h4 id="_4-7-7-删除分支" tabindex="-1"><a class="header-anchor" href="#_4-7-7-删除分支" aria-hidden="true">#</a> 4.7.7 删除分支</h4><blockquote><p>注意在删除分支时要退出该分支</p></blockquote><p>1 先切换到别的分支: <code>git checkout master</code></p><p>2 删除本地分支： <code>git branch -d hot_fix</code></p><p>3 若是删除不了能够强制删除，<code>git branch -D hot_fix</code></p><p>4 有必要的状况下，删除远程分支：<code>git push origin --delete hot_fix</code></p><figure><img src="https://i0.hdslb.com/bfs/album/64454ac06bf17bfec81ebdcbe597e4906eec5020.png" alt="image-20220827231520070" tabindex="0" loading="lazy"><figcaption>image-20220827231520070</figcaption></figure>`,184);function b(h,m){const i=s("ExternalLinkIcon");return o(),n("div",null,[r,a("p",null,[e("代码托管中心用于维护 Git 的远程库。包括在局域网环境下搭建的 GitLab 服务器，以及在外网环境下的 "),a("a",l,[e("GitHub"),t(i)]),e(" 和 "),a("a",p,[e("Gitee (码云)"),t(i)]),e("。")]),f])}const x=c(g,[["render",b],["__file","02.html.vue"]]);export{x as default};
