const e=JSON.parse('{"key":"v-05e216f0","path":"/front_end/js_advanced/typescript/01.html","title":"1.简介","lang":"zh-CN","frontmatter":{"description":"1.简介 1.1 TypeScript简介 TS 官方文档 TypeScript 简称：TS，是 JavaScript 的超集，简单来说就是：JS 有的 TS 都有。 它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。 TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。 TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。 相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.cf/front_end/js_advanced/typescript/01.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"1.简介"}],["meta",{"property":"og:description","content":"1.简介 1.1 TypeScript简介 TS 官方文档 TypeScript 简称：TS，是 JavaScript 的超集，简单来说就是：JS 有的 TS 都有。 它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。 TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。 TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。 相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1.简介\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.1 TypeScript简介","slug":"_1-1-typescript简介","link":"#_1-1-typescript简介","children":[]},{"level":2,"title":"1.2 为什么要有 typescript","slug":"_1-2-为什么要有-typescript","link":"#_1-2-为什么要有-typescript","children":[]},{"level":2,"title":"1.3 TypeScript相比JS的优势","slug":"_1-3-typescript相比js的优势","link":"#_1-3-typescript相比js的优势","children":[]},{"level":2,"title":"2.1 TypeScript 开发环境搭建","slug":"_2-1-typescript-开发环境搭建","link":"#_2-1-typescript-开发环境搭建","children":[]},{"level":2,"title":"2.2 编译并运行TS代码","slug":"_2-2-编译并运行ts代码","link":"#_2-2-编译并运行ts代码","children":[]},{"level":2,"title":"2.3 简化运行TS的步骤","slug":"_2-3-简化运行ts的步骤","link":"#_2-3-简化运行ts的步骤","children":[]},{"level":2,"title":"2.4 官方playground","slug":"_2-4-官方playground","link":"#_2-4-官方playground","children":[]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":5.41,"words":1622},"filePathRelative":"front_end/js_advanced/typescript/01.md","localizedDate":"2023年1月30日","excerpt":"<h1> 1.简介</h1>\\n<h2> 1.1 TypeScript简介</h2>\\n<ul>\\n<li><a href=\\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.typescriptlang.org%2F\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">TS 官方文档</a></li>\\n</ul>\\n<ol>\\n<li><strong><code>TypeScript</code> 简称：TS，是 JavaScript 的超集</strong>，简单来说就是：JS 有的 TS 都有。</li>\\n<li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li>\\n<li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li>\\n<li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li>\\n<li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li>\\n</ol>","autoDesc":true}');export{e as data};
