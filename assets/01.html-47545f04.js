import{ab as p,G as o,H as c,E as n,S as a,N as t,ac as e,W as l}from"./framework-09305b5d.js";const i={},u=e('<h1 id="_01-【前言-基础使用-核心概念】" tabindex="-1"><a class="header-anchor" href="#_01-【前言-基础使用-核心概念】" aria-hidden="true">#</a> 01 【前言 基础使用 核心概念】</h1><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1.前言</h2><h3 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述" aria-hidden="true">#</a> 1.1 概述</h3>',3),r={href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.webpackjs.com%2Fconcepts%2F",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,[a("本质上，"),n("strong",null,"webpack"),a("是一个现代 JavaScript 应用程序的"),n("strong",null,"静态模块打包器"),a("(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个"),n("strong",null,"依赖关系图"),a("(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个"),n("strong",null,"静态资源(bundle)"),a("。")],-1),k=e(`<p>转换成自己的话：</p><ul><li>webpack 是前端的一个<strong>资源构建工具</strong>，一个<strong>静态模块打包器</strong>；</li><li>在 webpack 看来，前端的所有资源文件(js/json/css/less/scss/img...)都是一个个<strong>模块</strong>；</li><li>webpack 会根据资源的依赖关系生成一个<strong>依赖关系图</strong>，再打包成对应的<strong>静态资源bundle</strong>。</li></ul><h3 id="_1-2-为什么需要打包工具" tabindex="-1"><a class="header-anchor" href="#_1-2-为什么需要打包工具" aria-hidden="true">#</a> 1.2 为什么需要打包工具？</h3><p>开发时，我们会使用框架（React、Vue），ES6 模块化语法，Less/Sass 等 css 预处理器等语法进行开发。</p><p>这样的代码要想在浏览器运行必须经过编译成浏览器能识别的 JS、Css 等语法，才能运行。</p><p>所以我们需要打包工具帮我们做完这些事。</p><p>除此之外，打包工具还能压缩代码、做兼容性处理、提升代码性能等。</p><h3 id="_1-3-为什么需要-webpack" tabindex="-1"><a class="header-anchor" href="#_1-3-为什么需要-webpack" aria-hidden="true">#</a> 1.3 为什么需要 Webpack</h3><p>想要理解为什么要使用 webpack，我们先回顾下历史，在打包工具出现之前，我们 是如何在 web 中使用 JavaScript 的。在浏览器中运行 JavaScript 有两种方法：</p><p><strong>第一种方式</strong>，引用一些脚本来存放每个功能，比如下面这个文档：</p><p><code>01-why-webpack/index-1.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>千锋大前端教研院-Webpack5学习指南<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- HTML 代码 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>我的HTML代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 引入外部的 JavaScript 文件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.core.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.0.2/js/bootstrap.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 引入我自己的 JavaScript 文件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./scripts/common.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./scripts/user.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./scripts/authentication.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./scripts/product.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./scripts/ .js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./scripts/payment.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./scripts/checkout.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./scripts/shipping.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此解决方案很难扩展，因为加载太多脚本会导致网络瓶颈。同时如果你不小心更改了JavaScript文件的加载顺序，这个项目可能要崩溃。</p><p><strong>第二种方式</strong>，使用一个包含所有项目代码的大型 .js 文件, 对上面的文档做改进：</p><p><code>01-why-webpack/index-2.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>千锋大前端教研院-Webpack5学习指南<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- HTML 代码 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>我的HTML代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

  <span class="token comment">&lt;!-- 引入我自己的 JavaScript 文件 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./scripts/bundle.33520ba89e.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式解决了方式一的问题，但会导致作用域、文件大小、可读性和可维护性方面 的问题。如何解决这些问题，请往下阅读。</p><h3 id="_1-4-如何解决作用域问题" tabindex="-1"><a class="header-anchor" href="#_1-4-如何解决作用域问题" aria-hidden="true">#</a> 1.4 如何解决作用域问题</h3><p>早先前，我们使用 <code>Grunt</code> 和 <code>Gulp</code> 两个工具来管理我们项目的资源。</p><figure><img src="https://i0.hdslb.com/bfs/album/8df6db516614d967926e7e7f70257c16ac262212.png" alt="image-20220801195451871" tabindex="0" loading="lazy"><figcaption>image-20220801195451871</figcaption></figure><p>这两个工具称为任务执行器，它们将所有项目文件拼接在一起。利用了<code> 立即调用函数 表达式(IIFE) - Immediately invoked function expressions</code> , 解决了大型项目 的作用域问题；当脚本文件被封装在 IIFE 内部时，你可以安全地拼接或安全地组合 所有文件，而不必担心作用域冲突。</p><p>什么是IIFE，参见下面的代码：</p><ul><li><p>当函数变成立即执行的函数表达式时，表达式中的变量不能从外部访问。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Barry&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 无法从外部访问变量 name</span>
name <span class="token comment">// 抛出错误：&quot;Uncaught ReferenceError: name is not defined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将IIFE 分配给一个变量，不是存储 IIFE 本身，而是存储 IIFE 执行后返回的 结果。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;Barry&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// IIFE 执行后返回的结果：</span>
result<span class="token punctuation">;</span> <span class="token comment">// &quot;Barry&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Grunt</code> ， <code>Gulp </code>解决了作用域问题。但是，修改一个文件意味着必须重新构建整个文 件。拼接可以做到很容易地跨文件重用脚本，却使构建结果的优化变得更加困难。如何判断代码是否实际被使用？</p><p>即使你只用到 lodash 中的某个函数，也必须在构建结果中加入整个库，然后将它们压缩在一起。大规模地实现延迟加载代码块及无用代码的去除，需要开发人员手动地 进行大量工作。</p><p><code>01-why-webpack/index-3.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.21/lodash.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> str <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;千锋大前端教研院&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Webpack5学习指南&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-如何解决代码拆分问题" tabindex="-1"><a class="header-anchor" href="#_1-5-如何解决代码拆分问题" aria-hidden="true">#</a> 1.5 如何解决代码拆分问题</h3><p>感谢 <code>Node.js</code> ，JavaScript 模块诞生了！</p><p>Node.js 是一个 JavaScript 运行时，可以在浏览器环境之外的计算机和服务器中使 用。webpack 运行在 Node.js 中。</p><p>当Node.js 发布时，一个新的时代开始了，它带来了新的挑战。既然不是在浏览器中 运行 <code>JavaScript</code>，现在已经没有了可以添加到浏览器中的 <code>html</code> 文件和 <code>script</code> 标签。 那么 <code>Node.js</code> 应用程序要如何加载新的代码文件呢？</p><p><code>CommonJS</code> 问世并引入了 <code>require</code> 机制，它允许你在当前文件中加载和使用某个 模块。导入需要的每个模块，这一开箱即用的功能，帮助我们解决了代码拆分的问 题。</p><figure><img src="https://i0.hdslb.com/bfs/album/de4d62b1ce1055f550a506c6dd8ebaa2e9e9f882.png" alt="image-20220801195948874" tabindex="0" loading="lazy"><figcaption>image-20220801195948874</figcaption></figure><p><code>Node.js</code> 已经成为一种语言、一个平台和一种快速开发和创建快速应用程序的方 式，接管了整个 JavaScript 世界。</p><p>但是<code>CommonJS</code> 没有浏览器支持。没有 live binding(实时绑定)。循环引用存在问题。 同步执行的模块解析加载器速度很慢。虽然 CommonJS 是 Node.js 项目的绝佳解决 方案，但浏览器不支持模块，我们似乎又遇到了新问题。</p><h3 id="_1-6-如何让浏览器支持模块" tabindex="-1"><a class="header-anchor" href="#_1-6-如何让浏览器支持模块" aria-hidden="true">#</a> 1.6 如何让浏览器支持模块</h3><p>在早期，我们应用 <code>Browserify</code> 和<code>RequireJS</code>等打包工具编写能够在浏览器中运行 的 CommonJS 模块:</p><p>目前，我们还有一个选择，就是来自 Web 项目的好消息是，模块正在成为 ECMAScript 标准的官方功能。然而，浏览器支持不完整，版本迭代速度也不够快， 还是推荐上面两个早期模块实现。早期的任务构建工具基于 Google 的 Closure 编译 器，要求我们手动在顶部声明所有的依赖，开发体验不好。</p><h3 id="_1-7-webpack-搞定这一切" tabindex="-1"><a class="header-anchor" href="#_1-7-webpack-搞定这一切" aria-hidden="true">#</a> 1.7 Webpack 搞定这一切</h3><p>是否可以有一种方式，不仅可以让我们编写模块，而且还支持任何模块格式（至少在 我们到达 ESM 之前），并且可以同时处理<code>resource</code>和 <code>assets</code> ？</p><p>这就是 webpack 存在的原因。它是一个工具，可以打包你的 <code>JavaScript</code> 应用程序 （支持 ESM 和 CommonJS），可以扩展为支持许多不同的静态资源，例如： <code>images </code>, <code>fonts</code> 和 <code>stylesheets</code> 。</p><p><code>webpack</code> 关心性能和加载时间；它始终在改进或添加新功能，例如：异步地加载和 预先加载代码文件，以便为你的项目和用户提供最佳体验。</p><figure><img src="https://i0.hdslb.com/bfs/album/d41f880bdebe5ee8227770a1dd567b75fb24fa82.png" alt="image-20220801200226168" tabindex="0" loading="lazy"><figcaption>image-20220801200226168</figcaption></figure><h2 id="_2-基础使用" tabindex="-1"><a class="header-anchor" href="#_2-基础使用" aria-hidden="true">#</a> 2.基础使用</h2><p><strong><code>Webpack</code> 是一个静态资源打包工具。</strong></p><p>它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。</p><p>输出的文件就是编译好的文件，就可以在浏览器段运行了。</p><p>我们将 <code>Webpack</code> 输出的文件叫做 <code>bundle</code>。</p><h3 id="_2-1-功能介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-功能介绍" aria-hidden="true">#</a> 2.1 功能介绍</h3><p>Webpack 本身功能是有限的:</p><ul><li>开发模式：仅能编译 JS 中的 <code>ES Module</code> 语法</li><li>生产模式：能编译 JS 中的 <code>ES Module</code> 语法，还能压缩 JS 代码</li></ul><h3 id="_2-2-安装" tabindex="-1"><a class="header-anchor" href="#_2-2-安装" aria-hidden="true">#</a> 2.2 安装</h3><p>首先使用 npm init 初始化项目，然后安装 webpack 以及 webpack-cli 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 全局安装
<span class="token function">pnpm</span> i webpack webpack-cli <span class="token parameter variable">-g</span>

// 本地安装<span class="token punctuation">(</span>推荐<span class="token punctuation">)</span>
<span class="token function">pnpm</span> i webpack webpack-cli <span class="token parameter variable">-D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我的webpack版本：&quot;webpack&quot;: &quot;^5.44.0&quot;, &quot;webpack-cli&quot;: &quot;^4.7.2&quot;；</p></blockquote><h3 id="_2-3-开始使用" tabindex="-1"><a class="header-anchor" href="#_2-3-开始使用" aria-hidden="true">#</a> 2.3 开始使用</h3><h4 id="_2-3-1-资源目录" tabindex="-1"><a class="header-anchor" href="#_2-3-1-资源目录" aria-hidden="true">#</a> 2.3.1 资源目录</h4><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>webpack_code # 项目根目录（所有指令必须在这个目录运行）
    └── src # 项目源码目录
        ├── js # js文件目录
        │   ├── count.js
        │   └── sum.js
        └── main.js # 项目主文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-创建文件" tabindex="-1"><a class="header-anchor" href="#_2-3-2-创建文件" aria-hidden="true">#</a> 2.3.2 创建文件</h4><ul><li>count.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>sum.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p <span class="token operator">+</span> c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>main.js</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> count <span class="token keyword">from</span> <span class="token string">&quot;./js/count&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> sum <span class="token keyword">from</span> <span class="token string">&quot;./js/sum&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-3-下载依赖" tabindex="-1"><a class="header-anchor" href="#_2-3-3-下载依赖" aria-hidden="true">#</a> 2.3.3 下载依赖</h4><p>打开终端，来到项目根目录。运行以下指令：</p><ul><li>初始化<code>package.json</code></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm init -y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时会生成一个基础的 <code>package.json</code> 文件。</p><p><strong>需要注意的是 <code>package.json</code> 中 <code>name</code> 字段不能叫做 <code>webpack</code>, 否则下一步会报错</strong></p><ul><li>下载依赖</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm i webpack webpack-cli -D
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-3-4-启用-webpack" tabindex="-1"><a class="header-anchor" href="#_2-3-4-启用-webpack" aria-hidden="true">#</a> 2.3.4 启用 Webpack</h4><ul><li>开发模式</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx webpack ./src/main.js <span class="token parameter variable">--mode</span><span class="token operator">=</span>development
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>生产模式</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npx webpack ./src/main.js --mode=production
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>npx webpack</code>: 是用来运行本地安装 <code>Webpack</code> 包的。</p><p><code>./src/main.js</code>: 指定 <code>Webpack</code> 从 <code>main.js</code> 文件开始打包，不但会打包 <code>main.js</code>，还会将其依赖也一起打包进来。</p><p><code>--mode=xxx</code>：指定模式（环境）。</p><h4 id="_2-3-5-观察输出文件" tabindex="-1"><a class="header-anchor" href="#_2-3-5-观察输出文件" aria-hidden="true">#</a> 2.3.5 观察输出文件</h4><p>默认 <code>Webpack</code> 会将文件打包输出到 <code>dist</code> 目录下，我们查看 <code>dist</code> 目录下文件情况就好了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>dselegent<span class="token punctuation">]</span> 03-try-webpack $ npx webpack
asset main.js <span class="token number">50</span> bytes <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span>
orphan modules <span class="token number">81</span> bytes <span class="token punctuation">[</span>orphan<span class="token punctuation">]</span> <span class="token number">1</span> module
./src/index.js + <span class="token number">1</span> modules <span class="token number">135</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>

WARNING <span class="token keyword">in</span> configuration
The <span class="token string">&#39;mode&#39;</span> option has not been set, webpack will fallback to
<span class="token string">&#39;production&#39;</span> <span class="token keyword">for</span> this value.
Set <span class="token string">&#39;mode&#39;</span> option to <span class="token string">&#39;development&#39;</span> or <span class="token string">&#39;production&#39;</span> to <span class="token builtin class-name">enable</span>
defaults <span class="token keyword">for</span> each environment.
You can also <span class="token builtin class-name">set</span> it to <span class="token string">&#39;none&#39;</span> to disable any default behavior.
Learn more: https://webpack.js.org/configuration/mode/

webpack <span class="token number">5.54</span>.0 compiled with <span class="token number">1</span> warning <span class="token keyword">in</span> <span class="token number">197</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/c817cd090fc4c5158fdb42cfe22ca2e125937912.png" alt="image-20220804191018159" tabindex="0" loading="lazy"><figcaption>image-20220804191018159</figcaption></figure><p>在这里，我们在没有任何配置的情况下运行 <code>Webpack</code>（通常你会为 Webpack 提供 一个配置文件，现在，自Webpack4 开始，可以使用默认配置来打包文件了）。</p><p>这里还有一个警告：“mode” 选项尚未设置。我们将在本课程后面讨论“mode”选项。</p><p>从结果来看，webpack 为我们生成了一个main.js文件，具体见下图：</p><figure><img src="https://i0.hdslb.com/bfs/album/2d9c80898b35c3903db1a86081716d6e6c2822bb.png" alt="image-20220801201935588" tabindex="0" loading="lazy"><figcaption>image-20220801201935588</figcaption></figure><p>我们来看一下 main.js 里有什么：</p><p><code>03-try-webpack/dist/main.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行npx实际上就是执行npde_modules中已经下载好的依赖，这里是webpack. 打包的webpack默认是把src下的index.js文件作为入口文件，这样一来呢就会把相关的代码（相互依赖关系的代码）一起打包成一个js文件。 可以看到，它打包出来是个IIFE,里面还是箭头函数。</p><h3 id="_2-4-自定义-webpack-配置" tabindex="-1"><a class="header-anchor" href="#_2-4-自定义-webpack-配置" aria-hidden="true">#</a> 2.4 自定义 Webpack 配置</h3><p>实际上， webpack-cli 给我们提供了丰富的终端命令行指令，可以通过<code>webpack -- help</code>来查看。</p><p>可是命令行不方便也不直观，而且还不利于保存配置的内容。因此，webpack 还给我们提供了通过配置文件，来自定义配置参数的能力。</p><p><code>03-try-webpack/webpack.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.js&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;bundle.js&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 输出文件夹必须定义为绝对路径</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;./dist&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;none&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现，打包并没有成功，因为 webpack 要求我们打包配置 <code>output.path</code> 的路径必须为绝对路径，通过 path 模块来定义输出路径为绝对路径：</p><p><code>03-try-webpack/webpack.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Node.js的核心模块，专门用来处理文件路径</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 入口</span>
  <span class="token comment">// 相对路径和绝对路径都行</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&quot;./src/main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token comment">// 输出</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// path: 文件输出目录，必须是绝对路径</span>
    <span class="token comment">// path.resolve()方法返回一个绝对路径</span>
    <span class="token comment">// __dirname 当前文件的文件夹绝对路径</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// filename: 输出文件名</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&quot;main.js&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 加载器</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// 插件</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 模式</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&quot;development&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 开发模式</span>
<span class="token comment">//设置打包的模式：开发/测试/生产，这个和p<wbr>rocess.env.NODE_ENV息息相关，我们在package.json中用命令行设置：webpack --mode=development</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>项目文件通过 webpack 打包好了，我们得去引用打包好了的 JS才对。修改<code> index.html</code></p><p><code>03-try-webpack/index.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./dist/bundle.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样打包出来的文件：</p><figure><img src="https://i0.hdslb.com/bfs/album/35ca858ef504d1769a6cf7f783f7f53948117c55.png" alt="image-20220804191402032" tabindex="0" loading="lazy"><figcaption>image-20220804191402032</figcaption></figure><p>对于大多数项目，我们建议本地安装。这可以在引入重大更新(breaking change)版 本时，更容易分别升级项目。 通常会通过运行一个或多个 npm scripts 以在本地 node_modules 目录中查找安装的 webpack， 来运行 webpack：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack --config webpack.config.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示： 想要运行本地安装的 webpack，你可以通过 node_modules/.bin/webpack 来 访问它的二进制版本。另外，如果你使用的是 npm v5.2.0 或更高版本，则可以 运行 npx webpack 来执行。</p></blockquote><h3 id="_2-5-清理dist" tabindex="-1"><a class="header-anchor" href="#_2-5-清理dist" aria-hidden="true">#</a> 2.5 清理dist</h3><p>仔细留意一下，我们发现 <code>dist/index.html </code>仍旧存在，这个文件是上次生成的残留 文件，已经没有用了。可见，<code>webpack</code> 将生成文件并放置在 <code>/dist </code>文件夹中，但是 它不会追踪哪些文件是实际在项目中用到的。通常比较推荐的做法是，在每次构建前 清理 <code>/dist</code> 文件夹，这样只会生成用到的文件。让我们使用 output.clean 配置项 实现这个需求。</p><p><code>04-manage-output/webpack.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token comment">// 打包前清理 dist 文件夹</span>
    <span class="token literal-property property">clean</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查<code>/dist</code>文件夹。现在只会看到构建后生成的文件，而没有旧文件！</p><h3 id="_2-6-source-map" tabindex="-1"><a class="header-anchor" href="#_2-6-source-map" aria-hidden="true">#</a> 2.6 source map</h3><p>当 <code>webpack</code> 打包源代码时，可能会很难追踪到 error(错误) 和 warning(警告) 在源代 码中的原始位置。例如，如果将三个源文件<code>（ a.js , b.js 和 c.js </code>）打包到一个<code> bundle（ bundle.js ）</code>中，而其中一个源文件包含一个错误，那么堆栈跟踪就会直 接指向到 <code>bundle.js</code> 。你可能需要准确地知道错误来自于哪个源文件，所以这种提 示这通常不会提供太多帮助。</p><p>开发模式下默认生成的sourcemap记录的是生成后代码的位置，不是源代码的位置。</p><p>为了更容易地追踪 error 和 warning，JavaScript 提供了 source maps 功能，可以 将编译后的代码映射回原始源代码。如果一个错误来自于 b.js ，source map 就会 明确的告诉你。</p><p><code>source map</code>是一种提供源代码到构建后代码映射的技术，如果构建后代码出错了，通过映射关系可以追踪源代码的错误。在 <code>webpack.config.js</code> 文件中配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在开发模式下追踪代码具体位置</span>
  <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">&#39;inline-source-map&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器中打开生成的 index.html 文件，并且在控制台查看显示的错误。 错误如下：</p><figure><img src="https://i0.hdslb.com/bfs/album/d3781d9fdf212219ba866648976d7582ecf47669.png" alt="image-20220801204318909" tabindex="0" loading="lazy"><figcaption>image-20220801204318909</figcaption></figure><p>在浏览器里点击 <code>hellow-world.js:3 </code>, 查看具体错误：</p><figure><img src="https://i0.hdslb.com/bfs/album/4af49847d9f10d0a6706f847e8f8e82cf79672ae.png" alt="image-20220801204341383" tabindex="0" loading="lazy"><figcaption>image-20220801204341383</figcaption></figure><p><strong>常用的几种 source-map 类型</strong></p><ul><li><p>eval：（默认配置）不会生成source map文件，每个模块都封装在eval中，并在后面添加<code>//# sourceURL = xx.js</code><img src="https://i0.hdslb.com/bfs/album/5edcc86b74ae214cb9d1510836df76ddc5dfc45b.png" alt="image-20220804185833339" loading="lazy"> 当关闭devtool时: <img src="https://i0.hdslb.com/bfs/album/2d4d0b0dfba06ff8788681bb5070628660727f87.png" alt="image-20220804185931017" loading="lazy"> 当打开eval时：会将每个模块都包裹在一个eval中。 <img src="https://i0.hdslb.com/bfs/album/39a0a4c32314b4c5670110ea087ad61c4b664336.png" alt="image-20220804190019946" loading="lazy"></p></li><li><p>source-map：生成外部文件，错误代码的准确信息和源代码的错误位置</p><p>额外生成一个source.map文件，打包文件bundle.js末尾会引入，可以映射源代码。 <img src="https://i0.hdslb.com/bfs/album/4cc4399f8fd8778f37302749e860cf5a30dc0be8.png" alt="image-20220804190123054" loading="lazy"></p></li><li><p>inline-source-map：内联，错误代码的准确信息和源代码的错误位置。在代码底部生成，构建速度比外部文件更快 不生成映射文件，而是生成一个dataURL形式的映射文件放置在bundle.js末尾。 <img src="https://i0.hdslb.com/bfs/album/dce9d79ae0f02d0a511fb5db5e7ef266d04f3964.png" alt="image-20220804190606126" loading="lazy"></p></li><li><p>hidden-source-map：生成外部文件，错误代码的原因，没有错误位置，无法追踪源代码错误。 和source-map一样，额外生成一个source.map文件，但打包文件bundle.js末尾没有引入，也就是不能映射源代码。 <img src="https://i0.hdslb.com/bfs/album/e6a4b863be479273ee3e341ac6225f5795786436.png" alt="image-20220804190537897" loading="lazy"></p></li><li><p>eval-source-map：内联，错误代码的准确信息和源代码的错误位置。每一个文件都生成对应的 source-map 每个module都会通过eval()来执行，并且生成一个DataUrl形式的url。和inline-source-map不同的是，inline-source-map只会生成一个dataurl放置在bundle.js的末尾。而eval()是每个module都生成。 <img src="https://i0.hdslb.com/bfs/album/d72ea4943ba75e4268cfc05c2f6d8b6f1ed5657e.png" alt="image-20220804190710490" loading="lazy"></p></li><li><p>cheap-source-map：生成外部文件，错误代码的准确信息和源代码的错误位置。只精确到行 生成一个没有列信息column-mapping（实际代码调试时，我们并不需要列信息）的sourceMaps文件，需要注意的是，一些需要loader编译的代码，如babel先编译，再打包的代码，这种配置是不会映射到的。 <img src="https://i0.hdslb.com/bfs/album/91a1f809723eea838f835d5f1a62a78ad3edef4c.png" alt="image-20220804190749749" loading="lazy"></p></li><li><p>cheap-module-source-map：同 cheap-source-map，会将 loader 的 source map 加入 生成一个没有列信息（column-mapping）的sourceMaps文件，同时loader的sourcemap也会被简化为只包含对应行的。</p></li></ul><p>开发环境和生产环境的要求：</p><p>1、开发环境：要求速度快，调试更友好</p><p>我们在开发环境时，最推荐采用这种：<code>cheap-module-source-map</code></p><p>2、生产环境：<code>(none)</code>（省略 <code>devtool</code> 选项） - 不生成 source map。这是一个不错的选择。</p><figure><img src="https://i0.hdslb.com/bfs/album/dc60e892ce86656cbf63669c251e442d28ec385c.png" alt="image-20220804115913744" tabindex="0" loading="lazy"><figcaption>image-20220804115913744</figcaption></figure><h3 id="_2-7-使用-watch-mode-观察模式" tabindex="-1"><a class="header-anchor" href="#_2-7-使用-watch-mode-观察模式" aria-hidden="true">#</a> 2.7 使用 watch mode(观察模式)</h3><p>在每次编译代码时，手动运行 npx webpack 会显得很麻烦。</p><p>我们可以在 webpack 启动时添加 &quot;watch&quot; 参数。如果其中一个文件被更新，代码将被重新编译，所以你不必再去手动运行整个构建。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> npx webpack <span class="token parameter variable">--watch</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>类似于nodemon，保存将会重新打包一次</p></blockquote><p>现在，保存文件并检查 terminal(终端) 窗口。应该可以看到 webpack 自动地重新编 译修改后的模块！</p><p>唯一的缺点是，为了看到修改后的实际效果，你需要刷新浏览器。如果能够自动刷新浏览器就更好了，因此接下来我们会尝试通过 <code>webpack-dev-server</code> 实现此功能。</p><h2 id="_3-核心概念" tabindex="-1"><a class="header-anchor" href="#_3-核心概念" aria-hidden="true">#</a> 3.核心概念</h2><p><strong>webpack打包的大致流程</strong></p><ul><li>以入口Entry为起点，分析构建内部依赖图，找出有哪些模块和库是Entry直接和间接依赖的；</li><li>开始处理找到的每个依赖项： <ul><li>webpack可以直接处理js, json文件；</li><li>webpack处理不了的文件(css, less, scss, png, jpg...)使用loader处理；</li><li>使用plugins做优化、压缩等处理；</li><li>处理完后输出到文件中，这些文件我们称为bundles；</li></ul></li><li>处理完后获得了bundles，webpack会根据出口output的配置找到目标文件夹，创建目标文件，再把这些bundles写入目标文件。</li></ul><h3 id="_3-1-entry-入口" tabindex="-1"><a class="header-anchor" href="#_3-1-entry-入口" aria-hidden="true">#</a> 3.1 Entry 入口</h3>`,143),m=n("strong",null,"入口起点(entry point)",-1),v={href:"https://webpack.docschina.org/concepts/dependency-graph/",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"./src/index.js",-1),b={href:"https://webpack.docschina.org/configuration",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"entry",-1),f=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./path/to/my/entry/file.js&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-output-输出" tabindex="-1"><a class="header-anchor" href="#_3-2-output-输出" aria-hidden="true">#</a> 3.2 Output 输出</h3><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundle</em>，以及如何命名这些文件。主要输出文件的默认值是 <code>./dist/main.js</code>，其他生成文件默认放置在 <code>./dist</code> 文件夹中。</p><p>你可以通过在配置中指定一个 <code>output</code> 字段，来配置这些处理过程：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js:</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">&#39;./path/to/my/entry/file.js&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 输出路径：</span>
    <span class="token comment">//    --dirname: nodeJs的变量，代表当前文件的绝对路径</span>
    <span class="token comment">//    resolve: nodeJs里path模块的方法，用来拼接绝对路径</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// 输出文件名</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;my-first-webpack.bundle.js&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),w=n("code",null,"output.filename",-1),q=n("code",null,"output.path",-1),y={href:"https://nodejs.org/api/modules.html",target:"_blank",rel:"noopener noreferrer"},j=e(`<h3 id="_3-3-loader-解析器" tabindex="-1"><a class="header-anchor" href="#_3-3-loader-解析器" aria-hidden="true">#</a> 3.3 Loader 解析器</h3><ul><li>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript 和 JSON 文件）；</li><li>loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块。</li></ul><blockquote><h6 id="warning" tabindex="-1"><a class="header-anchor" href="#warning" aria-hidden="true">#</a> Warning</h6><p>webpack 的其中一个强大的特性就是能通过 <code>import</code> 导入任何类型的模块（例如 <code>.css</code> 文件），其他打包程序或任务执行器的可能并不支持。我们认为这种语言扩展是很有必要的，因为这可以使开发人员创建出更准确的依赖关系图。</p></blockquote><p>在更高层面，在 webpack 的配置中，<strong>loader</strong> 有两个属性：</p><ol><li><code>test</code> 属性，识别出哪些文件会被转换。</li><li><code>use</code> 属性，定义出在进行转换时，应该使用哪个 loader。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">&#39;my-first-webpack.bundle.js&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不同类型的文件必须配置不同的规则来处理</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> 
        <span class="token comment">// 匹配什么样的文件</span>
        <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> 
        <span class="token comment">// use数组中loader的执行顺序：从下到上，从右到左（后进先出）</span>
        <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;raw-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上配置中，对一个单独的 module 对象定义了 <code>rules</code> 属性，里面包含两个必须属性：<code>test</code> 和 <code>use</code>。这告诉 webpack 编译器(compiler) 如下信息：</p><blockquote><p><em>“嘿，webpack 编译器，当你碰到「在</em> <code>require()</code><em>/</em><code>import</code> <em>语句中被解析为 &#39;.txt&#39; 的路径」时，在你对它打包之前，先</em> <strong>use(使用)</strong> <code>raw-loader</code> <em>转换一下。</em></p></blockquote><blockquote><h6 id="warning-1" tabindex="-1"><a class="header-anchor" href="#warning-1" aria-hidden="true">#</a> Warning</h6><p>重要的是要记住，在 webpack 配置中定义 rules 时，要定义在 <code>module.rules</code> 而不是 <code>rules</code> 中。为了使你便于理解，如果没有按照正确方式去做，webpack 会给出警告。</p></blockquote><blockquote><h6 id="warning-2" tabindex="-1"><a class="header-anchor" href="#warning-2" aria-hidden="true">#</a> Warning</h6><p>请记住，使用正则表达式匹配文件时，你不要为它添加引号。也就是说，<code>/\\.txt$/</code> 与 <code>&#39;/\\.txt$/&#39;</code> 或 <code>&quot;/\\.txt$/&quot;</code> 不一样。前者指示 webpack 匹配任何以 .txt 结尾的文件，后者指示 webpack 匹配具有绝对路径 &#39;.txt&#39; 的单个文件; 这可能不符合你的意图。</p></blockquote>`,10),_={href:"https://webpack.docschina.org/concepts/loaders",target:"_blank",rel:"noopener noreferrer"},x=n("h3",{id:"_3-4-plugins-插件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-4-plugins-插件","aria-hidden":"true"},"#"),a(" 3.4 Plugins 插件")],-1),E=n("p",null,"实际上webpack实现的功能并不全是主包的，可以说主包只是提供了一个平台。真正完成一个项目的资源打包编译的，还是众多的webpack插件：",-1),S=n("figure",null,[n("img",{src:"https://i0.hdslb.com/bfs/album/3cd1e5b6619c1e80b72c846adf316a9ecb1f5faf.png",alt:"image-20220804191504809",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220804191504809")],-1),J={href:"https://webpack.js.org/plugins/",target:"_blank",rel:"noopener noreferrer"},N=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">1</span>，社区的插件
<span class="token number">2</span>，webpack内置的插件
<span class="token number">3</span>，第三方插件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/acadfca2e8a376a176f13c57db261039eb02487d.png" alt="image-20220804191550240" tabindex="0" loading="lazy"><figcaption>image-20220804191550240</figcaption></figure><p>loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</p>`,3),I=n("h6",{id:"tip",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tip","aria-hidden":"true"},"#"),a(" Tip")],-1),W={href:"https://webpack.docschina.org/api/plugins",target:"_blank",rel:"noopener noreferrer"},z=e(`<p>想要使用一个插件，你只需要 <code>require()</code> 它，然后把它添加到 <code>plugins</code> 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 <code>new</code> 操作符来创建一个插件实例。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;html-webpack-plugin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;webpack&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于访问内置插件</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.txt$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">&#39;raw-loader&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;./src/index.html&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>html-webpack-plugin</code> 为应用程序生成一个 HTML 文件，并自动将生成的所有 bundle 注入到此文件中。</p>`,3),C=n("h6",{id:"tip-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#tip-1","aria-hidden":"true"},"#"),a(" Tip")],-1),F={href:"https://webpack.docschina.org/plugins",target:"_blank",rel:"noopener noreferrer"},P={href:"https://webpack.docschina.org/concepts/plugins",target:"_blank",rel:"noopener noreferrer"},T=e(`<h3 id="_3-5-mode-模式" tabindex="-1"><a class="header-anchor" href="#_3-5-mode-模式" aria-hidden="true">#</a> 3.5 Mode 模式</h3><ul><li><p>模式(Mode)指示 webpack 使用相应模式的配置；</p></li><li><p><code>mode: &#39;development&#39; | &#39;production&#39; | &#39;none&#39;</code>;</p></li><li><p>生产环境和开发环境将ES6模块化编译成浏览其能识别的模块化；</p></li><li><p>生产环境比开发环境多一个压缩js代码；</p></li><li><p>生产环境比开发环境多一个压缩js代码；</p></li></ul><table><thead><tr><th>选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>development</td><td>会将<code>DefinePlugin</code>中<code>p<wbr>rocess.env.NODE_ENV</code>的值设置为<code>development</code>。启用<code>NamedChunksPlugin</code>和<code>NamedModulesPlugin</code>。</td><td>能让代码本地调试运行的环境</td></tr><tr><td>production</td><td>会将<code>DefinePlugin</code>中<code>p<wbr>rocess.env.NODE_ENV</code>的值设置为<code>production</code>。启用<code>FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin</code>。</td><td>能让代码优化上线运行的环境</td></tr></tbody></table><p>通过选择 <code>development</code>, <code>production</code> 或 <code>none</code> 之中的一个，来设置 <code>mode</code> 参数，你可以启用 webpack 内置在相应环境下的优化。其默认值为 <code>production</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// webpack.config.js:</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">&#39;production&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),M={href:"https://webpack.docschina.org/configuration/mode",target:"_blank",rel:"noopener noreferrer"};function D(U,L){const s=l("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[a("官网"),t(s)]),a("的描述：")]),d]),k,n("p",null,[m,a(" 指示 webpack 应该使用哪个模块，来作为构建其内部 "),n("a",v,[a("依赖图(dependency graph)"),t(s)]),a(" 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。")]),n("p",null,[a("默认值是 "),g,a("，但你可以通过在 "),n("a",b,[a("webpack configuration"),t(s)]),a(" 中配置 "),h,a(" 属性，来指定一个（或多个）不同的入口起点。例如：")]),f,n("p",null,[a("在上面的示例中，我们通过 "),w,a(" 和 "),q,a(" 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成(emit)到哪里。可能你想要了解在代码最上面导入的 path 模块是什么，它是一个 "),n("a",y,[a("Node.js 核心模块"),t(s)]),a("，用于操作文件路径。")]),j,n("p",null,[a("在使用 loader 时，可以阅读 "),n("a",_,[a("loader 章节"),t(s)]),a(" 查看更深入的自定义配置。")]),x,E,S,n("p",null,[a("官网地址："),n("a",J,[a("https://webpack.js.org/plugins/"),t(s)]),a(" 总共分为三类：")]),N,n("blockquote",null,[I,n("p",null,[a("查看 "),n("a",W,[a("插件接口(plugin interface)"),t(s)]),a("，学习如何使用它来扩展 webpack 能力。")])]),z,n("blockquote",null,[C,n("p",null,[a("webpack 提供许多开箱可用的插件！查阅 "),n("a",F,[a("插件列表"),t(s)]),a(" 获取更多。")])]),n("p",null,[a("在 webpack 配置中使用插件是简单直接的。然而，也有很多值得我们进一步探讨的用例。"),n("a",P,[a("查看这里了解更多"),t(s)]),a("。")]),T,n("p",null,[a("想要了解更多，请查阅 "),n("a",M,[a("mode 配置"),t(s)]),a("，这里有具体每个值相应的优化行为。")])])}const H=p(i,[["render",D],["__file","01.html.vue"]]);export{H as default};
