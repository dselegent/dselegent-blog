import{ab as p,G as o,H as c,E as n,S as s,N as t,ac as e,W as l}from"./framework-09305b5d.js";const i={},r=e(`<h1 id="_08-【云数据库】" tabindex="-1"><a class="header-anchor" href="#_08-【云数据库】" aria-hidden="true">#</a> 08 【云数据库】</h1><h2 id="_1-入门" tabindex="-1"><a class="header-anchor" href="#_1-入门" aria-hidden="true">#</a> 1 入门</h2><h3 id="_1-1-基础概念" tabindex="-1"><a class="header-anchor" href="#_1-1-基础概念" aria-hidden="true">#</a> 1.1 基础概念</h3><p><code>uniCloud</code>提供了一个 JSON 格式的文档型数据库。顾名思义，数据库中的每条记录都是一个 JSON 格式的文档。</p><p>它是 nosql 非关系型数据库，如果您之前熟悉 sql 关系型数据库，那么两者概念对应关系如下表：</p><table><thead><tr><th style="text-align:left;">关系型</th><th style="text-align:left;">JSON 文档型</th></tr></thead><tbody><tr><td style="text-align:left;">数据库 database</td><td style="text-align:left;">数据库 database</td></tr><tr><td style="text-align:left;">表 table</td><td style="text-align:left;">集合 collection。但行业里也经常称之为“表”。无需特意区分</td></tr><tr><td style="text-align:left;">行 row</td><td style="text-align:left;">记录 record / doc</td></tr><tr><td style="text-align:left;">字段 column / field</td><td style="text-align:left;">字段 field</td></tr><tr><td style="text-align:left;">使用sql语法操作</td><td style="text-align:left;">使用MongoDB语法或jql语法操作</td></tr></tbody></table><ul><li>一个<code>uniCloud</code>服务空间，有且只有一个数据库；</li><li>一个数据库可以有多个表；</li><li>一个表可以有多个记录；</li><li>一个个记录可以有多个字段。</li></ul><p>例如，数据库中有一个表，名为user，存放用户信息。表user的数据内容如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;tel&quot;</span><span class="token operator">:</span><span class="token string">&quot;13900000000&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;tel&quot;</span><span class="token operator">:</span><span class="token string">&quot;13911111111&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>复制代码</p><p>上述数据中，每行数据表示一个用户的信息，被称之为“记录(record/doc)”。name和tel称之为“字段(field)”。而“13900000000”则是第一条记录的字段tel的值。</p><p>每行记录，都是一个完整的json文档，获取到记录后可以使用常规json方式操作。但表并非json文档，表是多个json文档的汇总，获取表需要使用专门的API。</p><p>与关系型数据库的二维表格式不同，json文档数据库支持不同记录拥有不同的字段、支持多层嵌套数据。</p><p>仍然以user表举例，要在数据库中存储每个人的每次登录时间和登录ip，则变成如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;tel&quot;</span><span class="token operator">:</span><span class="token string">&quot;13900000000&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;login_log&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
		<span class="token punctuation">{</span><span class="token property">&quot;login_date&quot;</span><span class="token operator">:</span><span class="token number">1604186605445</span><span class="token punctuation">,</span><span class="token property">&quot;login_ip&quot;</span><span class="token operator">:</span><span class="token string">&quot;192.168.1.1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span><span class="token property">&quot;login_date&quot;</span><span class="token operator">:</span><span class="token number">1604186694137</span><span class="token punctuation">,</span><span class="token property">&quot;login_ip&quot;</span><span class="token operator">:</span><span class="token string">&quot;192.168.1.2&quot;</span><span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;tel&quot;</span><span class="token operator">:</span><span class="token string">&quot;13911111111&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述数据表示张三登录了2次，login_date里的值是时间戳(timestamp)格式，在数据库内timestamp就是一个数字类型的数据。而李四没有登录过。</p><p>可以看出json文档数据库相对于关系型数据库的灵活，李四可以没有login_log字段，也可以有这个字段但登录次数记录与张三不同。</p><p><em>此处仅为举例，实际业务中，登录日志单独存放在另一个表更合适</em></p>`,18),u={href:"https://uniapp.dcloud.net.cn/uniCloud/opendb",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"对于不熟悉传统数据库，但掌握json的js工程师而言，uniCloud的云数据库更亲切，没有传统数据库高昂的学习成本。",-1),k=n("p",null,[s("在uniCloud web控制台新建表时，在下面的模板中也可以选择各种"),n("code",null,"opendb"),s("表模板，直接创建。")],-1),v=n("p",null,"uniCloud同时支持阿里云和腾讯云，它们的数据库大体相同，有细微差异。阿里云的数据库是mongoDB4.0，腾讯云则使用自研的文档型数据库（兼容mongoDB 4.0版本）。uniCloud基本抹平了不同云厂商的差异，有差异的部分会在文档中单独标注。",-1),m=n("h3",{id:"_1-2-创建第一个表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-2-创建第一个表","aria-hidden":"true"},"#"),s(" 1.2 创建第一个表")],-1),b={href:"https://unicloud.dcloud.net.cn/",target:"_blank",rel:"noopener noreferrer"},h=n("li",null,"创建或进入一个已存在的服务空间，选择 云数据库->云数据库，创建一个新表",-1),g=n("p",null,[s("比如我们创建一个简历表，名为 "),n("code",null,"resume"),s("。点击上方右侧的 创建 按钮即可。")],-1),y=n("figure",null,[n("img",{src:"https://i0.hdslb.com/bfs/album/fd98acce9cd56e7a7f027824ce78e23c2bc86fec.png",alt:"image-20221014222953744",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20221014222953744")],-1),q={href:"https://uniapp.dcloud.net.cn/uniCloud/opendb",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>创建表一共有3种方式：</p><ol><li>在web控制台创建</li><li>在HBuilderX中，项目根目录/uniCloud/database点右键新建schema，上传时创建</li><li>在代码中也可以创建表，但不推荐使用。</li></ol><h3 id="_1-3-数据表的3个组成部分" tabindex="-1"><a class="header-anchor" href="#_1-3-数据表的3个组成部分" aria-hidden="true">#</a> 1.3 数据表的3个组成部分</h3><p>每个数据表，包含3个部分：</p><ul><li>data：数据内容</li><li>index：索引</li><li>schema：数据表格式定义</li></ul><p>在uniCloud的web控制台可以看到一个数据表的3部分内容。</p><ol><li>数据内容</li></ol><p>data，就是存放的数据记录(record)。里面是一条一条的json文档。</p><p>record可以增删改查、排序统计。后续有API介绍。</p><p>可以先在 web控制台 为之前的 <code>resume</code> 表创建一条记录。</p><p>输入一个json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;birth_year&quot;</span><span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>
    <span class="token property">&quot;tel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;13900000000&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan@zhangsan.com&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;intro&quot;</span><span class="token operator">:</span> <span class="token string">&quot;擅于学习，做事严谨&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/127fec1f6d75c535e4efae95492128440a12a4d8.png" alt="image-20221014223302292" tabindex="0" loading="lazy"><figcaption>image-20221014223302292</figcaption></figure><p>创建一条新记录，是不管在web控制台创建，还是通过API创建，每条记录都会自带一个<code>_id</code>字段用以作为该记录的唯一标志。</p><p><code>_id</code>字段是每个数据表默认自带且不可删除的字段。同时，它也是数据表的索引。</p><figure><img src="https://i0.hdslb.com/bfs/album/f70858494842665df88a7f6749757ca3a71665d0.png" alt="image-20221014223314145" tabindex="0" loading="lazy"><figcaption>image-20221014223314145</figcaption></figure><p>阿里云使用的是标准的mongoDB，<code>_id</code>是自增的，后创建的记录的<code>_id</code>总是大于先生成的<code>_id</code>。传统数据库的自然数自增字段在多物理机的大型数据库下很难保持同步，大型数据库均使用<code>_id</code>这种长度较长、不会重复且仍然保持自增规律的方式。</p><p><strong>腾讯云使用的是兼容mongoDB的自研数据库，<code>_id</code>并非自增</strong></p><p>插入/导入数据时也可以自行指定<code>_id</code>而不使用自动生成的<code>_id</code>，这样可以很方便的将其他数据库的数据迁移到uniCloud云数据库。</p><ol start="2"><li>数据库索引</li></ol><p>所谓索引，是指在数据表的众多字段中挑选一个或多个字段，让数据库引擎优先处理这些字段。</p><p>设置为索引的字段，在通过该字段查询(where)或排序(orderBy)时可以获得更快的查询速度。</p><p>但设置过多索引也不合适，会造成数据新增和删除变慢。</p><p>新建的表，默认只有一个索引<code>_id</code>。</p><p>一个数据表可以有多个字段被设为索引。</p><p>索引分唯一型和非唯一型。</p><p>唯一型索引要求整个数据表多个记录的该字段的值不能重复。比如<code>_id</code>就是唯一型索引。</p><p>假使有2个人都叫“张三”，那么他们在user数据表里的区分就是依靠不同的<code>_id</code>来区分。</p><p>如果我们要根据name字段来查询，为了提升查询速度，此时可以把name字段设为非唯一索引。</p>`,29),_={href:"https://uniapp.dcloud.net.cn/uniCloud/db-index",target:"_blank",rel:"noopener noreferrer"},w=e('<p><strong>在web控制台添加上述索引</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/f04106fbb0d17acbaa4a490099076f88a692dfc4.png" alt="image-20221014223441333" tabindex="0" loading="lazy"><figcaption>image-20221014223441333</figcaption></figure><p><strong>注意</strong></p><ul><li>如果记录中已经存在多个记录某字段相同的情况，那么将该字段设为唯一型索引会失败。</li><li>如果已经设置某字段为唯一索引，在新增和修改记录时如果该字段的值之前在其他记录已存在，会失败。</li><li>假如记录中不存在某个字段，则对索引字段来说其值默认为 null，如果该索引字段设为唯一型索引，则不允许存在两个或以上的该字段为null或不存在该字段的记录。此时需要设置稀疏索引来解决多个null重复的问题</li></ul><ol start="3"><li>数据表格式定义</li></ol><p><code>DB Schema</code>是表结构描述。描述数据表有哪些字段、值域类型是什么、是否必填、数据操作权限等很多内容。</p><p>因为 MongoDB 的灵活性，理论上<code>DB Schema</code>不是必须的，使用传统 MongoDB API 操作数据库不需要<code>DB Schema</code>。</p><p>但如果使用 JQL，那<code>DB Schema</code>就是必须的。</p>',8),j=n("code",null,"DB Schema",-1),x={href:"https://uniapp.dcloud.net.cn/uniCloud/schema",target:"_blank",rel:"noopener noreferrer"},C=e(`<h3 id="_1-4-获取数据库对象的api" tabindex="-1"><a class="header-anchor" href="#_1-4-获取数据库对象的api" aria-hidden="true">#</a> 1.4 获取数据库对象的API</h3><p>想要通过代码操作数据库，第一步要获取服务空间里的数据库对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//代码块为cdb</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>js中敲下代码块<code>cdb</code>，即可快速输入上述代码。</p>`,4),B={href:"https://uniapp.dcloud.net.cn/uniCloud/jql-cloud#use-in-object",target:"_blank",rel:"noopener noreferrer"},A=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 云函数中JQL使用示例</span>
<span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> dbJQL <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">databaseForJQL</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token comment">// 获取JQL database引用，此处需要传入云函数的event和context，必传</span>
		event<span class="token punctuation">,</span>
		context 
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token punctuation">{</span>
		dbJQL<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;book&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 直接执行数据库操作</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-创建集合-表的api" tabindex="-1"><a class="header-anchor" href="#_1-5-创建集合-表的api" aria-hidden="true">#</a> 1.5 创建集合/表的API</h3><ul><li>阿里云</li></ul><p>调用add方法，给某数据表新增数据记录时，如果该数据表不存在，会自动创建该数据表。如下代码给table1数据表新增了一条数据，如果table1不存在，会自动创建。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&quot;table1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Ben&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>腾讯云</li></ul><p>腾讯云提供了专门的创建数据表的API，此API仅支持云函数内运行，不支持clientDB调用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">createCollection</span><span class="token punctuation">(</span><span class="token string">&quot;table1&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p><ul><li>如果数据表已存在，腾讯云调用createCollection方法会报错</li><li>腾讯云调用collection的add方法不会自动创建数据表，不存在的数据表会报错</li><li>阿里云没有createCollection方法</li><li><strong>使用代码方式创建的表没有索引、schema，性能和功能都受影响，不建议使用这种方式</strong></li></ul><h2 id="_2-云函数通过传统方式操作数据库" tabindex="-1"><a class="header-anchor" href="#_2-云函数通过传统方式操作数据库" aria-hidden="true">#</a> 2 云函数通过传统方式操作数据库</h2><h3 id="_2-1-获取集合的引用" tabindex="-1"><a class="header-anchor" href="#_2-1-获取集合的引用" aria-hidden="true">#</a> 2.1 获取集合的引用</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取 \`user\` 集合的引用</span>
<span class="token keyword">const</span> collection <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>集合 Collection</li></ol><p>通过 <code>db.collection(name)</code> 可以获取指定集合的引用，在集合上可以进行以下操作</p><table><thead><tr><th>类型</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>写</td><td>add</td><td>新增记录（触发请求）</td></tr><tr><td>计数</td><td>count</td><td>获取符合条件的记录条数</td></tr><tr><td>读</td><td>get</td><td>获取集合中的记录，如果有使用 where 语句定义查询条件，则会返回匹配结果集 (触发请求)</td></tr><tr><td>引用</td><td>doc</td><td>获取对该集合中指定 id 的记录的引用</td></tr><tr><td>查询条件</td><td>where</td><td>通过指定条件筛选出匹配的记录，可搭配查询指令（eq, gt, in, ...）使用</td></tr><tr><td></td><td>skip</td><td>跳过指定数量的文档，常用于分页，传入 offset</td></tr><tr><td></td><td>orderBy</td><td>排序方式</td></tr><tr><td></td><td>limit</td><td>返回的结果集(文档数量)的限制，有默认值和上限值</td></tr><tr><td></td><td>field</td><td>指定需要返回的字段</td></tr></tbody></table><p>查询及更新指令用于在 <code>where</code> 中指定字段需满足的条件，指令可通过 <code>db.command</code> 对象取得。</p><ol start="2"><li>记录 Record / Document</li></ol><p>通过 <code>db.collection(collectionName).doc(docId)</code> 可以获取指定集合上指定 _id 的记录的引用，在记录上可以进行以下操作</p><table><thead><tr><th>接口</th><th>说明</th><th></th></tr></thead><tbody><tr><td>写</td><td>update</td><td>局部更新记录(触发请求)只更新传入的字段。如果被更新的记录不存在，会直接返回更新失败</td></tr><tr><td></td><td>set</td><td>覆写记录;会删除操作的记录中的所有字段，创建传入的字段。如果操作的记录不存在，会自动创建新的记录</td></tr><tr><td></td><td>remove</td><td>删除记录(触发请求)</td></tr><tr><td>读</td><td>get</td><td>获取记录(触发请求)</td></tr></tbody></table><p>doc(docId)方法的参数只能是字符串，即数据库默认的_id字段。</p><p>如需要匹配多个<code>_id</code>的记录，应使用where方法。可以在where方法里用in指令匹配一个包含<code>_id</code>的数组。</p><p>新增文档时数据库会自动生成_id字段，也可以自行将_id设置为其他值</p><ol start="3"><li>查询筛选指令 Query Command</li></ol><p>以下指令挂载在 <code>db.command</code> 下</p><table><thead><tr><th>类型</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>比较运算</td><td>eq</td><td>字段等于 ==</td></tr><tr><td></td><td>neq</td><td>字段不等于 !=</td></tr><tr><td></td><td>gt</td><td>字段大于 &gt;</td></tr><tr><td></td><td>gte</td><td>字段大于等于 &gt;=</td></tr><tr><td></td><td>lt</td><td>字段小于 &lt;</td></tr><tr><td></td><td>lte</td><td>字段小于等于 &lt;=</td></tr><tr><td></td><td>in</td><td>字段值在数组里</td></tr><tr><td></td><td>nin</td><td>字段值不在数组里</td></tr><tr><td>逻辑运算</td><td>and</td><td>表示需同时满足指定的所有条件</td></tr><tr><td></td><td>or</td><td>表示需同时满足指定条件中的至少一个</td></tr></tbody></table>`,26),D={href:"https://blog.csdn.net/xinghebuluo/article/details/7012788/",target:"_blank",rel:"noopener noreferrer"},N=e(`<ol start="4"><li>字段更新指令 Update Command</li></ol><p>以下指令挂载在 <code>db.command</code> 下</p><table><thead><tr><th>类型</th><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>字段</td><td>set</td><td>设置字段值</td></tr><tr><td></td><td>remove</td><td>删除字段</td></tr><tr><td></td><td>inc</td><td>加一个数值，原子自增</td></tr><tr><td></td><td>mul</td><td>乘一个数值，原子自乘</td></tr><tr><td></td><td>push</td><td>数组类型字段追加尾元素，支持数组</td></tr><tr><td></td><td>pop</td><td>数组类型字段删除尾元素，支持数组</td></tr><tr><td></td><td>shift</td><td>数组类型字段删除头元素，支持数组</td></tr><tr><td></td><td>unshift</td><td>数组类型字段追加头元素，支持数组</td></tr></tbody></table><h3 id="_2-2-新增文档" tabindex="-1"><a class="header-anchor" href="#_2-2-新增文档" aria-hidden="true">#</a> 2.2 新增文档</h3><p><strong>方法1： collection.add(data)</strong></p><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>object | array</td><td>是</td><td>{_id: &#39;10001&#39;, &#39;name&#39;: &#39;Ben&#39;} _id 非必填</td></tr></tbody></table><p>响应参数</p><p>单条插入时</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>插入记录的id</td></tr></tbody></table><p>批量插入时</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>ids</td><td>Array</td><td>批量插入所有记录的id</td></tr></tbody></table><p>示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> collection <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;unicloud-test&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 单条插入数据</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Ben&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 批量插入数据</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alex&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Ben&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方法2： collection.doc().set(data)</strong></p><p>也可通过 <code>set</code> 方法新增一个文档，需先取得文档引用再调用 <code>set</code> 方法。 如果文档不存在，<code>set</code> 方法会创建一个新文档。</p><p><strong>参数说明</strong></p>`,17),E=n("table",{"name:":"",Ben:""},[n("thead",null,[n("tr",null,[n("th",null,"参数"),n("th",null,"类型"),n("th",null,"必填"),n("th",null,"说明")])]),n("tbody",null,[n("tr",null,[n("td",null,"data"),n("td",null,"object"),n("td",null,"是"),n("td",null,"更新字段的Object，")])])],-1),S=e(`<p><strong>响应参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>updated</td><td>Number</td><td>更新成功条数，数据更新前后没变化时也会返回1</td></tr><tr><td>upsertedId</td><td>String</td><td>创建的文档id</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">&#39;doc-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Hey&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-查询文档" tabindex="-1"><a class="header-anchor" href="#_2-3-查询文档" aria-hidden="true">#</a> 2.3 查询文档</h3><p>支持 <code>where()</code>、<code>limit()</code>、<code>skip()</code>、<code>orderBy()</code>、<code>get()</code>、<code>field()</code>、<code>count()</code> 等操作。</p><p>只有当调用<code>get()</code>时才会真正发送查询请求。</p><p>limit，即返回记录的最大数量，默认值为100，也就是不设置limit的情况下默认返回100条数据。</p><p>设置limit有最大值，腾讯云限制为最大1000条，阿里云限制为最大500条。</p><p>如需查询更多数据，需要分页多次查询。</p><p><strong>get响应参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>Array</td><td>查询结果数组</td></tr></tbody></table><h4 id="_2-3-1-添加查询条件" tabindex="-1"><a class="header-anchor" href="#_2-3-1-添加查询条件" aria-hidden="true">#</a> 2.3.1 添加查询条件</h4><p>collection.where()</p><p><strong>在聚合操作中请使用match</strong></p><p>设置过滤条件，where 可接收对象作为参数，表示筛选出拥有和传入对象相同的 key-value 的文档。比如筛选出所有类型为计算机的、内存为 8g 的商品：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">&#39;computer&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">memory</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要表达更复杂的查询，可使用高级查询指令，比如筛选出所有内存大于 8g 的计算机商品：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dbCmd <span class="token operator">=</span> db<span class="token punctuation">.</span>command <span class="token comment">// 取指令</span>
db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">&#39;computer&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">memory</span><span class="token operator">:</span> dbCmd<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 表示大于 8</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在SQL里使用字符串表达式操作。但在NOSQL中使用json操作。这使得 等于 的表达，从 <code>=</code> 变成了 <code>:</code>；而大于的表达，从 <code>&gt;</code> 变成了 <code>dbCmd.gt()</code></p>`,19),I={href:"https://uniapp.dcloud.io/uniCloud/cf-database-dbcmd?id=%E6%9F%A5%E8%AF%A2%E7%AD%9B%E9%80%89%E6%8C%87%E4%BB%A4-query-command",target:"_blank",rel:"noopener noreferrer"},L=e(`<p><code>where</code> 还可以使用正则表达式来查询文档，比如一下示例查询所有<code>name</code>字段以ABC开头的用户</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;^ABC&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>按照数组内的值查询</strong></p><p>mongoDB内按照数组内的值查询可以使用多种写法，以下面的数据为例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;item-1&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;item-2&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token punctuation">{</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;item-3&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;item-4&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想查询arr内第一个元素的name为item-1的记录可以使用如下写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&#39;arr.0.name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;item-1&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

res <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;item-1&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;item-2&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想查询arr内某个元素的name为item-1的记录（可以是数组内的任意一条name为item-1）可以使用如下写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token string-property property">&#39;arr.name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;item-1&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

res <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;item-1&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;item-2&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-2-获取查询数量" tabindex="-1"><a class="header-anchor" href="#_2-3-2-获取查询数量" aria-hidden="true">#</a> 2.3.2 获取查询数量</h4><p>collection.count()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;goods&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token string">&#39;computer&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">memory</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应参数</p><table><thead><tr><th>字段</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>total</td><td>Number</td><td>否</td><td>计数结果</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>数据量很大的情况下，带条件运算count全表的性能会很差，尽量使用其他方式替代，比如新增一个字段专门用来存放总数。不加条件时count全表不存在性能问题。</li></ul><h4 id="_2-3-3-设置记录数量" tabindex="-1"><a class="header-anchor" href="#_2-3-3-设置记录数量" aria-hidden="true">#</a> 2.3.3 设置记录数量</h4><p>collection.limit()</p><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>Number</td><td>是</td><td>返回的数据条数</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 只返回第一条记录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong></p><ul><li>limit不设置的情况下默认返回100条数据；设置limit有最大值，腾讯云限制为最大1000条，阿里云限制为最大500条。</li></ul><h4 id="_2-3-4-设置起始位置" tabindex="-1"><a class="header-anchor" href="#_2-3-4-设置起始位置" aria-hidden="true">#</a> 2.3.4 设置起始位置</h4><p>collection.skip(value)</p><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>Number</td><td>是</td><td>跳过指定的位置，从位置之后返回数据</td></tr></tbody></table><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,29),R={href:"https://uniapp.dcloud.net.cn/uniCloud/db-performance#skip",target:"_blank",rel:"noopener noreferrer"},J=e(`<h4 id="_2-3-5-对结果排序" tabindex="-1"><a class="header-anchor" href="#_2-3-5-对结果排序" aria-hidden="true">#</a> 2.3.5 对结果排序</h4><p>collection.orderBy(field, orderType)</p><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>field</td><td>string</td><td>是</td><td>排序的字段</td></tr><tr><td>orderType</td><td>string</td><td>是</td><td>排序的顺序，升序(asc) 或 降序(desc)</td></tr></tbody></table><p>如果需要对嵌套字段排序，需要用 &quot;点表示法&quot; 连接嵌套字段，比如 style.color 表示字段 style 里的嵌套字段 color。</p><p>同时也支持按多个字段排序，多次调用 orderBy 即可，多字段排序时的顺序会按照 orderBy 调用顺序先后对多个字段排序</p><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;asc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong></p><ul><li>排序字段存在多个重复的值时排序后的分页结果，可能会出现某条记录在上一页出现又在下一页出现的情况。这时候可以通过指定额外的排序条件比如<code>.orderBy(&quot;name&quot;, &quot;asc&quot;).orderBy(&quot;_id&quot;, &quot;asc&quot;)</code>来规避这种情况。</li></ul><h4 id="_2-3-6-指定返回字段" tabindex="-1"><a class="header-anchor" href="#_2-3-6-指定返回字段" aria-hidden="true">#</a> 2.3.6 指定返回字段</h4><p>collection.field()</p><p>从查询结果中，过滤掉不需要的字段，或者指定要返回的字段。</p><p>参数说明</p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>-</td><td>object</td><td>是</td><td>过滤字段对象，包含字段名和策略，不返回传false，返回传true</td></tr></tbody></table><p>使用示例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>collection<span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//只返回age字段、_id字段，其他字段不返回</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong></p><ul><li>field内指定是否返回某字段时，不可混用true/false。即{&#39;a&#39;: true, &#39;b&#39;: false}是一种错误的参数格式</li><li>只有使用{ &#39;_id&#39;: false }明确指定不要返回_id时才会不返回_id字段，否则_id字段一定会返回。</li></ul><h4 id="_2-3-7-查询指令" tabindex="-1"><a class="header-anchor" href="#_2-3-7-查询指令" aria-hidden="true">#</a> 2.3.7 查询指令</h4><p>查询指令以dbCmd.开头，包括等于、不等于、大于、大于等于、小于、小于等于、in、nin、and、or。</p>`,21),Q={href:"https://uniapp.dcloud.net.cn/uniCloud/cf-database.html#query",target:"_blank",rel:"noopener noreferrer"},H=e(`<h4 id="_2-3-8-正则表达式查询" tabindex="-1"><a class="header-anchor" href="#_2-3-8-正则表达式查询" aria-hidden="true">#</a> 2.3.8 正则表达式查询</h4><p>根据正则表达式进行筛选</p><p>例如下面可以筛选出 <code>version</code> 字段开头是 &quot;数字+s&quot; 的记录，并且忽略大小写：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可以直接使用正则表达式</span>
db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;articles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\ds</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 也可以使用new RegExp</span>
db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;^\\\\ds&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 或者使用new db.RegExp，这种方式阿里云不支持</span>
db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;articles&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">db<span class="token punctuation">.</span>RegExp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">regex</span><span class="token operator">:</span> <span class="token string">&#39;^\\\\ds&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// 正则表达式为 /^\\ds/，转义后变成 &#39;^\\\\ds&#39;</span>
    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token string">&#39;i&#39;</span>    <span class="token comment">// i表示忽略大小写</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-9-查询数组字段" tabindex="-1"><a class="header-anchor" href="#_2-3-9-查询数组字段" aria-hidden="true">#</a> 2.3.9 查询数组字段</h4>`,5),z={href:"https://uniapp.dcloud.net.cn/uniCloud/cf-database.html#querywitharr",target:"_blank",rel:"noopener noreferrer"},P=e(`<h3 id="_2-4-删除文档" tabindex="-1"><a class="header-anchor" href="#_2-4-删除文档" aria-hidden="true">#</a> 2.4 删除文档</h3><p><strong>方式1 通过指定文档ID删除</strong></p><p>collection.doc(_id).remove()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 清理全部数据</span>
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">document</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式2 条件查找文档然后直接批量删除</strong></p><p>collection.where().remove()</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 删除字段a的值大于2的文档</span>
<span class="token keyword">const</span> dbCmd <span class="token operator">=</span> db<span class="token punctuation">.</span>command
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> dbCmd<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 清理全部数据</span>
<span class="token keyword">const</span> dbCmd <span class="token operator">=</span> db<span class="token punctuation">.</span>command
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">_id</span><span class="token operator">:</span> dbCmd<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应参数</p><table><thead><tr><th>字段</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>deleted</td><td>Number</td><td>否</td><td>删除的记录数量</td></tr></tbody></table><p>示例：判断删除成功或失败，打印删除的记录数量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&quot;table1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">&quot;5f79fdb337d16d0001899566&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;删除成功，删除条数为: &quot;</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span>deleted<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> err<span class="token punctuation">.</span>message <span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-更新文档" tabindex="-1"><a class="header-anchor" href="#_2-5-更新文档" aria-hidden="true">#</a> 2.5 更新文档</h3><h4 id="_2-5-1-更新指定文档" tabindex="-1"><a class="header-anchor" href="#_2-5-1-更新指定文档" aria-hidden="true">#</a> 2.5.1 更新指定文档</h4><p><strong>使用腾讯云时更新方法必须搭配doc、where方法使用，<code>db.collection(&#39;test&#39;).update()</code>会报如下错误：<code>param should have required property &#39;query&#39;</code></strong></p><p>collection.doc().update(Object data)</p><blockquote><p>未使用set、remove更新操作符的情况下，此方法不会删除字段，仅将更新数据和已有数据合并。</p></blockquote><p><strong>参数说明</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>object</td><td>是</td><td>更新字段的Object，{&#39;name&#39;: &#39;Ben&#39;} _id 非必填</td></tr></tbody></table><p><strong>响应参数</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>updated</td><td>Number</td><td>更新成功条数，数据更新前后没变化时会返回0</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">&#39;doc-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Hey&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">fav</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 更新前</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;doc-id&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;fav&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;follow&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更新后</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;doc-id&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hey&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;fav&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;follow&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新数组时，已数组下标作为key即可，比如以下示例将数组arr内下标为1的值修改为 uniCloud</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">&#39;doc-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;uniCloud&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 更新前</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;doc-id&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;arr&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// 更新后</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;doc-id&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;arr&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uniCloud&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-2-更新文档-如果不存在则创建" tabindex="-1"><a class="header-anchor" href="#_2-5-2-更新文档-如果不存在则创建" aria-hidden="true">#</a> 2.5.2 更新文档，如果不存在则创建</h4><p>collection.doc().set()</p><p><strong>注意：</strong></p><blockquote><p>此方法会覆写已有字段，需注意与<code>update</code>表现不同，比如以下示例执行<code>set</code>之后<code>follow</code>字段会被删除</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">&#39;doc-id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Hey&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">fav</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 更新前</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;doc-id&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;fav&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">&quot;follow&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更新后</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;doc-id&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hey&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;fav&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-3-批量更新文档" tabindex="-1"><a class="header-anchor" href="#_2-5-3-批量更新文档" aria-hidden="true">#</a> 2.5.3 批量更新文档</h4><p><code>collection.update()</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> dbCmd <span class="token operator">=</span> db<span class="token punctuation">.</span>command
<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> collection<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> dbCmd<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&#39;hey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-4-更新并返回更新后的数据" tabindex="-1"><a class="header-anchor" href="#_2-5-4-更新并返回更新后的数据" aria-hidden="true">#</a> 2.5.4 更新并返回更新后的数据</h4><blockquote><p>新增于HBuilderX 3.2.0</p></blockquote><p>此接口仅会操作一条数据，有多条数据匹配的情况下会只更新匹配的第一条并返回</p><p><strong>示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> db <span class="token operator">=</span> uniCloud<span class="token punctuation">.</span><span class="token function">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">uid</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateAndReturn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">score</span><span class="token operator">:</span> db<span class="token punctuation">.</span>command<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 更新前</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">uid</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token comment">// 更新后</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">uid</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span>

<span class="token comment">// 接口返回值</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">updated</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">doc</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token string">&#39;xx&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">uid</span><span class="token operator">:</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p><ul><li>使用updateAndReturn时，不可使用field方法</li><li>可以在事务中使用，可以使用<code>transaction.where().updateAndReturn()</code>以及<code>transaction.doc().updateAndReturn()</code></li><li>不同于update接口，此接口返回的updated不表示数据真的进行了更新</li><li>腾讯云暂不支持<code>doc().updateAndReturn()</code>的写法可以使用<code>where().updateAndReturn()</code>替代</li></ul><h4 id="_2-5-5-更新数组内指定下标的元素" tabindex="-1"><a class="header-anchor" href="#_2-5-5-更新数组内指定下标的元素" aria-hidden="true">#</a> 2.5.5 更新数组内指定下标的元素</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;query&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 更新students[1]</span>
  <span class="token punctuation">[</span><span class="token string">&#39;students.&#39;</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;wang&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 更新前</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;students&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhang&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;li&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更新后</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;students&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhang&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wang&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-6-更新数组内匹配条件的元素" tabindex="-1"><a class="header-anchor" href="#_2-5-6-更新数组内匹配条件的元素" aria-hidden="true">#</a> 2.5.6 更新数组内匹配条件的元素</h4><p><strong>注意：只可确定数组内只会被匹配到一个的时候使用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">&#39;query&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token string-property property">&#39;students.id&#39;</span><span class="token operator">:</span> <span class="token string">&#39;001&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 将students内id为001的name改为li，$代表where内匹配到的数组项的序号</span>
	<span class="token string-property property">&#39;students.$.name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 更新前</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;students&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;001&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhang&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;002&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wang&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更新后</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;students&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;001&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;li&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;002&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wang&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-7-更新操作符" tabindex="-1"><a class="header-anchor" href="#_2-5-7-更新操作符" aria-hidden="true">#</a> 2.5.7 更新操作符</h4>`,49),O={href:"https://uniapp.dcloud.net.cn/uniCloud/cf-database.html#dbcmd",target:"_blank",rel:"noopener noreferrer"},T={href:"https://uniapp.dcloud.net.cn/uniCloud/cf-database.html#update-operator",target:"_blank",rel:"noopener noreferrer"};function V(F,M){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("对于初学者，如果不了解数据库设计，可以参考"),n("a",u,[s("opendb"),t(a)]),s("，已经预置了大量常见的数据库设计。")]),d,k,v,m,n("ol",null,[n("li",null,[s("打开 uniCloud web控制台 "),n("a",b,[s("https://unicloud.dcloud.net.cn/(opens new window)"),t(a)])]),h]),g,y,n("p",null,[s("新建表时，支持选择现成的 "),n("a",q,[s("opendb"),t(a)]),s(" 表模板，选择一个或多个模板表，可以点击右下方按钮创建。")]),f,n("p",null,[s("索引内容较多，还有“组合索引”、“稀疏索引”、“地理位置索引”、“TTL索引”等概念。有单独的文档详细讲述索引，另见："),n("a",_,[s("数据库索引"),t(a)])]),w,n("p",null,[j,s("涉及内容较多，另见文档："),n("a",x,[s("https://uniapp.dcloud.io/uniCloud/schema"),t(a)])]),C,n("p",null,[s("其中，云函数内使用JQL扩展库时，还需要做一个工作，就是指定操作用户身份。"),n("a",B,[s("详见"),t(a)])]),A,n("p",null,[s("如果你熟悉SQL，可查询"),n("a",D,[s("mongodb与sql语句对照表 (opens new window)"),t(a)]),s("进行学习。")]),N,E,S,n("p",null,[s("所有的比较符，详见"),n("a",I,[s("表格(opens new window)"),t(a)])]),L,n("p",null,[n("strong",null,[s("注意：数据量很大的情况下，skip性能会很差，尽量使用其他方式替代，参考："),n("a",R,[s("skip性能优化"),t(a)])])]),J,n("p",null,[n("a",Q,[s("uni-app官网 (dcloud.net.cn)"),t(a)])]),H,n("p",null,[n("a",z,[s("uni-app官网 (dcloud.net.cn)"),t(a)])]),P,n("p",null,[s("更多数据库操作符请查看"),n("a",O,[s("数据库操作符"),t(a)])]),n("p",null,[n("a",T,[s("uni-app官网 (dcloud.net.cn)"),t(a)])])])}const $=p(i,[["render",V],["__file","08.html.vue"]]);export{$ as default};
