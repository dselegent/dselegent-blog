import{ab as n,G as s,H as a,ac as e}from"./framework-844b12a4.js";const t={},l=e(`<h1 id="_09-【实操篇-磁盘查看和分区类】" tabindex="-1"><a class="header-anchor" href="#_09-【实操篇-磁盘查看和分区类】" aria-hidden="true">#</a> 09 【实操篇-磁盘查看和分区类】</h1><h2 id="_1-du-查看文件和目录占用的磁盘空间" tabindex="-1"><a class="header-anchor" href="#_1-du-查看文件和目录占用的磁盘空间" aria-hidden="true">#</a> 1.du 查看文件和目录占用的磁盘空间</h2><p>du: disk usage 磁盘占用情况</p><p>du 是统计目录或文件所占磁盘空间大小的命令。</p><p>需要注意的是，使用&quot;ls -r&quot;命令是可以看到文件的大小的。但是大家会发现，在使用&quot;ls -r&quot;命令査看目录大小时，目录的大小多数是 4KB，这是因为目录下的子目录名和子文件名是保存到父目录的 block（默认大小为 4KB）中的，如果父目录下的子目录和子文件并不多，一个 block 就能放下，那么这个父目录就只占用了一个 block 大小。</p><p>大家可以将其想象成图书馆的书籍目录和实际书籍。如果我们用&quot;ls-l&quot;命令査看，则只能看到这些书籍占用了 1 页纸的书籍目录，但是实际书籍到底有多少是看不到的，哪怕它堆满了几个房间。</p><p>但是我们在统计目录时，不是想看父目录下的子目录名和子文件名到底占用了多少空间，而是想看父目录下的子目录和子文件的总磁盘占用量大小，这时就需要使用 du 命令才能统计目录的真正磁盘占用量大小。</p><p>du 命令的格式如下：</p><p><code>[root@localhost ~]# du [选项] [目录或文件名]</code></p><p>选项：</p><ul><li>-a：显示每个子文件的磁盘占用量。默认只统计子目录的磁盘占用量</li><li>-h：使用习惯单位显示磁盘占用量，如 KB、MB 或 GB 等；</li><li>-s：统计总磁盘占用量，而不列出子目录和子文件的磁盘占用量</li></ul><p><strong>【例 1】</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># du</span>
<span class="token comment">#统计当前目录的总磁盘占用量大小，同时会统计当前目录下所有子目录的磁盘占用量大小，不统计子文件</span>
<span class="token comment">#磁盘占用量的大小。默认单位为KB</span>
<span class="token number">20</span> ./.gnupg
<span class="token comment">#统计每个子目录的大小</span>
<span class="token number">24</span> ./yum.bak
<span class="token number">8</span> ./dtest
<span class="token number">28</span> ./sh
<span class="token number">188</span>
<span class="token comment">#统计当前目录总大小</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【例 2】</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># du -a</span>
<span class="token comment">#统计当前目录的总大小，同时会统计当前目录下所有子文件和子目录磁盘占用量的大小。默认单位为 KB</span>

<span class="token number">4</span> ./.bashjogout
<span class="token number">36</span> ./install.log
<span class="token number">4</span> ./.bash_profile
<span class="token number">4</span> ./.cshrc
…省略部分输出…
<span class="token number">188</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【例 3】</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># du -sh</span>
<span class="token comment">#只统计磁盘占用量总的大小，同时使用习惯单位显示</span>
188K <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-df-查看磁盘空间使用情况" tabindex="-1"><a class="header-anchor" href="#_2-df-查看磁盘空间使用情况" aria-hidden="true">#</a> 2.df 查看磁盘空间使用情况</h2><p>df: disk free 空余磁盘</p><p>df 命令，用于显示 Linux 系统中各文件系统的硬盘使用情况，包括文件系统所在硬盘分区的总容量、已使用的容量、剩余容量等。</p><p>df 命令主要读取的数据几乎都针对的是整个文件系统。</p><p>df 命令的基本格式为：</p><p><code>[root@localhost ~]# df [选项] [目录或文件名]</code></p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有文件系统信息，包括系统特有的 /proc、/sysfs 等文件系统；</td></tr><tr><td>-m</td><td>以 MB 为单位显示容量；</td></tr><tr><td>-k</td><td>以 KB 为单位显示容量，默认以 KB 为单位；</td></tr><tr><td>-h</td><td>使用人们习惯的 KB、MB 或 GB 等单位自行显示容量；</td></tr><tr><td>-T</td><td>显示该分区的文件系统名称；</td></tr><tr><td>-i</td><td>不用硬盘容量显示，而是以含有 inode 的数量来显示。</td></tr></tbody></table><p>【例 1】</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df</span>
Filesystem      1K-blocks      Used Available Use% Mounted on
/dev/hdc2         <span class="token number">9920624</span>   <span class="token number">3823112</span>   <span class="token number">5585444</span>  <span class="token number">41</span>% /
/dev/hdc3         <span class="token number">4956316</span>    <span class="token number">141376</span>   <span class="token number">4559108</span>   <span class="token number">4</span>% /home
/dev/hdc1          <span class="token number">101086</span>     <span class="token number">11126</span>     <span class="token number">84741</span>  <span class="token number">12</span>% /boot
tmpfs              <span class="token number">371332</span>         <span class="token number">0</span>    <span class="token number">371332</span>   <span class="token number">0</span>% /dev/shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不使用任何选项的 df 命令，默认会将系统内所有的文件系统信息，以 KB 为单位显示出来。</p><p>本例中，由 df 命令显示出的各列信息的含义分别是：</p><ul><li>Filesystem：表示该文件系统位于哪个分区，因此该列显示的是设备名称；</li><li>1K-blocks：此列表示文件系统的总大小，默认以 KB 为单位；</li><li>Used：表示用掉的硬盘空间大小；</li><li>Available：表示剩余的硬盘空间大小；</li><li>Use%：硬盘空间使用率。如果使用率高达 90% 以上，就需要额外注意，因为容量不足，会严重影响系统的正常运行；</li><li>Mounted on：文件系统的挂载点，也就是硬盘挂载的目录位置。</li></ul><p>【例 2】</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -h</span>
Filesystem            Size  Used Avail Use% Mounted on
/dev/hdc2             <span class="token number">9</span>.5G  <span class="token number">3</span>.7G  <span class="token number">5</span>.4G  <span class="token number">41</span>% /
/dev/hdc3             <span class="token number">4</span>.8G  139M  <span class="token number">4</span>.4G   <span class="token number">4</span>% /home
/dev/hdc1              99M   11M   83M  <span class="token number">12</span>% /boot
tmpfs                 363M     <span class="token number">0</span>  363M   <span class="token number">0</span>% /dev/shm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同例 1 不同，这里使用了 -h 选项，因此文件系统的各种容量数据，会以人们习惯的单位（通常使用 GB 或 MB）显示出来。</p><p>【例 3】</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># df -h /etc</span>
Filesystem            Size  Used Avail Use% Mounted on
/dev/hdc2             <span class="token number">9</span>.5G  <span class="token number">3</span>.7G  <span class="token number">5</span>.4G  <span class="token number">41</span>% /
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同之前的 2 个例子不同，这里在 df 命令后添加了目录名，在这种情况下，df 命令会自动分析该目录所在的分区，并将所在分区的有关信息显示出来。由此，我们就可以知道，该目录下还可以使用多少容量。</p><p>【例 4】</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[root@localhost ~]# df -aT
Filesystem    Type 1K-blocks    Used Available Use% Mounted on
/dev/hdc2     ext3   9920624 3823112   5585444  41% /
proc          proc         0       0         0   -  /proc
sysfs        sysfs         0       0         0   -  /sys
devpts      devpts         0       0         0   -  /dev/pts
/dev/hdc3     ext3   4956316  141376   4559108   4% /home
/dev/hdc1     ext3    101086   11126     84741  12% /boot
tmpfs        tmpfs    371332       0    371332   0% /dev/shm
none   binfmt_misc         0       0         0   -  /proc/sys/fs/binfmt_misc
sunrpc  rpc_pipefs         0       0         0   -  /var/lib/nfs/rpc_pipefs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，使用 -a 选项，会将很多特殊的文件系统显示出来，这些文件系统包含的大多是系统数据，存在于内存中，不会占用硬盘空间，因此你会看到，它们所占据的硬盘总容量为 0。</p><h2 id="_3-du命令和df命令的区别" tabindex="-1"><a class="header-anchor" href="#_3-du命令和df命令的区别" aria-hidden="true">#</a> 3.du命令和df命令的区别</h2><p>有时我们会发现，使用 du 命令和 df 命令去统计分区的使用情况时，得到的数据是不一样的。那是因为df命令是从文件系统的角度考虑的，通过文件系统中未分配的空间来确定文件系统中已经分配的空间大小。也就是说，在使用 df 命令统计分区时，不仅要考虑文件占用的空间，还要统计被命令或程序占用的空间（最常见的就是文件已经删除，但是程序并没有释放空间）。</p><p>而 du 命令是面向文件的，只会计算文件或目录占用的磁盘空间。也就是说，df 命令统计的分区更准确，是真正的空闲空间。</p><h2 id="_4-lsblk-查看设备挂载情况" tabindex="-1"><a class="header-anchor" href="#_4-lsblk-查看设备挂载情况" aria-hidden="true">#</a> 4.lsblk 查看设备挂载情况</h2><p>lsblk命令的英文是“list block”，即用于列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。块设备有硬盘，闪存盘，CD-ROM等等。lsblk命令包含在util-linux-ng包中，现在该包改名为util-linux。</p><p>【例1】列出所有块设备</p><p>直接输入lsblk命令和lsblk -a输出相同</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@test1 ~<span class="token punctuation">]</span><span class="token comment"># lsblk</span>
NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
sda <span class="token number">8</span>:0 <span class="token number">0</span> 40G <span class="token number">0</span> disk
├─sda1 <span class="token number">8</span>:1 <span class="token number">0</span> 300M <span class="token number">0</span> part /boot
├─sda2 <span class="token number">8</span>:2 <span class="token number">0</span> 2G <span class="token number">0</span> part <span class="token punctuation">[</span>SWAP<span class="token punctuation">]</span>
└─sda3 <span class="token number">8</span>:3 <span class="token number">0</span> <span class="token number">37</span>.7G <span class="token number">0</span> part /
sr0 <span class="token number">11</span>:0 <span class="token number">1</span> 1024M <span class="token number">0</span> rom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>NAME：这是块设备名。</li><li>MAJ:MIN：本栏显示主要和次要设备号。</li><li>RM：本栏显示设备是否可移动设备。注意，在本例中设备</li><li>sdb和sr0的RM值等于1，这说明他们是可移动设备。</li><li>SIZE：本栏列出设备的容量大小信息。例如298.1G表明该设备大小为298.1GB，而1K表明该设备大小为1KB。</li><li>RO：该项表明设备是否为只读。在本案例中，所有设备的</li><li>RO值为0，表明他们不是只读的。</li><li>TYPE：本栏显示块设备是否是磁盘或磁盘上的一个分区。在本例中，sda和sdb是磁盘，而sr0是只读存储（rom）。</li><li>MOUNTPOINT：本栏指出设备挂载的挂载点。</li></ul><h2 id="_5-mount-umount-挂载-卸载" tabindex="-1"><a class="header-anchor" href="#_5-mount-umount-挂载-卸载" aria-hidden="true">#</a> 5.mount/umount 挂载/卸载</h2><p>对于Linux用户来讲，不论有几个分区，分别分给哪一个目录使用，它总归就是一个根 目录、一个独立且唯一的文件结构。</p><p>Linux中每个分区都是用来组成整个文件系统的一部分，它在用一种叫做“挂载”的处理 方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来， 要载入的那个分区将使它的存储空间在这个目录下获得。</p><h3 id="_5-1-mount-挂载" tabindex="-1"><a class="header-anchor" href="#_5-1-mount-挂载" aria-hidden="true">#</a> 5.1 mount 挂载</h3><p>所有的硬件设备必须挂载之后才能使用，只不过，有些硬件设备（比如硬盘分区）在每次系统启动时会自动挂载，而有些（比如 U 盘、光盘）则需要手动进行挂载。</p><p>通过学习 Linux 文件系统，我们可以对挂载的含义进行引申，挂载指的是将硬件设备的文件系统和 Linux 系统中的文件系统，通过指定目录（作为挂载点）进行关联。而要将文件系统挂载到 Linux 系统上，就需要使用 mount 挂载命令。</p><p>mount 命令的常用格式有以下几种：</p><p><code>[root@localhost ~]# mount [-l]</code></p><p>单纯使用 mount 命令，会显示出系统中已挂载的设备信息，使用 -l 选项，会额外显示出卷标名称（读者可自行运行，查看输出结果）；</p><p><code>[root@localhost ~]# mount -a</code></p><p>-a 选项的含义是自动检查 /etc/fstab 文件中有无疏漏被挂载的设备文件，如果有，则进行自动挂载操作。这里简单介绍一下 /etc/fstab 文件，此文件是自动挂载文件，系统开机时会主动读取 /etc/fstab 这个文件中的内容，根据该文件的配置，系统会自动挂载指定设备。</p><p><code>[root@localhost ~]# mount [-t 系统类型] [-L 卷标名] [-o 特殊选项] [-n] 设备文件名 挂载点</code></p><p>各选项的含义分别是：</p><ul><li>-t 系统类型：指定欲挂载的文件系统类型。Linux 常见的支持类型有 EXT2、EXT3、EXT4、iso9660（光盘格式）、vfat、reiserfs 等。如果不指定具体类型，挂载时 Linux 会自动检测。</li><li>-L 卷标名：除了使用设备文件名（例如 /dev/hdc6）之外，还可以利用文件系统的卷标名称进行挂载。</li><li>-n：在默认情况下，系统会将实际挂载的情况实时写入 /etc/mtab 文件中，但在某些场景下（例如单人维护模式），为了避免出现问题，会刻意不写入，此时就需要使用这个选项；</li><li>-o 特殊选项：可以指定挂载的额外选项，比如读写权限、同步/异步等，如果不指定，则使用默认值（defaults）。具体的特殊选项参见表 1；</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>rw/ro</td><td>是否对挂载的文件系统拥有读写权限，rw 为默认值，表示拥有读写权限；ro 表示只读权限。</td></tr><tr><td>async/sync</td><td>此文件系统是否使用同步写入（sync）或异步（async）的内存机制，默认为异步 async。</td></tr><tr><td>dev/nodev</td><td>是否允许从该文件系统的 block 文件中提取数据，为了保证数据安装，默认是 nodev。</td></tr><tr><td>auto/noauto</td><td>是否允许此文件系统被以 mount -a 的方式进行自动挂载，默认是 auto。</td></tr><tr><td>suid/nosuid</td><td>设定文件系统是否拥有 SetUID 和 SetGID 权限，默认是拥有。</td></tr><tr><td>exec/noexec</td><td>设定在文件系统中是否允许执行可执行文件，默认是允许。</td></tr><tr><td>user/nouser</td><td>设定此文件系统是否允许让普通用户使用 mount 执行实现挂载，默认是不允许（nouser），仅有 root 可以。</td></tr><tr><td>defaults</td><td>定义默认值，相当于 rw、suid、dev、exec、auto、nouser、async 这 7 个选项。</td></tr><tr><td>remount</td><td>重新挂载已挂载的文件系统，一般用于指定修改特殊权限。</td></tr></tbody></table><p>【例 1】</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mount</span>
<span class="token comment">#查看系统中已经挂载的文件系统，注意有虚拟文件系统</span>
/dev/sda3 on / <span class="token builtin class-name">type</span> ext4 <span class="token punctuation">(</span>rw<span class="token punctuation">)</span> <span class="token operator">&lt;</span>--含义是，将 /dev/sda3 分区挂载到了 / 目录上，文件系统是 ext4，具有读写权限
proc on /proc <span class="token builtin class-name">type</span> proc <span class="token punctuation">(</span>rw<span class="token punctuation">)</span>
sysfe on /sys <span class="token builtin class-name">type</span> sysfs <span class="token punctuation">(</span>rw<span class="token punctuation">)</span>
devpts on /dev/pts <span class="token builtin class-name">type</span> devpts <span class="token punctuation">(</span>rw, <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">5</span>, <span class="token assign-left variable">mode</span><span class="token operator">=</span><span class="token number">620</span><span class="token punctuation">)</span>
tmpfs on /dev/shm <span class="token builtin class-name">type</span> tmpfs <span class="token punctuation">(</span>rw<span class="token punctuation">)</span>
/dev/sda1 on /boot <span class="token builtin class-name">type</span> ext4 <span class="token punctuation">(</span>rw<span class="token punctuation">)</span>
none on /proc/sys/fe/binfmt_misc <span class="token builtin class-name">type</span> binfmt_misc <span class="token punctuation">(</span>rw<span class="token punctuation">)</span>
sunrpc on /var/lib/nfe/rpc_pipefs <span class="token builtin class-name">type</span> rpc_pipefs <span class="token punctuation">(</span>rw<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【例 2】 修改特殊权限。通过例 1 我们查看到，/boot 分区已经被挂载了，而且采用的是 defaults 选项。这里我们重新挂载分区，并采用 noexec 权限禁止执行文件执行，看看会出现什么情况（注意不要用 / 分区做实验，否则系统命令也就不能执行了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mount -o remount noexec /boot</span>
<span class="token comment">#重新挂载 /boot 分区，并使用 noexec 权限</span>
<span class="token punctuation">[</span>root@localhost sh<span class="token punctuation">]</span><span class="token comment"># cd /boot</span>
<span class="token comment">#写一个 shell 脚本，看是否会运行</span>
<span class="token punctuation">[</span>root@localhost boot<span class="token punctuation">]</span><span class="token comment">#vi hello.sh</span>
<span class="token comment">#!/bin/bash</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;hello!!&quot;</span>
<span class="token punctuation">[</span>root@localhost boot<span class="token punctuation">]</span><span class="token comment"># chmod 755 hello.sh</span>
<span class="token punctuation">[</span>root@localhost boot<span class="token punctuation">]</span><span class="token comment"># ./hello.sh</span>
-bash:./hello.sh:权限不够
<span class="token comment">#虽然赋予了hello.sh执行权限，但是仍然无法执行</span>
<span class="token punctuation">[</span>root@localhost boot<span class="token punctuation">]</span><span class="token comment"># mount -o remount exec /boot</span>
<span class="token comment">#记得改回来，否则会影响系统启动</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于特殊选项的修改，除非特殊场景下需要，否则不建议大家随意修改，非常容易造成系统出现问题，而且还找不到问题的根源。</p><p>【例 3】挂载分区。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mkdir /mnt/disk1</span>
<span class="token comment">#建立挂载点目录</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># mount /dev/sdb1 /mnt/disk1</span>
<span class="token comment">#挂载分区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>/dev/sdb1 分区还没有被划分。我们在这里只看看挂载分区的方式，非常简单，甚至不需要使用 &quot;-ext4&quot; 命令指定文件系统，因为系统可以自动检测。</p><p>为什么使用 Linux 系统的硬盘分区这么麻烦，而不能像 Windows 系统那样，硬盘安装上就可以使用？</p><p>其实，硬盘分区（设备）挂载和卸载（使用 umount 命令）的概念源自 UNIX，UNIX 系统一般是作为服务器使用的，系统安全非常重要，特别是在网络上，最简单有效的方法就是“不使用的硬盘分区（设备）不挂载”，因为没有挂载的硬盘分区是无法访问的，这样系统也就更安全了。</p><p>另外，这样也可以减少挂载的硬盘分区数量，相应地，也就可以减少系统维护文件的规模，当然也就减少了系统的开销，即提高了系统的效率。</p><h3 id="_5-2-umount-卸载" tabindex="-1"><a class="header-anchor" href="#_5-2-umount-卸载" aria-hidden="true">#</a> 5.2 umount 卸载</h3><p>硬盘分区是否需要卸载，取决于你下次是否还需要使用，一般不对硬盘分区执行卸载操作。</p><p>umount 命令用于卸载已经挂载的硬件设备，该命令的基本格式如下：</p><p><code>[root@localhost ~]# umount 设备文件名或挂载点</code> 注意，卸载命令后面既可以加设备文件名，也可以加挂载点，不过只能二选一，比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># umount /mnt/usb</span>
<span class="token comment">#卸载U盘</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># umount /mnt/cdrom</span>
<span class="token comment">#卸载光盘</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># umount /dev/sr0</span>
<span class="token comment">#命令加设备文件名同样是可以卸载的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果加了两个（如下所示），从理论上分析，会对光驱卸载两次，当然，卸载第二次的时候就会报错。</p><p><code>[root@localhost ~]# mount /dev/sr0 /mnt/cdrom/</code> 另外，我们在卸载时有可能会出现以下情况：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cd /mnt/cdrom/</span>
<span class="token comment">#进入光盘挂载点</span>
<span class="token punctuation">[</span>root@localhost cdrom<span class="token punctuation">]</span><span class="token comment"># umount /mnt/cdrom/</span>
umount: /mnt/cdrom: device is busy.
<span class="token comment">#报错，设备正忙</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种报错是因为我们已经进入了挂载点，因此，如果要卸载某硬件设备，在执行 umount 命令之前，用户须退出挂载目录。</p><p>卸载硬件设备成功与否，除了执行 umount 命令不报错之外，还可以使用 df 命令或 <code>mount -l</code> 来查看目标设备是否还挂载在系统中。</p><h2 id="_6-fdisk-分区" tabindex="-1"><a class="header-anchor" href="#_6-fdisk-分区" aria-hidden="true">#</a> 6.fdisk 分区</h2><p>我们在安装操作系统的过程中已经对系统硬盘进行了分区，但如果新添加了一块硬盘，想要正常使用，难道需要重新安装操作系统才可以分区吗？</p><p>当然不是，在 Linux 中有专门的分区命令 fdisk 和 parted。其中 fdisk 命令较为常用，但不支持大于 2TB 的分区；如果需要支持大于 2TB 的分区，则需要使用 parted 命令，当然 parted 命令也能分配较小的分区。我们先来看看如何使用 fdisk 命令进行分区。</p><p>fdisk 命令的格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk ~l</span>
<span class="token comment">#列出系统分区</span>
<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># fdisk 设备文件名</span>
<span class="token comment">#给硬盘分区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>该命令必须在 root 用户下才能使用</strong></p><p>使用 &quot;fdisk -l&quot; 查看分区信息，能够看到我们添加的两块硬盘（/dev/sda 和 /dev/sdb）的信息。我们解释一下这些信息，其上半部分态是硬盘的整体状态，/dev/sda 硬盘的总大小是 32.2 GB，共有 3916 个柱面，每个柱面由 255 个磁头读/写数据，每个磁头管理 63 个扇区。每个柱面的大小是 8225280 Bytes，每个扇区的大小是 512 Bytes。</p><p>信息的下半部分是分区的信息，共 7 列，含义如下：</p><ul><li>Device：分区的设备文件名。</li><li>Boot：是否为启动引导分区，在这里 /dev/sda1 为启动引导分区。</li><li>Start：起始柱面，代表分区从哪里开始。</li><li>End：终止柱面，代表分区到哪里结束。</li><li>Blocks：分区的大小，单位是 KB。</li><li>id：分区内文件系统的 ID。在 fdisk 命令中，可以 使用 &quot;i&quot; 查看。</li><li>System：分区内安装的系统是什么。</li></ul><p>在 fdisk 交互界面中输入 m 可以得到帮助，帮助里列出了 fdisk 可以识别的交互命令，我们来解释一下这些命令</p><table><thead><tr><th>命令</th><th>说 明</th></tr></thead><tbody><tr><td>a</td><td>设置可引导标记</td></tr><tr><td>b</td><td>编辑 bsd 磁盘标签</td></tr><tr><td>c</td><td>设置 DOS 操作系统兼容标记</td></tr><tr><td>d</td><td>删除一个分区</td></tr><tr><td>1</td><td>显示已知的文件系统类型。82 为 Linux swap 分区，83 为 Linux 分区</td></tr><tr><td>m</td><td>显示帮助菜单</td></tr><tr><td>n</td><td>新建分区</td></tr><tr><td>0</td><td>建立空白 DOS 分区表</td></tr><tr><td>P</td><td>显示分区列表</td></tr><tr><td>q</td><td>不保存退出</td></tr><tr><td>s</td><td>新建空白 SUN 磁盘标签</td></tr><tr><td>t</td><td>改变一个分区的系统 ID</td></tr><tr><td>u</td><td>改变显示记录单位</td></tr><tr><td>V</td><td>验证分区表</td></tr><tr><td>w</td><td>保存退出</td></tr></tbody></table>`,94),d=[l];function o(i,p){return s(),a("div",null,d)}const u=n(t,[["render",o],["__file","09.html.vue"]]);export{u as default};
