import{ab as n,G as s,H as a,ac as e}from"./framework-844b12a4.js";const t={},p=e(`<h1 id="_05-【electron的一些渲染进程api】" tabindex="-1"><a class="header-anchor" href="#_05-【electron的一些渲染进程api】" aria-hidden="true">#</a> 05 【electron的一些渲染进程Api】</h1><h2 id="_1-clipboard" tabindex="-1"><a class="header-anchor" href="#_1-clipboard" aria-hidden="true">#</a> 1.clipboard</h2><blockquote><p>在系统剪贴板上进行复制和粘贴操作。</p><p>在主进程（main process）和渲染进程（renderer process）上均可用。</p></blockquote><h3 id="_1-1-readtext" tabindex="-1"><a class="header-anchor" href="#_1-1-readtext" aria-hidden="true">#</a> 1.1 <code>readText()</code></h3><p>返回字符串 - 剪贴板中的内容为纯文本。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> clipboard <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span><span class="token string">&#39;千锋教育HTML5大前端!&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> text <span class="token operator">=</span> clipboard<span class="token punctuation">.</span><span class="token function">readText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token comment">// hello i am a bit of text!&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-writetext-text" tabindex="-1"><a class="header-anchor" href="#_1-2-writetext-text" aria-hidden="true">#</a> 1.2 <code>writeText(text)</code></h3><p>将文本作为纯文本写进剪贴板。</p><h2 id="_2-contextbridge" tabindex="-1"><a class="header-anchor" href="#_2-contextbridge" aria-hidden="true">#</a> 2.contextBridge</h2><blockquote><p>创建一个安全的、双向的、跨越隔离情境的同步桥梁。</p><p>只在渲染进程（renderer pocess）中可用。</p></blockquote><h2 id="_3-desktopcapturer" tabindex="-1"><a class="header-anchor" href="#_3-desktopcapturer" aria-hidden="true">#</a> 3.desktopCapturer</h2><blockquote><p>使用 navigator.mediaDevices.getUserMedia API 访问可用于从桌面捕获音频和视频的媒体源信息。</p><p>只在主进程（main process）可用。</p></blockquote><p>下面的例子显示了如何从一个标题为Electron的桌面窗口捕捉图像：</p><ul><li>在主进程里</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./controller/getSource.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> desktopCapturer<span class="token punctuation">,</span> ipcMain <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">getSource</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">mainWindow</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&#39;desktop-capturer&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    desktopCapturer<span class="token punctuation">.</span><span class="token function">getSources</span><span class="token punctuation">(</span><span class="token punctuation">{</span> 
      <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;window&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;screen&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">thumbnailSize</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1728</span><span class="token punctuation">,</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1117</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">sources</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> source <span class="token keyword">of</span> sources<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;Entire Screen&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;SET_SOURCE&#39;</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> getSource

<span class="token comment">// ./main.js</span>
<span class="token function">getSource</span><span class="token punctuation">(</span>win<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在预处理JS里</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ./preload-js/setSource.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> ipcRenderer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">setSource</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    ipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;SET_SOURCE&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> str <span class="token operator">=</span> source<span class="token punctuation">.</span>thumbnail<span class="token punctuation">.</span><span class="token function">crop</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1170</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">invokeCaptureEvent</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;desktop-capturer&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  setSource<span class="token punctuation">,</span>
  invokeCaptureEvent
<span class="token punctuation">}</span>

<span class="token comment">// ./preload-js/index.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> setSource<span class="token punctuation">,</span> invokeCaptureEvent <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./setSource&#39;</span><span class="token punctuation">)</span>
contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;myAPI&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  setSource<span class="token punctuation">,</span>
  invokeCaptureEvent
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在渲染进程页面里</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;div&gt;
      &lt;button @click=&quot;captureDesk&quot;&gt;抓取桌面&lt;/button&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;img :src=&quot;imgSrc&quot; alt=&quot;&quot; /&gt;
    &lt;/div&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>

  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">imgSrc</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">async</span> <span class="token function">captureDesk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> myAPI<span class="token punctuation">.</span><span class="token function">invokeCaptureEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token keyword">async</span> <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> imgDataUrl <span class="token operator">=</span> <span class="token keyword">await</span> myAPI<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>imgSrc <span class="token operator">=</span> imgDataUrl
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-ipcrenderer" tabindex="-1"><a class="header-anchor" href="#_4-ipcrenderer" aria-hidden="true">#</a> 4.ipcRenderer</h2><blockquote><p>从一个渲染器进程到主进程的异步通信。</p><p>只在渲染进程（renderer pocess）中可用。</p></blockquote><p><code>详情见 09 【进程间通信】</code></p><h2 id="_5-nativeimage" tabindex="-1"><a class="header-anchor" href="#_5-nativeimage" aria-hidden="true">#</a> 5.nativeImage</h2><blockquote><p>使用PNG或JPG文件创建托盘、停靠区和应用程序图标。</p><p>在主进程（main process）和渲染进程（renderer process）上均可用。</p></blockquote><p>在Electron中，对于接受图像的API，你可以传递文件路径或NativeImage实例。当传递null时，将使用一个空的图像。</p><p>例如，在创建一个托盘或设置一个窗口的图标时，你可以把图像文件路径作为一个字符串传递。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> BrowserWindow<span class="token punctuation">,</span> Tray <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> appIcon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tray</span><span class="token punctuation">(</span><span class="token string">&#39;/Users/somebody/images/icon.png&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">&#39;/Users/somebody/images/window.png&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appIcon<span class="token punctuation">,</span> win<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者从剪贴板上读取图像，返回一个NativeImage。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> clipboard<span class="token punctuation">,</span> Tray <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> image <span class="token operator">=</span> clipboard<span class="token punctuation">.</span><span class="token function">readImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> appIcon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tray</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appIcon<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-支持的格式" tabindex="-1"><a class="header-anchor" href="#_5-1-支持的格式" aria-hidden="true">#</a> 5.1 支持的格式</h3><p>目前支持PNG和JPEG图像格式。建议使用PNG，因为它支持透明度和无损压缩。</p><p>在Windows上，你也可以从文件路径加载ICO图标。为了获得最佳的视觉质量，建议至少包括以下尺寸的文件。</p><ul><li>Small icon <ul><li>16x16 (100% DPI scale)</li><li>20x20 (125% DPI scale)</li><li>24x24 (150% DPI scale)</li><li>32x32 (200% DPI scale)</li></ul></li><li>Large icon <ul><li>32x32 (100% DPI scale)</li><li>40x40 (125% DPI scale)</li><li>48x48 (150% DPI scale)</li><li>64x64 (200% DPI scale)</li><li>256x256</li></ul></li></ul><h3 id="_5-2-高分辨率图像" tabindex="-1"><a class="header-anchor" href="#_5-2-高分辨率图像" aria-hidden="true">#</a> 5.2 高分辨率图像</h3><p>在支持高DPI的平台上，如苹果Retina显示器，你可以在图像的基本文件名后附加@2x来标记它为高分辨率的图像。</p><p>例如，如果icon.png是一个具有标准分辨率的普通图像，那么icon@2x.png，将被视为具有双倍DPI密度的高分辨率图像。</p><p>如果你想同时支持不同DPI密度的显示器，你可以把不同尺寸的图像放在同一个文件夹里，使用不带DPI后缀的文件名。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>images<span class="token operator">/</span>
├── icon<span class="token punctuation">.</span>png
├── icon@2x<span class="token punctuation">.</span>png
└── icon@3x<span class="token punctuation">.</span>png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Tray <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> appIcon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tray</span><span class="token punctuation">(</span><span class="token string">&#39;/Users/somebody/images/icon.png&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appIcon<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还支持以下DPI的后缀：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>@1x
@<span class="token number">1</span><span class="token punctuation">.</span>25x
@<span class="token number">1</span><span class="token punctuation">.</span>33x
@<span class="token number">1</span><span class="token punctuation">.</span>4x
@<span class="token number">1</span><span class="token punctuation">.</span>5x
@<span class="token number">1</span><span class="token punctuation">.</span>8x
@2x
@<span class="token number">2</span><span class="token punctuation">.</span>5x
@3x
@4x
@5x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-方法" tabindex="-1"><a class="header-anchor" href="#_5-3-方法" aria-hidden="true">#</a> 5.3 方法</h3><ul><li><h2 id="nativeimage-createempty" tabindex="-1"><a class="header-anchor" href="#nativeimage-createempty" aria-hidden="true">#</a> <code>nativeImage.createEmpty()</code></h2></li><li><h2 id="nativeimage-createfrompath-path" tabindex="-1"><a class="header-anchor" href="#nativeimage-createfrompath-path" aria-hidden="true">#</a> <code>nativeImage.createFromPath(path)</code></h2></li></ul><p>返回 <code>NativeImage</code></p><p>从位于路径的文件中创建一个新的NativeImage实例。如果路径不存在，不能被读取，或者不是一个有效的图像，该方法将返回一个空图像。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> nativeImage <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nativeImage

<span class="token keyword">const</span> image <span class="token operator">=</span> nativeImage<span class="token punctuation">.</span><span class="token function">createFromPath</span><span class="token punctuation">(</span><span class="token string">&#39;/Users/somebody/images/icon.png&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><h2 id="nativeimage-createfromdataurl-dataurl" tabindex="-1"><a class="header-anchor" href="#nativeimage-createfromdataurl-dataurl" aria-hidden="true">#</a> <code>nativeImage.createFromDataURL(dataURL)</code></h2></li></ul><h3 id="_5-4-class-nativeimage" tabindex="-1"><a class="header-anchor" href="#_5-4-class-nativeimage" aria-hidden="true">#</a> 5.4 Class: NativeImage</h3><p>自然地包裹图像，如托盘、停靠区和应用程序图标。</p><p>在主进程（main process）和渲染进程（renderer process）上均可用。</p><p>实例方法：</p><ul><li><h3 id="image-topng-options" tabindex="-1"><a class="header-anchor" href="#image-topng-options" aria-hidden="true">#</a> <code>image.toPNG([options])</code></h3></li><li><h3 id="image-tojpeg-quality" tabindex="-1"><a class="header-anchor" href="#image-tojpeg-quality" aria-hidden="true">#</a> <code>image.toJPEG(quality)</code></h3></li><li><h3 id="image-todataurl-options" tabindex="-1"><a class="header-anchor" href="#image-todataurl-options" aria-hidden="true">#</a> <code>image.toDataURL([options])</code></h3></li><li><h3 id="image-getsize-scalefactor" tabindex="-1"><a class="header-anchor" href="#image-getsize-scalefactor" aria-hidden="true">#</a> <code>image.getSize([scaleFactor])</code></h3></li><li><h3 id="image-crop-rect" tabindex="-1"><a class="header-anchor" href="#image-crop-rect" aria-hidden="true">#</a> <code>image.crop(rect)</code></h3></li></ul>`,52),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","05.html.vue"]]);export{r as default};
