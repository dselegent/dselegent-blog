const e=JSON.parse('{"key":"v-4e104118","path":"/front_end/front_end_base/javascript/22.html","title":"22 【事件监听】","lang":"zh-CN","frontmatter":{"description":"22 【事件监听】 DOM 允许我们书写 JavaScript 代码以让 HTML 元素作出反应。 什么是 “事件”：用户与网页的交互动作。 1.什么是事件监听 “监听” 顾名思义，就是让计算机随时能够发现这个事件发生了，从而执行程序员预先编写好的一些程序。 设置事件监听的方法主要有 onxxx 和 addEventListener() 两种，二者的区别将在 “事件传播” 一课中介绍。 原始的事件处理方法：“直接通过事件绑定函数” 比如： HTML：&lt;button onclick=\\"add();\\"&gt;点击&lt;/button&gt; JS：function add() { alert(\\"相加\\"); } 以上方式不推荐使用！！！","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.icu/front_end/front_end_base/javascript/22.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"22 【事件监听】"}],["meta",{"property":"og:description","content":"22 【事件监听】 DOM 允许我们书写 JavaScript 代码以让 HTML 元素作出反应。 什么是 “事件”：用户与网页的交互动作。 1.什么是事件监听 “监听” 顾名思义，就是让计算机随时能够发现这个事件发生了，从而执行程序员预先编写好的一些程序。 设置事件监听的方法主要有 onxxx 和 addEventListener() 两种，二者的区别将在 “事件传播” 一课中介绍。 原始的事件处理方法：“直接通过事件绑定函数” 比如： HTML：&lt;button onclick=\\"add();\\"&gt;点击&lt;/button&gt; JS：function add() { alert(\\"相加\\"); } 以上方式不推荐使用！！！"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"22 【事件监听】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.什么是事件监听","slug":"_1-什么是事件监听","link":"#_1-什么是事件监听","children":[]},{"level":2,"title":"2.事件模型","slug":"_2-事件模型","link":"#_2-事件模型","children":[{"level":3,"title":"2.1 监听函数","slug":"_2-1-监听函数","link":"#_2-1-监听函数","children":[]},{"level":3,"title":"2.2 this 的指向","slug":"_2-2-this-的指向","link":"#_2-2-this-的指向","children":[]}]},{"level":2,"title":"3.使用addEventListener方法添加监听","slug":"_3-使用addeventlistener方法添加监听","link":"#_3-使用addeventlistener方法添加监听","children":[{"level":3,"title":"3.1 概述","slug":"_3-1-概述","link":"#_3-1-概述","children":[]},{"level":3,"title":"3.2 EventTarget.addEventListener()","slug":"_3-2-eventtarget-addeventlistener","link":"#_3-2-eventtarget-addeventlistener","children":[]},{"level":3,"title":"3.3 EventTarget.removeEventListener()","slug":"_3-3-eventtarget-removeeventlistener","link":"#_3-3-eventtarget-removeeventlistener","children":[]},{"level":3,"title":"3.4 EventTarget.dispatchEvent()","slug":"_3-4-eventtarget-dispatchevent","link":"#_3-4-eventtarget-dispatchevent","children":[]}]},{"level":2,"title":"4.常见的事件监听","slug":"_4-常见的事件监听","link":"#_4-常见的事件监听","children":[{"level":3,"title":"4.1 常见的鼠标事件监听","slug":"_4-1-常见的鼠标事件监听","link":"#_4-1-常见的鼠标事件监听","children":[]},{"level":3,"title":"4.2 常见的键盘事件监听","slug":"_4-2-常见的键盘事件监听","link":"#_4-2-常见的键盘事件监听","children":[]},{"level":3,"title":"4.3 常见的表单事件监听","slug":"_4-3-常见的表单事件监听","link":"#_4-3-常见的表单事件监听","children":[]},{"level":3,"title":"4.6 常见的页面事件监听","slug":"_4-6-常见的页面事件监听","link":"#_4-6-常见的页面事件监听","children":[]}]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":8.58,"words":2573},"filePathRelative":"front_end/front_end_base/javascript/22.md","localizedDate":"2023年1月30日","excerpt":"<h1> 22 【事件监听】</h1>\\n<p>DOM 允许我们书写 JavaScript 代码以让 HTML 元素作出反应。</p>\\n<p>什么是 “事件”：用户与网页的交互动作。</p>\\n<h2> 1.什么是事件监听</h2>\\n<p>“监听” 顾名思义，就是让计算机随时能够发现这个事件发生了，从而执行程序员预先编写好的一些程序。</p>\\n<p>设置事件监听的方法主要有 <code>onxxx</code> 和 <code>addEventListener()</code> 两种，二者的区别将在 “事件传播” 一课中介绍。</p>\\n<blockquote>\\n<p>原始的事件处理方法：“直接通过事件绑定函数”</p>\\n<p>比如：</p>\\n<p>HTML：<code>&lt;button onclick=\\"add();\\"&gt;点击&lt;/button&gt;</code></p>\\n<p>JS：<code>function add() { alert(\\"相加\\"); }</code></p>\\n<p>以上方式不推荐使用！！！</p>\\n</blockquote>","autoDesc":true}');export{e as data};
