const n=JSON.parse(`{"key":"v-62c1b23c","path":"/front_end/front_end_framework/vue3/14.html","title":"14 【TS类型声明 keepAlive】","lang":"zh-CN","frontmatter":{"description":"14 【TS类型声明 keepAlive】 1.Ts 类型声明使用 &amp; 讲解 该文章未归纳完，那么多API肯定也说不完。。不过也涵盖了主要的组合式 API 的 TS类型。 核心：大部分都是运用API函数泛型来定义类型。 1.1 父组件相关的 &lt;template&gt; &lt;el-button @click=\\"onsub\\"&gt;测试&lt;/el-button&gt; &lt;input type=\\"text\\" @change=\\"handleChange\\" /&gt; &lt;child ref='childRef' :child='2' :strData='\\"1\\"' :arrFor=\\"[]\\" @elPsyKongroo='onsub'&gt;&lt;/child&gt; &lt;/template&gt; &lt;script lang='ts' setup&gt; import child from './child.vue' import { ref,Ref,reactive,computed,customRef,watch,provide } from \\"vue\\"; //&gt; ref // interface Ref&lt;T&gt; { // value: T // } // function ref&lt;T&gt;(value: T): Ref&lt;T&gt; const year = ref&lt;string | number&gt;('2020') // 如果泛型的类型未知，则建议将 ref 转换为 Ref&lt;T&gt;： function useState&lt;State extends string&gt;(initial: State) { const state = ref(initial) as Ref&lt;State&gt; // state.value -&gt; State extends string return state } //&gt; reactive interface Book { title: string year?: number } const book = reactive&lt;Book&gt;({title:'唉，真有氏的怀表怎么停了!'}) // function reactive&lt;T extends object&gt;(target: T): UnwrapNestedRefs&lt;T&gt; //&gt; customRef // function customRef&lt;T&gt;(factory: CustomRefFactory&lt;T&gt;): Ref&lt;T&gt; // type CustomRefFactory&lt;T&gt; = ( // track: () =&gt; void, // trigger: () =&gt; void // ) =&gt; { // get: () =&gt; T // set: (value: T) =&gt; void // } function useDebouncedRef(value:string, delay = 200) { return customRef&lt;string&gt;((track, trigger) =&gt; { return { get() { return value }, set(newValue) { value = newValue } } }) } let a23 = useDebouncedRef('heelo1') a23.value = '123' //&gt; provide 与 inject // inject示例在同级child.vue里 // interface InjectionKey&lt;T&gt; extends Symbol {} // function provide&lt;T&gt;(key: InjectionKey&lt;T&gt; | string, value: T): void provide('static',year) provide('pbook',book) provide('changeFn',onsub) //! 有时候可能需要在子组件修改响应式的数据，此时provide一个方法给子组件调用 //&gt; computed let count = ref(0) const doubleCount = computed&lt;number&gt;(() =&gt; count.value + 2) //&gt; watch watch&lt;number&gt;(count,()=&gt;{}) // watch&lt;Ref&lt;number&gt;&gt;(count,()=&gt;{}) // 也可以 interface ReactiveData2{ content2: { count2: number } } let refData = ref(1) let reactiveData = reactive({content:{count:110}}) let reactiveData2 = reactive&lt;ReactiveData2&gt;({content2:{count2:1}}) watch&lt;[Ref&lt;number&gt;,() =&gt; number,ReactiveData2]&gt;([refData, ()=&gt;reactiveData.content.count,reactiveData2], ([a,b,c], oldValue) =&gt; { console.log(a,b,c, oldValue) }) // defineExpose 暴露的内容 // let childRef = ref() // setTimeout(() =&gt; { // console.log(childRef.value.ex1); // 如果是子组件的ref对象数据，会自动解包 .value // }, 1000); function handleChange(el) { console.log((el.target as HTMLInputElement).value) console.log(el.target.value) } function onsub(val) { console.log(val); year.value = 2036 book.title = '掌管未来女神的作战计划 El psy kongroo' } &lt;/script&gt;","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.cf/front_end/front_end_framework/vue3/14.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"14 【TS类型声明 keepAlive】"}],["meta",{"property":"og:description","content":"14 【TS类型声明 keepAlive】 1.Ts 类型声明使用 &amp; 讲解 该文章未归纳完，那么多API肯定也说不完。。不过也涵盖了主要的组合式 API 的 TS类型。 核心：大部分都是运用API函数泛型来定义类型。 1.1 父组件相关的 &lt;template&gt; &lt;el-button @click=\\"onsub\\"&gt;测试&lt;/el-button&gt; &lt;input type=\\"text\\" @change=\\"handleChange\\" /&gt; &lt;child ref='childRef' :child='2' :strData='\\"1\\"' :arrFor=\\"[]\\" @elPsyKongroo='onsub'&gt;&lt;/child&gt; &lt;/template&gt; &lt;script lang='ts' setup&gt; import child from './child.vue' import { ref,Ref,reactive,computed,customRef,watch,provide } from \\"vue\\"; //&gt; ref // interface Ref&lt;T&gt; { // value: T // } // function ref&lt;T&gt;(value: T): Ref&lt;T&gt; const year = ref&lt;string | number&gt;('2020') // 如果泛型的类型未知，则建议将 ref 转换为 Ref&lt;T&gt;： function useState&lt;State extends string&gt;(initial: State) { const state = ref(initial) as Ref&lt;State&gt; // state.value -&gt; State extends string return state } //&gt; reactive interface Book { title: string year?: number } const book = reactive&lt;Book&gt;({title:'唉，真有氏的怀表怎么停了!'}) // function reactive&lt;T extends object&gt;(target: T): UnwrapNestedRefs&lt;T&gt; //&gt; customRef // function customRef&lt;T&gt;(factory: CustomRefFactory&lt;T&gt;): Ref&lt;T&gt; // type CustomRefFactory&lt;T&gt; = ( // track: () =&gt; void, // trigger: () =&gt; void // ) =&gt; { // get: () =&gt; T // set: (value: T) =&gt; void // } function useDebouncedRef(value:string, delay = 200) { return customRef&lt;string&gt;((track, trigger) =&gt; { return { get() { return value }, set(newValue) { value = newValue } } }) } let a23 = useDebouncedRef('heelo1') a23.value = '123' //&gt; provide 与 inject // inject示例在同级child.vue里 // interface InjectionKey&lt;T&gt; extends Symbol {} // function provide&lt;T&gt;(key: InjectionKey&lt;T&gt; | string, value: T): void provide('static',year) provide('pbook',book) provide('changeFn',onsub) //! 有时候可能需要在子组件修改响应式的数据，此时provide一个方法给子组件调用 //&gt; computed let count = ref(0) const doubleCount = computed&lt;number&gt;(() =&gt; count.value + 2) //&gt; watch watch&lt;number&gt;(count,()=&gt;{}) // watch&lt;Ref&lt;number&gt;&gt;(count,()=&gt;{}) // 也可以 interface ReactiveData2{ content2: { count2: number } } let refData = ref(1) let reactiveData = reactive({content:{count:110}}) let reactiveData2 = reactive&lt;ReactiveData2&gt;({content2:{count2:1}}) watch&lt;[Ref&lt;number&gt;,() =&gt; number,ReactiveData2]&gt;([refData, ()=&gt;reactiveData.content.count,reactiveData2], ([a,b,c], oldValue) =&gt; { console.log(a,b,c, oldValue) }) // defineExpose 暴露的内容 // let childRef = ref() // setTimeout(() =&gt; { // console.log(childRef.value.ex1); // 如果是子组件的ref对象数据，会自动解包 .value // }, 1000); function handleChange(el) { console.log((el.target as HTMLInputElement).value) console.log(el.target.value) } function onsub(val) { console.log(val); year.value = 2036 book.title = '掌管未来女神的作战计划 El psy kongroo' } &lt;/script&gt;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"14 【TS类型声明 keepAlive】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.Ts 类型声明使用 & 讲解","slug":"_1-ts-类型声明使用-讲解","link":"#_1-ts-类型声明使用-讲解","children":[{"level":3,"title":"1.1 父组件相关的","slug":"_1-1-父组件相关的","link":"#_1-1-父组件相关的","children":[]},{"level":3,"title":"1.2 子组件相关的","slug":"_1-2-子组件相关的","link":"#_1-2-子组件相关的","children":[]}]},{"level":2,"title":"2.keep-alive","slug":"_2-keep-alive","link":"#_2-keep-alive","children":[{"level":3,"title":"2.1 基本介绍","slug":"_2-1-基本介绍","link":"#_2-1-基本介绍","children":[]},{"level":3,"title":"2.2 使用案例","slug":"_2-2-使用案例","link":"#_2-2-使用案例","children":[]},{"level":3,"title":"2.3 缓存实例的生命周期","slug":"_2-3-缓存实例的生命周期","link":"#_2-3-缓存实例的生命周期","children":[]}]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":6.87,"words":2062},"filePathRelative":"front_end/front_end_framework/vue3/14.md","localizedDate":"2023年1月30日","excerpt":"<h1> 14 【TS类型声明 keepAlive】</h1>\\n<h2> 1.Ts 类型声明使用 &amp; 讲解</h2>\\n<blockquote>\\n<p>该文章未归纳完，那么多API肯定也说不完。。不过也涵盖了主要的组合式 API 的 TS类型。</p>\\n<p>核心：大部分都是运用API函数泛型来定义类型。</p>\\n</blockquote>\\n<h3> 1.1 父组件相关的</h3>\\n<div class=\\"language-vue line-numbers-mode\\" data-ext=\\"vue\\"><pre class=\\"language-vue\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>template</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>el-button</span> <span class=\\"token attr-name\\">@click</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>onsub<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span>测试<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>el-button</span><span class=\\"token punctuation\\">&gt;</span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>input</span> <span class=\\"token attr-name\\">type</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">@change</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>handleChange<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token punctuation\\">/&gt;</span></span>\\n  <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>child</span> <span class=\\"token attr-name\\">ref</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">'</span>childRef<span class=\\"token punctuation\\">'</span></span> <span class=\\"token attr-name\\">:child</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">'</span>2<span class=\\"token punctuation\\">'</span></span> <span class=\\"token attr-name\\">:strData</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">'</span><span class=\\"token punctuation\\">\\"</span>1\\"<span class=\\"token punctuation\\">'</span></span> <span class=\\"token attr-name\\">:arrFor</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>[]<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">@elPsyKongroo</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">'</span>onsub<span class=\\"token punctuation\\">'</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>child</span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>template</span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span> <span class=\\"token attr-name\\">lang</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">'</span>ts<span class=\\"token punctuation\\">'</span></span> <span class=\\"token attr-name\\">setup</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n<span class=\\"token keyword\\">import</span> child <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'./child.vue'</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> ref<span class=\\"token punctuation\\">,</span>Ref<span class=\\"token punctuation\\">,</span>reactive<span class=\\"token punctuation\\">,</span>computed<span class=\\"token punctuation\\">,</span>customRef<span class=\\"token punctuation\\">,</span>watch<span class=\\"token punctuation\\">,</span>provide <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"vue\\"</span><span class=\\"token punctuation\\">;</span>\\n \\n<span class=\\"token comment\\">//&gt; ref</span>\\n<span class=\\"token comment\\">// interface Ref&lt;T&gt; {</span>\\n<span class=\\"token comment\\">//   value: T</span>\\n<span class=\\"token comment\\">// }</span>\\n<span class=\\"token comment\\">// function ref&lt;T&gt;(value: T): Ref&lt;T&gt;</span>\\n<span class=\\"token keyword\\">const</span> year <span class=\\"token operator\\">=</span> ref<span class=\\"token operator\\">&lt;</span>string <span class=\\"token operator\\">|</span> number<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'2020'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// 如果泛型的类型未知，则建议将 ref 转换为 Ref&lt;T&gt;：</span>\\n<span class=\\"token keyword\\">function</span> useState<span class=\\"token operator\\">&lt;</span>State <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">string</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>initial<span class=\\"token operator\\">:</span> State<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">const</span> state <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span>initial<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">as</span> Ref<span class=\\"token operator\\">&lt;</span>State<span class=\\"token operator\\">&gt;</span> <span class=\\"token comment\\">// state.value -&gt; State extends string</span>\\n  <span class=\\"token keyword\\">return</span> state\\n<span class=\\"token punctuation\\">}</span>\\n \\n<span class=\\"token comment\\">//&gt; reactive</span>\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Book</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">title</span><span class=\\"token operator\\">:</span> string\\n  year<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> number\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">const</span> book <span class=\\"token operator\\">=</span> reactive<span class=\\"token operator\\">&lt;</span>Book<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">title</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">'唉，真有氏的怀表怎么停了!'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// function reactive&lt;T extends object&gt;(target: T): UnwrapNestedRefs&lt;T&gt;</span>\\n \\n<span class=\\"token comment\\">//&gt; customRef</span>\\n<span class=\\"token comment\\">// function customRef&lt;T&gt;(factory: CustomRefFactory&lt;T&gt;): Ref&lt;T&gt;</span>\\n<span class=\\"token comment\\">// type CustomRefFactory&lt;T&gt; = (</span>\\n<span class=\\"token comment\\">//   track: () =&gt; void,</span>\\n<span class=\\"token comment\\">//   trigger: () =&gt; void</span>\\n<span class=\\"token comment\\">// ) =&gt; {</span>\\n<span class=\\"token comment\\">//   get: () =&gt; T</span>\\n<span class=\\"token comment\\">//   set: (value: T) =&gt; void</span>\\n<span class=\\"token comment\\">// }</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">useDebouncedRef</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token literal-property property\\">value</span><span class=\\"token operator\\">:</span>string<span class=\\"token punctuation\\">,</span> delay <span class=\\"token operator\\">=</span> <span class=\\"token number\\">200</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> customRef<span class=\\"token operator\\">&lt;</span>string<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">track<span class=\\"token punctuation\\">,</span> trigger</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> value\\n      <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n      <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>newValue<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        value <span class=\\"token operator\\">=</span> newValue\\n      <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">let</span> a23 <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useDebouncedRef</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'heelo1'</span><span class=\\"token punctuation\\">)</span>\\na23<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'123'</span>\\n \\n \\n<span class=\\"token comment\\">//&gt; provide 与 inject   // inject示例在同级child.vue里</span>\\n<span class=\\"token comment\\">// interface InjectionKey&lt;T&gt; extends Symbol {}</span>\\n<span class=\\"token comment\\">// function provide&lt;T&gt;(key: InjectionKey&lt;T&gt; | string, value: T): void</span>\\n<span class=\\"token function\\">provide</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'static'</span><span class=\\"token punctuation\\">,</span>year<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">provide</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'pbook'</span><span class=\\"token punctuation\\">,</span>book<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">provide</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'changeFn'</span><span class=\\"token punctuation\\">,</span>onsub<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">//! 有时候可能需要在子组件修改响应式的数据，此时provide一个方法给子组件调用</span>\\n \\n \\n \\n<span class=\\"token comment\\">//&gt; computed</span>\\n<span class=\\"token keyword\\">let</span> count <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">const</span> doubleCount <span class=\\"token operator\\">=</span> computed<span class=\\"token operator\\">&lt;</span>number<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> count<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">+</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span>\\n \\n<span class=\\"token comment\\">//&gt; watch</span>\\nwatch<span class=\\"token operator\\">&lt;</span>number<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span>count<span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// watch&lt;Ref&lt;number&gt;&gt;(count,()=&gt;{}) // 也可以</span>\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">ReactiveData2</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token literal-property property\\">content2</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">count2</span><span class=\\"token operator\\">:</span> number\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">let</span> refData <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">let</span> reactiveData <span class=\\"token operator\\">=</span> <span class=\\"token function\\">reactive</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">content</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">count</span><span class=\\"token operator\\">:</span><span class=\\"token number\\">110</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">let</span> reactiveData2 <span class=\\"token operator\\">=</span> reactive<span class=\\"token operator\\">&lt;</span>ReactiveData2<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">content2</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">count2</span><span class=\\"token operator\\">:</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\nwatch<span class=\\"token operator\\">&lt;</span><span class=\\"token punctuation\\">[</span>Ref<span class=\\"token operator\\">&lt;</span>number<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> number<span class=\\"token punctuation\\">,</span>ReactiveData2<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span>refData<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">=&gt;</span>reactiveData<span class=\\"token punctuation\\">.</span>content<span class=\\"token punctuation\\">.</span>count<span class=\\"token punctuation\\">,</span>reactiveData2<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">[</span>a<span class=\\"token punctuation\\">,</span>b<span class=\\"token punctuation\\">,</span>c<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> oldValue</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span>b<span class=\\"token punctuation\\">,</span>c<span class=\\"token punctuation\\">,</span> oldValue<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n \\n \\n<span class=\\"token comment\\">// defineExpose 暴露的内容</span>\\n<span class=\\"token comment\\">// let childRef = ref()</span>\\n<span class=\\"token comment\\">// setTimeout(() =&gt; {</span>\\n<span class=\\"token comment\\">//   console.log(childRef.value.ex1); // 如果是子组件的ref对象数据，会自动解包 .value</span>\\n<span class=\\"token comment\\">// }, 1000);</span>\\n \\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">handleChange</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">el</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>target <span class=\\"token keyword\\">as</span> HTMLInputElement<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">.</span>target<span class=\\"token punctuation\\">.</span>value<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">onsub</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">val</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  year<span class=\\"token punctuation\\">.</span>value <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2036</span>\\n  book<span class=\\"token punctuation\\">.</span>title <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'掌管未来女神的作战计划 El psy kongroo'</span>\\n<span class=\\"token punctuation\\">}</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
