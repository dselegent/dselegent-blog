import{ab as p,G as o,H as c,E as n,S as s,N as e,ac as t,W as l}from"./framework-09305b5d.js";const i={},r=n("h1",{id:"_05-【nodejs内置模块-上-】",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_05-【nodejs内置模块-上-】","aria-hidden":"true"},"#"),s(" 05 【nodejs内置模块（上）】")],-1),u=n("h2",{id:"_1-nodejs-的官方api文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-nodejs-的官方api文档","aria-hidden":"true"},"#"),s(" 1.nodejs 的官方API文档")],-1),d={href:"https://nodejs.org/docs/latest-v8.x/api/index.html",target:"_blank",rel:"noopener noreferrer"},k={href:"http://nodejs.cn/api/",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>关于 Node.js 的内置模块和常见API，可以看官方文档。</p><p>查阅文档时，稳定指数如下：</p><ul><li>红色：废弃。</li><li>橙色：实验。表示当前版本可用，其他版本不确定。也许不向下兼容，建议不要在生产环境中使用该特性。</li><li>绿色：稳定。与 npm 生态系统的兼容性是最高的优先级。</li></ul><h2 id="_2-nodejs-中模块的分类" tabindex="-1"><a class="header-anchor" href="#_2-nodejs-中模块的分类" aria-hidden="true">#</a> 2.nodejs 中模块的分类</h2><p>Node.js 应用由模块组成，采用 CommonJS 模块规范。Node.js中的模块分为三种：</p><ul><li>内置模块</li><li>第三方模块</li><li>自定义模块</li></ul><p>下面简单介绍一下。</p><h3 id="_2-1-内置模块" tabindex="-1"><a class="header-anchor" href="#_2-1-内置模块" aria-hidden="true">#</a> 2.1 内置模块</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> process <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;../&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>require方法用于加载模块。</p><p>常见的内置模块包括：</p><ul><li>FS：文件系统模块</li><li>path：路径模块</li><li>OS：操作系统相关</li><li>net：网络相关</li><li>http</li><li>...</li></ul><p>你可能会有疑问：Node.js 这么牛吗？还能直接和操作系统做交互？</p><p>带着这个疑问，我们不妨简单看看 Node.js 的源码，以 os 模块举例：</p>`,14),m={href:"https://github.com/nodejs/node/blob/master/lib/os.js%EF%BC%8C%E7%BF%BB%E5%88%B0%E6%9C%80%E5%BA%95%E9%83%A8%EF%BC%8C%E6%89%BE%E5%88%B0",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"cpus",-1),b=n("li",null,[s("进而找到 "),n("code",null,"getCPUs()")],-1),g=n("li",null,"internalBinding('os')：通过 internalBinding 可以调用系统底层的方法。internalBinding 主要是 JS 虚拟机在做的事情。",-1),y=n("code",null,"internalBinding('os')",-1),f={href:"https://github.com/nodejs/node/blob/master/src/node_os.cc",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"getCPUs",-1),x=t(`<p>现在你知道了，JS本身是没有能力获取底层系统资源的，这一切都是 JS虚拟机在和底层做交互，然后通过 JS 的表现形式，暴露给应用层。</p><p>另外，还有很多库，是直接使用C/++编写的，通过编译之后，再提供给 JS 应用层调用，或者直接提供给 Node.js层使用。</p><p><strong>所有的编程语言底层都会回归C/C++</strong>，甚至是汇编语言。</p><h3 id="_2-2-require-加载第三方包的机制" tabindex="-1"><a class="header-anchor" href="#_2-2-require-加载第三方包的机制" aria-hidden="true">#</a> 2.2 require 加载第三方包的机制</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>require 加载第三方包的机制：</p><p>（1）第三方包安装好后，这个包一般会存放在当前项目的 node_modules 文件夹中。我们找到这个包的 package.json 文件，并且找到里面的main属性对应的入口模块，这个入口模块就是这个包的入口文件。</p><p>（2）如果第三方包中没有找到package.json文件，或者package.json文件中没有main属性，则默认加载第三方包中的index.js文件。</p><p>（3）如果在 node_modules 文件夹中没有找到这个包，或者以上所有情况都没有找到，则会向上一级父级目录下查找node_modules文件夹，查找规则如上一致。</p><p>（4）如果一直找到该模块的磁盘根路径都没有找到，则会报错：can not find module xxx。</p><h3 id="_2-3-自定义模块-module" tabindex="-1"><a class="header-anchor" href="#_2-3-自定义模块-module" aria-hidden="true">#</a> 2.3 自定义模块（module）</h3><p>每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。</p><p>举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> example <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./example.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span><span class="token function">addX</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-网络服务-http" tabindex="-1"><a class="header-anchor" href="#_3-网络服务-http" aria-hidden="true">#</a> 3.网络服务 http</h2><h3 id="_3-1-http模块概览" tabindex="-1"><a class="header-anchor" href="#_3-1-http模块概览" aria-hidden="true">#</a> 3.1 http模块概览</h3><p>大多数nodejs开发者都是冲着开发web server的目的选择了nodejs。正如官网所展示的，借助http模块，可以几行代码就搞定一个超迷你的web server。</p><p>在nodejs中，<code>http</code>可以说是最核心的模块，同时也是比较复杂的一个模块。上手很简单，但一旦深入学习，不少初学者就会觉得头疼，不知从何入手。</p><p>本文先从一个简单的例子出发，引出<code>http</code>模块最核心的四个实例。看完本文，应该就能够对http模块有个整体的认识。</p><h3 id="_3-2-一个简单的例子" tabindex="-1"><a class="header-anchor" href="#_3-2-一个简单的例子" aria-hidden="true">#</a> 3.2 一个简单的例子</h3><p>在下面的例子中，我们创建了1个web服务器、1个http客户端</p><ul><li>服务器server：接收来自客户端的请求，并将客户端请求的地址返回给客户端。</li><li>客户端client：向服务器发起请求，并将服务器返回的内容打印到控制台。</li></ul><p>代码如下所示，只有几行，但包含了不少信息量。下一小节会进行简单介绍。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// http server 例子</span>
<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">serverReq<span class="token punctuation">,</span> serverRes</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> url <span class="token operator">=</span> serverReq<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
    serverRes<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span> <span class="token string">&#39;您访问的地址是：&#39;</span> <span class="token operator">+</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// http client 例子</span>
<span class="token keyword">var</span> client <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:3000&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">clientRes</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    clientRes<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-例子解释" tabindex="-1"><a class="header-anchor" href="#_3-3-例子解释" aria-hidden="true">#</a> 3.3 例子解释</h3><p>在上面这个简单的例子里，涉及了4个实例。大部分时候，serverReq、serverRes 才是主角。</p><ul><li>server：http.Server实例，用来提供服务，处理客户端的请求。</li><li>client：http.ClientReques实例，用来向服务端发起请求。</li><li>serverReq/clientRes：其实都是 http.IncomingMessage实例。serverReq 用来获取客户端请求的相关信息，如request header；而clientRes用来获取服务端返回的相关信息，比如response header。</li><li>serverRes：http.ServerResponse实例</li></ul><h3 id="_3-4-关于http-incomingmessage、http-serverresponse" tabindex="-1"><a class="header-anchor" href="#_3-4-关于http-incomingmessage、http-serverresponse" aria-hidden="true">#</a> 3.4 关于http.IncomingMessage、http.ServerResponse</h3><p>先讲下 http.ServerResponse 实例。作用很明确，服务端通过http.ServerResponse 实例，来个请求方发送数据。包括发送响应表头，发送响应主体等。</p><p>接下来是 http.IncomingMessage 实例，由于在 server、client 都出现了，初学者难免有点迷茫。它的作用是</p><p>在server端：获取请求发送方的信息，比如请求方法、路径、传递的数据等。 在client端：获取 server 端发送过来的信息，比如请求方法、路径、传递的数据等。</p><p>http.IncomingMessage实例 有三个属性需要注意：method、statusCode、statusMessage。</p><ul><li>method：只在 server 端的实例有（也就是 serverReq.method）</li><li>statusCode/statusMessage：只在 client 端 的实例有（也就是 clientRes.method）</li></ul><h2 id="_4-网络服务-http-res" tabindex="-1"><a class="header-anchor" href="#_4-网络服务-http-res" aria-hidden="true">#</a> 4.网络服务 http res</h2><h3 id="_4-1-概览" tabindex="-1"><a class="header-anchor" href="#_4-1-概览" aria-hidden="true">#</a> 4.1 概览</h3><p>http模块四剑客之一的<code>res</code>，应该都不陌生了。一个web服务程序，接受到来自客户端的http请求后，向客户端返回正确的响应内容，这就是<code>res</code>的职责。</p><p>返回的内容包括：状态代码/状态描述信息、响应头部、响应主体。下文会举几个简单的例子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-例子" tabindex="-1"><a class="header-anchor" href="#_4-2-例子" aria-hidden="true">#</a> 4.2 例子</h3><p>在下面的例子中，我们同时设置了 状态代码/状态描述信息、响应头部、响应主体，就是这么简单。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置状态码、状态描述信息、响应主体</span>
<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;ok&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-设置状态代码、状态描述信息" tabindex="-1"><a class="header-anchor" href="#_4-3-设置状态代码、状态描述信息" aria-hidden="true">#</a> 4.3 设置状态代码、状态描述信息</h3><p><code>res</code>提供了 res.writeHead()、res.statusCode/res.statusMessage 来实现这个目的。</p><p>举例，如果想要设置 200/ok ，可以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
res<span class="token punctuation">.</span>statusMessage <span class="token operator">=</span> <span class="token string">&#39;ok&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>两者差不多，差异点在于</p><ol><li>res.writeHead() 可以提供额外的功能，比如设置响应头部。</li><li>当响应头部发送出去后，res.statusCode/res.statusMessage 会被设置成已发送出去的 状态代码/状态描述信息。</li></ol><h3 id="_4-4-设置响应头部" tabindex="-1"><a class="header-anchor" href="#_4-4-设置响应头部" aria-hidden="true">#</a> 4.4 设置响应头部</h3><p><code>res</code>提供了 res.writeHead()、response.setHeader() 来实现响应头部的设置。</p><p>举例，比如想把 <code>Content-Type</code> 设置为 <code>text-plain</code>，那么可以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一</span>
res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;ok&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text-plain&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 方法二</span>
res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text-plain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者的差异点在哪里呢？</p><ol><li>res.writeHead() 不单单是设置header。</li><li>已经通过 res.setHeader() 设置了header，当通过 res.writeHead() 设置同名header，res.writeHead() 的设置会覆盖之前的设置。</li></ol><p>关于第2点差异，这里举个例子。下面代码，最终的 <code>Content-Type</code> 为 <code>text/plain</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;ok&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而下面的例子，则直接报错。报错信息为 <code>Error: Can&#39;t set headers after they are sent.</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    
    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;ok&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-其他响应头部操作" tabindex="-1"><a class="header-anchor" href="#_4-5-其他响应头部操作" aria-hidden="true">#</a> 4.5 其他响应头部操作</h3><p>增、删、改、查 是配套的。下面分别举例说明下，例子太简单就直接上代码了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 增</span>
res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删</span>
res<span class="token punctuation">.</span><span class="token function">removeHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 改</span>
res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 覆盖</span>

<span class="token comment">// 查</span>
res<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中略显不同的是 res.getHeader(name)，name 用的是小写，返回值没做特殊处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TEXT/HTML&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> res<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// TEXT/HTML</span>

res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> res<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// text/plain</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还有不那么常用的：</p><ul><li>res.headersSent：header是否已经发送；</li><li>res.sendDate：默认为true。但为true时，会在response header里自动设置Date首部。</li></ul><h3 id="_4-6-设置响应主体" tabindex="-1"><a class="header-anchor" href="#_4-6-设置响应主体" aria-hidden="true">#</a> 4.6 设置响应主体</h3><p>主要用到 res.write() 以及 res.end() 两个方法。</p>`,68),q={href:"https://nodejs.org/api/http.html#http_response_write_chunk_encoding_callback",target:"_blank",rel:"noopener noreferrer"},j=t(`<h4 id="_4-6-1-response-write-chunk-encoding-callback" tabindex="-1"><a class="header-anchor" href="#_4-6-1-response-write-chunk-encoding-callback" aria-hidden="true">#</a> 4.6.1 response.write(chunk[, encoding][, callback])</h4><ul><li>chunk：响应主体的内容，可以是string，也可以是buffer。当为string时，encoding参数用来指明编码方式。（默认是utf8）</li><li>encoding：编码方式，默认是 utf8。</li><li>callback：当响应体flushed时触发。（TODO 这里想下更好的解释。。。）</li></ul><p>使用上没什么难度，只是有些注意事项：</p><ol><li>如果 res.write() 被调用时， res.writeHead() 还没被调用过，那么，就会把header flush出去。</li><li>res.write() 可以被调用多次。</li><li>当 res.write(chunk) 第一次被调用时，node 会将 header 信息 以及 chunk 发送到客户端。第二次调用 res.write(chunk) ，node 会认为你是要streaming data（WTF，该怎么翻译）。。。</li></ol><blockquote><p>Returns true if the entire data was flushed successfully to the kernel buffer. Returns false if all or part of the data was queued in user memory. &#39;drain&#39; will be emitted when the buffer is free again.</p></blockquote><h4 id="_4-6-2-response-end-data-encoding-callback" tabindex="-1"><a class="header-anchor" href="#_4-6-2-response-end-data-encoding-callback" aria-hidden="true">#</a> 4.6.2 response.end([data][, encoding][, callback])</h4><p>掌握了 res.write() 的话，res.end() 就很简单了。res.end() 的用处是告诉nodejs，header、body都给你了，这次响应就到这里吧。</p><p>有点像个语法糖，可以看成下面两个调用的组合。至于callback，当响应传递结束后触发。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> encoding<span class="token punctuation">)</span><span class="token punctuation">;</span>
res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-7-超时处理" tabindex="-1"><a class="header-anchor" href="#_4-7-超时处理" aria-hidden="true">#</a> 4.7 超时处理</h3><p>接口：response.setTimeout(msecs, callback)</p><p>关于 timeout 事件的说明，同样是言简意赅（WTF），话少信息量大，最好来个demo TODO</p><blockquote><p>If no &#39;timeout&#39; listener is added to the request, the response, or the server, then sockets are destroyed when they time out. If you assign a handler on the request, the response, or the server&#39;s &#39;timeout&#39; events, then it is your responsibility to handle timed out sockets.</p></blockquote><h3 id="_4-8-事件-close-finish" tabindex="-1"><a class="header-anchor" href="#_4-8-事件-close-finish" aria-hidden="true">#</a> 4.8 事件 close/finish</h3><ul><li>close：response.end() 被调用前，连接就断开了。此时会触发这个事件。</li><li>finish：响应header、body都已经发送出去（交给操作系统，排队等候传输），但客户端是否实际收到数据为止。（这个事件后，res 上就不会再有其他事件触发）</li></ul><h3 id="_4-9-其他不常用属性-方法" tabindex="-1"><a class="header-anchor" href="#_4-9-其他不常用属性-方法" aria-hidden="true">#</a> 4.9 其他不常用属性/方法</h3><ul><li>response.finished：一开始是false，响应结束后，设置为true。</li><li>response.sendDate：默认是true。是否自动设置Date头部。（按HTTP协议是必须要的，除非是调试用，不然不要设置为false）</li><li>response.headersSent：只读属性。响应头部是否已发送。</li><li>response.writeContinue()：发送 HTTP/1.1 100 Continue 消息给客户端，提示说服务端愿意接受客户端的请求，请继续发送请求正文（body)。（TODO 做个demo啥的是大大的好）</li></ul><h2 id="_5-网络服务-http-req" tabindex="-1"><a class="header-anchor" href="#_5-网络服务-http-req" aria-hidden="true">#</a> 5.网络服务 http req</h2><h3 id="_5-1-概览" tabindex="-1"><a class="header-anchor" href="#_5-1-概览" aria-hidden="true">#</a> 5.1 概览</h3><p>本文的重点会放在<code>req</code>这个对象上。前面已经提到，它其实是http.IncomingMessage实例，在服务端、客户端作用略微有差异</p><ul><li>服务端处：获取请求方的相关信息，如request header等。</li><li>客户端处：获取响应方返回的相关信息，如statusCode等。</li></ul><p>服务端例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 下面的 req</span>
<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端例子</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 下面的res</span>
<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;http://127.0.0.1:3000&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-属性-方法-事件-分类" tabindex="-1"><a class="header-anchor" href="#_5-2-属性-方法-事件-分类" aria-hidden="true">#</a> 5.2 属性/方法/事件 分类</h3><p>http.IncomingMessage的属性/方法/事件 不是特别多，按照是否客户端/服务端 特有的，下面进行简单归类。可以看到</p><ul><li>服务端处特有：url</li><li>客户端处特有：statusCode、statusMessage</li></ul><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:center;">名称</th><th style="text-align:center;">服务端</th><th style="text-align:center;">客户端</th></tr></thead><tbody><tr><td style="text-align:left;">事件</td><td style="text-align:center;">aborted</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:left;">事件</td><td style="text-align:center;">close</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:left;">属性</td><td style="text-align:center;">headers</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:left;">属性</td><td style="text-align:center;">rawHeaders</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:left;">属性</td><td style="text-align:center;">statusCode</td><td style="text-align:center;">✕</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:left;">属性</td><td style="text-align:center;">statusMessage</td><td style="text-align:center;">✕</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:left;">属性</td><td style="text-align:center;">httpVersion</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:left;">属性</td><td style="text-align:center;">url</td><td style="text-align:center;">✓</td><td style="text-align:center;">✕</td></tr><tr><td style="text-align:left;">属性</td><td style="text-align:center;">socket</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:left;">方法</td><td style="text-align:center;">.destroy()</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr><tr><td style="text-align:left;">方法</td><td style="text-align:center;">.setTimeout()</td><td style="text-align:center;">✓</td><td style="text-align:center;">✓</td></tr></tbody></table><h3 id="_5-3-服务端的例子" tabindex="-1"><a class="header-anchor" href="#_5-3-服务端的例子" aria-hidden="true">#</a> 5.3 服务端的例子</h3><h4 id="_5-3-1-例子一-获取httpversion-method-url" tabindex="-1"><a class="header-anchor" href="#_5-3-1-例子一-获取httpversion-method-url" aria-hidden="true">#</a> 5.3.1 例子一：获取httpVersion/method/url</h4><p>下面是一个典型的HTTP请求报文，里面最重要的内容包括：HTTP版本、请求方法、请求地址、请求头部。</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/hello</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:3000</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span>
<span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">no-cache</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，如何获取上面提到的信息呢？很简单，直接上代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// getClientInfo.js</span>
<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;1、客户端请求url：&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url <span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;2、http版本：&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>httpVersion <span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;3、http请求方法：&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>method <span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;4、http请求头部&#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>、客户端请求url：/hello
<span class="token number">2</span>、http版本：1.1
<span class="token number">3</span>、http请求方法：GET
<span class="token number">4</span>、http headers：<span class="token punctuation">{</span><span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:3000&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;cache-control&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;no-cache&quot;</span>,&quot;user-age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-2-例子二-获取get请求参数" tabindex="-1"><a class="header-anchor" href="#_5-3-2-例子二-获取get请求参数" aria-hidden="true">#</a> 5.3.2 例子二：获取get请求参数</h4><p>服务端代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// getClientGetQuery.js</span>
<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;querystring&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> urlObj <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> query <span class="token operator">=</span> urlObj<span class="token punctuation">.</span>query<span class="token punctuation">;</span>
    <span class="token keyword">var</span> queryObj <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>queryObj<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),_={href:"http://127.0.0.1:3000/hello?nick=chyingp&hello=world",target:"_blank",rel:"noopener noreferrer"},R=t(`<p>服务端输出如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span><span class="token string">&quot;nick&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;chyingp&quot;</span>,<span class="token string">&quot;hello&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5-3-3-例子三-获取post请求参数" tabindex="-1"><a class="header-anchor" href="#_5-3-3-例子三-获取post请求参数" aria-hidden="true">#</a> 5.3.3 例子三：获取post请求参数</h4><p>服务端代码如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// getClientPostBody.js</span>
<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;url&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;querystring&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    
    <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>  
    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">thunk</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        body <span class="token operator">+=</span> thunk<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;post body is: &#39;</span> <span class="token operator">+</span> body <span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过curl构造post请求：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;nick=casper&amp;hello=world&#39;</span> http://127.0.0.1:3000
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务端打印如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>post body is: <span class="token assign-left variable">nick</span><span class="token operator">=</span>casper<span class="token operator">&amp;</span><span class="token assign-left variable">hello</span><span class="token operator">=</span>world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>备注：post请求中，不同的<code>Content-type</code>，post body有不小差异，感兴趣的同学可以研究下。</p><p>本例中的post请求，HTTP报文大概如下</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:3000</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span>
<span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">no-cache</span></span>

nick=casper&amp;hello=world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-网络服务-https" tabindex="-1"><a class="header-anchor" href="#_6-网络服务-https" aria-hidden="true">#</a> 6.网络服务 https</h2><h3 id="_6-1-模块概览" tabindex="-1"><a class="header-anchor" href="#_6-1-模块概览" aria-hidden="true">#</a> 6.1 模块概览</h3><p>这个模块的重要性，基本不用强调了。在网络安全问题日益严峻的今天，网站采用HTTPS是个必然的趋势。</p><p>在nodejs中，提供了 https 这个模块来完成 HTTPS 相关功能。从官方文档来看，跟 http 模块用法非常相似。</p><p>本文主要包含两部分：</p><ol><li>通过客户端、服务端的例子，对https模块进行入门讲解。</li><li>如何访问安全证书不受信任的网站。（以 12306 为例子）</li></ol><p>篇幅所限，本文无法对 HTTPS协议 及 相关技术体系 做过多讲解，有问题欢迎留言交流。</p><h3 id="_6-2-客户端例子" tabindex="-1"><a class="header-anchor" href="#_6-2-客户端例子" aria-hidden="true">#</a> 6.2 客户端例子</h3><p>跟http模块的用法非常像，只不过请求的地址是https协议的而已，代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

https<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.baidu.com&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;status code: &#39;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;headers: &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-服务端例子" tabindex="-1"><a class="header-anchor" href="#_6-3-服务端例子" aria-hidden="true">#</a> 6.3 服务端例子</h3><p>对外提供HTTPS服务，需要有HTTPS证书。如果你已经有了HTTPS证书，那么可以跳过证书生成的环节。如果没有，可以参考如下步骤</p><h4 id="_6-3-1-生成证书" tabindex="-1"><a class="header-anchor" href="#_6-3-1-生成证书" aria-hidden="true">#</a> 6.3.1 生成证书</h4><p><strong>1.创建个目录存放证书。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> cert
<span class="token builtin class-name">cd</span> cert
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.生成私钥。</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>openssl genrsa -out chyingp-key.pem 2048
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>3.生成证书签名请求（csr是 Certificate Signing Request的意思）。</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>openssl req -new \\
  -sha256
  -key chyingp-key.key.pem \\
  -out chyingp-csr.pem \\
  -subj &quot;/C=CN/ST=Guandong/L=Shenzhen/O=YH Inc/CN=www.chyingp.com&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>4.生成证书。</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>openssl x509 \\
  -req -in chyingp-csr.pem \\
  -signkey chyingp-key.pem \\
  -out chyingp-cert.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-2-https服务端" tabindex="-1"><a class="header-anchor" href="#_6-3-2-https服务端" aria-hidden="true">#</a> 6.3.2 HTTPS服务端</h4><p>代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./cert/chyingp-key.pem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 私钥</span>
    <span class="token literal-property property">cert</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./cert/chyingp-cert.pem&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 证书</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;这是来自HTTPS服务器的返回&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),L={href:"http://www.chyingp.com",target:"_blank",rel:"noopener noreferrer"},S=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`127.0.0.1 www.chyingp.com
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),U={href:"http://www.chyingp.com:3000/",target:"_blank",rel:"noopener noreferrer"},P=t(`<h2 id="_7-url-接口-代替内置模块url使用" tabindex="-1"><a class="header-anchor" href="#_7-url-接口-代替内置模块url使用" aria-hidden="true">#</a> 7.URL 接口(代替内置模块url使用)</h2><blockquote><p>nodejs内置模块<code>url</code>有些方法要被废弃，我们使用<code>URL类</code>代替</p></blockquote><p>浏览器原生提供<code>URL()</code>接口，它是一个构造函数，用来构造、解析和编码 URL。一般情况下，通过<code>window.URL</code>可以拿到这个构造函数。</p><h3 id="_7-1-对比url模块和url类" tabindex="-1"><a class="header-anchor" href="#_7-1-对比url模块和url类" aria-hidden="true">#</a> 7.1 对比<code>url模块</code>和URL类</h3><table><thead><tr><th>属性</th><th>url模块</th><th>URL类</th></tr></thead><tbody><tr><td>protocol</td><td><code>✅</code></td><td><code>✅</code></td></tr><tr><td>host</td><td><code>✅</code></td><td><code>✅</code></td></tr><tr><td>port</td><td><code>✅</code></td><td><code>✅</code></td></tr><tr><td>hostname</td><td><code>✅</code></td><td><code>✅</code></td></tr><tr><td>search</td><td><code>✅</code></td><td><code>✅</code></td></tr><tr><td>query</td><td><code>✅</code></td><td><code>-</code></td></tr><tr><td>path</td><td><code>✅</code></td><td><code>-</code></td></tr><tr><td>pathname</td><td><code>✅</code></td><td><code>✅</code></td></tr><tr><td>href</td><td><code>✅</code></td><td><code>✅</code></td></tr><tr><td>hash</td><td><code>✅</code></td><td><code>✅</code></td></tr><tr><td>origin</td><td>-</td><td><code>✅</code></td></tr></tbody></table><p>可以看出来，只有三个字段不同，分别是<code>query</code>,<code>path</code>,<code>origin</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>打印两个对象的输出

<span class="token comment">// url模块，url.parse(&#39;link&#39;)</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">protocol</span><span class="token operator">:</span> <span class="token string">&#39;https:&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">slashes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;m.shop.com&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hostname</span><span class="token operator">:</span> <span class="token string">&#39;m.shop.com&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token string">&#39;#detail&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&#39;?id=4433&amp;name=%E6%9D%8E%E5%A4%87&amp;directCompanyId=&amp;mobile=18951431099&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token string">&#39;id=4433&amp;name=%E6%9D%8E%E5%A4%87&amp;directCompanyId=&amp;mobile=18951431099&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&#39;/home/share&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/home/share?id=4433&amp;name=%E6%9D%8E%E5%A4%87&amp;directCompanyId=&amp;mobile=18951431099&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;https://m.shop.com/home/share?id=4433&amp;name=%E6%9D%8E%E5%A4%87&amp;directCompanyId=&amp;mobile=18951431099#detail&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// new URL()</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;https://m.shop.com/home/share?id=4433&amp;name=%E6%9D%8E%E5%A4%87&amp;directCompanyId=&amp;mobile=18951431099#detail&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token string">&#39;https://m.shop.com&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">protocol</span><span class="token operator">:</span> <span class="token string">&#39;https:&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;m.shop.com&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hostname</span><span class="token operator">:</span> <span class="token string">&#39;m.shop.com&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">pathname</span><span class="token operator">:</span> <span class="token string">&#39;/home/share&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">search</span><span class="token operator">:</span> <span class="token string">&#39;?id=4433&amp;name=%E6%9D%8E%E5%A4%87&amp;directCompanyId=&amp;mobile=18951431099&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">searchParams</span><span class="token operator">:</span> URLSearchParams <span class="token punctuation">{</span>
    <span class="token string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;4433&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;李备&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;directCompanyId&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;mobile&#39;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;18951431099&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hash</span><span class="token operator">:</span> <span class="token string">&#39;#detail&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-构造函数" tabindex="-1"><a class="header-anchor" href="#_7-2-构造函数" aria-hidden="true">#</a> 7.2 构造函数</h3><p><code>URL()</code>作为构造函数，可以生成 URL 实例。它接受一个表示 URL 的字符串作为参数。如果参数不是合法的 URL，会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;http://www.example.com/index.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
url<span class="token punctuation">.</span>href
<span class="token comment">// &quot;http://www.example.com/index.html&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面示例生成了一个 URL 实例，用来代表指定的网址。</p><p>除了字符串，<code>URL()</code>的参数也可以是另一个 URL 实例。这时，<code>URL()</code>会自动读取该实例的<code>href</code>属性，作为实际参数。</p><p>如果 URL 字符串是一个相对路径，那么需要表示绝对路径的第二个参数，作为计算基准。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
url1<span class="token punctuation">.</span>href
<span class="token comment">// &quot;http://example.com/index.html&quot;</span>

<span class="token keyword">var</span> url2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;page2.html&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://example.com/page1.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
url2<span class="token punctuation">.</span>href
<span class="token comment">// &quot;http://example.com/page2.html&quot;</span>

<span class="token keyword">var</span> url3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://example.com/a/b.html&#39;</span><span class="token punctuation">)</span>
url3<span class="token punctuation">.</span>href
<span class="token comment">// &quot;http://example.com/&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，返回的 URL 实例的路径都是在第二个参数的基础上，切换到第一个参数得到的。最后一个例子里面，第一个参数是<code>..</code>，表示上层路径。</p><h3 id="_7-3-实例属性" tabindex="-1"><a class="header-anchor" href="#_7-3-实例属性" aria-hidden="true">#</a> 7.3 实例属性</h3><p>URL 实例的属性与<code>Location</code>对象的属性基本一致，返回当前 URL 的信息。</p><ul><li>URL.href：返回整个 URL</li><li>URL.protocol：返回协议，以冒号<code>:</code>结尾</li><li>URL.hostname：返回域名</li><li>URL.host：返回域名与端口，包含<code>:</code>号，默认的80和443端口会省略</li><li>URL.port：返回端口</li><li>URL.origin：返回协议、域名和端口</li><li>URL.pathname：返回路径，以斜杠<code>/</code>开头</li><li>URL.search：返回查询字符串，以问号<code>?</code>开头</li><li>URL.searchParams：返回一个<code>URLSearchParams</code>实例，该属性是<code>Location</code>对象没有的</li><li>URL.hash：返回片段识别符，以井号<code>#</code>开头</li><li>URL.password：返回域名前面的密码</li><li>URL.username：返回域名前面的用户名</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

url<span class="token punctuation">.</span>href
<span class="token comment">// &quot;http://user:passwd@www.example.com:4097/path/a.html?x=111#part1&quot;</span>
url<span class="token punctuation">.</span>protocol
<span class="token comment">// &quot;http:&quot;</span>
url<span class="token punctuation">.</span>hostname
<span class="token comment">// &quot;www.example.com&quot;</span>
url<span class="token punctuation">.</span>host
<span class="token comment">// &quot;www.example.com:4097&quot;</span>
url<span class="token punctuation">.</span>port
<span class="token comment">// &quot;4097&quot;</span>
url<span class="token punctuation">.</span>origin
<span class="token comment">// &quot;http://www.example.com:4097&quot;</span>
url<span class="token punctuation">.</span>pathname
<span class="token comment">// &quot;/path/a.html&quot;</span>
url<span class="token punctuation">.</span>search
<span class="token comment">// &quot;?x=111&quot;</span>
url<span class="token punctuation">.</span>searchParams
<span class="token comment">// URLSearchParams {}</span>
url<span class="token punctuation">.</span>hash
<span class="token comment">// &quot;#part1&quot;</span>
url<span class="token punctuation">.</span>password
<span class="token comment">// &quot;passwd&quot;</span>
url<span class="token punctuation">.</span>username
<span class="token comment">// &quot;user&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些属性里面，只有<code>origin</code>属性是只读的，其他属性都可写，并且会立即生效。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;http://example.com/index.html#part1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

url<span class="token punctuation">.</span>pathname <span class="token operator">=</span> <span class="token string">&#39;index2.html&#39;</span><span class="token punctuation">;</span>
url<span class="token punctuation">.</span>href <span class="token comment">// &quot;http://example.com/index2.html#part1&quot;</span>

url<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">&#39;#part2&#39;</span><span class="token punctuation">;</span>
url<span class="token punctuation">.</span>href <span class="token comment">// &quot;http://example.com/index2.html#part2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，改变 URL 实例的<code>pathname</code>属性和<code>hash</code>属性，都会实时反映在 URL 实例当中。</p><h2 id="_8-urlsearchparams-对象-代替内置模块querystring使用" tabindex="-1"><a class="header-anchor" href="#_8-urlsearchparams-对象-代替内置模块querystring使用" aria-hidden="true">#</a> 8.URLSearchParams 对象(代替内置模块querystring使用)</h2><blockquote><ol><li><p>nodejs内置模块<code>querystring</code>有些方法要被废弃，我们使用<code>URLSearchParams API </code>构造代替</p></li><li><p>如果你的nodejs版本大于18，可以使用<code>const querystring= require(&#39;node:querystring&#39;)</code> \`\`querystring<code>比</code>URLSearchParams<code>性能更高，但不是 标准化的 API。使用</code>URLSearchParams\`当性能不重要或 当需要与浏览器代码兼容时。</p></li><li><p>还可以安装<code>qs</code>模块，使用方式和<code>querystring</code>一样</p></li></ol></blockquote><h3 id="_8-1-概述" tabindex="-1"><a class="header-anchor" href="#_8-1-概述" aria-hidden="true">#</a> 8.1 概述</h3><p><code>URLSearchParams</code>对象是浏览器的原生对象，用来构造、解析和处理 URL 的查询字符串（即 URL 问号后面的部分）。</p><p>它本身也是一个构造函数，可以生成实例。参数可以为查询字符串，起首的问号<code>?</code>有没有都行，也可以是对应查询字符串的数组或对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方法一：传入字符串</span>
<span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">&#39;?foo=1&amp;bar=2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 方法二：传入数组</span>
<span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 方法三：传入对象</span>
<span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&#39;foo&#39;</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string-property property">&#39;bar&#39;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>URLSearchParams</code>会对查询字符串自动编码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token string">&#39;你好&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;foo=%E4%BD%A0%E5%A5%BD&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>foo</code>的值是汉字，<code>URLSearchParams</code>对其自动进行 URL 编码。</p><p>浏览器向服务器发送表单数据时，可以直接使用<code>URLSearchParams</code>实例作为表单数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com/api&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> params
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>fetch</code>命令向服务器发送命令时，可以直接使用<code>URLSearchParams</code>实例。</p><p><code>URLSearchParams</code>可以与<code>URL()</code>接口结合使用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;somedefault&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，URL 实例的<code>searchParams</code>属性就是一个<code>URLSearchParams</code>实例，所以可以使用<code>URLSearchParams</code>接口的<code>get</code>方法。</p><p><code>URLSearchParams</code>实例有遍历器接口，可以用<code>for...of</code>循环遍历。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string-property property">&#39;bar&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">of</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// foo: 1</span>
<span class="token comment">// bar: 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>URLSearchParams</code>没有实例属性，只有实例方法。</p><h3 id="_8-2-urlsearchparams-tostring" tabindex="-1"><a class="header-anchor" href="#_8-2-urlsearchparams-tostring" aria-hidden="true">#</a> 8.2 URLSearchParams.toString()</h3><p><code>toString</code>方法返回实例的字符串形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com?foo=1&amp;bar=2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>

params<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;foo=1&amp;bar=2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么需要字符串的场合，会自动调用<code>toString</code>方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token number">2.0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname <span class="token operator">+</span> <span class="token string">&#39;?&#39;</span> <span class="token operator">+</span> params<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>location.href</code>赋值时，可以直接使用<code>params</code>对象。这时就会自动调用<code>toString</code>方法。</p><h3 id="_8-3-urlsearchparams-has" tabindex="-1"><a class="header-anchor" href="#_8-3-urlsearchparams-has" aria-hidden="true">#</a> 8.3 URLSearchParams.has()</h3><p><code>has()</code>方法返回一个布尔值，表示查询字符串是否包含指定的键名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string-property property">&#39;bar&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
params<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4-urlsearchparams-get-urlsearchparams-getall" tabindex="-1"><a class="header-anchor" href="#_8-4-urlsearchparams-get-urlsearchparams-getall" aria-hidden="true">#</a> 8.4 URLSearchParams.get()，URLSearchParams.getAll()</h3><p><code>get()</code>方法用来读取查询字符串里面的指定键。它接受键名作为参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">&#39;?foo=1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot;</span>
params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个地方需要注意。第一，它返回的是字符串，如果原始值是数值，需要转一下类型；第二，如果指定的键名不存在，返回值是<code>null</code>。</p><p>如果有多个的同名键，<code>get</code>返回位置最前面的那个键值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">&#39;?foo=3&amp;foo=2&amp;foo=1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，查询字符串有三个<code>foo</code>键，<code>get</code>方法返回最前面的键值<code>3</code>。</p><p><code>getAll()</code>方法返回一个数组，成员是指定键的所有键值。它接受键名作为参数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">&#39;?foo=1&amp;foo=2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [&quot;1&quot;, &quot;2&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，查询字符串有两个<code>foo</code>键，<code>getAll</code>返回的数组就有两个成员。</p><h3 id="_8-5-urlsearchparams-keys-urlsearchparams-values-urlsearchparams-entries" tabindex="-1"><a class="header-anchor" href="#_8-5-urlsearchparams-keys-urlsearchparams-values-urlsearchparams-entries" aria-hidden="true">#</a> 8.5 URLSearchParams.keys()，URLSearchParams.values()，URLSearchParams.entries()</h3><p>这三个方法都返回一个遍历器对象，供<code>for...of</code>循环遍历。它们的区别在于，<code>keys</code>方法返回的是键名的遍历器，<code>values</code>方法返回的是键值的遍历器，<code>entries</code>返回的是键值对的遍历器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token string">&#39;a=1&amp;b=2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">of</span> params<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// a</span>
<span class="token comment">// b</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">of</span> params<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">of</span> params<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// [&quot;a&quot;, &quot;1&quot;]</span>
<span class="token comment">// [&quot;b&quot;, &quot;2&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果直接对<code>URLSearchParams</code>进行遍历，其实内部调用的就是<code>entries</code>接口。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">of</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> p <span class="token keyword">of</span> params<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-qs模块" tabindex="-1"><a class="header-anchor" href="#_9-qs模块" aria-hidden="true">#</a> 9.qs模块</h2><p>qs是一个npm仓库所管理的包,可通过npm install qs命令进行安装.</p><ol><li>qs.parse()将URL解析成对象的形式</li><li>qs.stringify()将对象 序列化成URL的形式，以&amp;进行拼接</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;qs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token number">1</span><span class="token punctuation">.</span>qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&quot;username=&#39;admin&#39;&amp;password=&#39;123456&#39;&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// Object { username: &quot;admin&quot;, password: &quot;123456&quot; }</span>

<span class="token number">2</span><span class="token punctuation">.</span>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// username=admin&amp;password=123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>有什么区别<span class="token operator">?</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;hehe&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
qs<span class="token punctuation">.</span>stringify序列化结果如
name<span class="token operator">=</span>hehe<span class="token operator">&amp;</span>age<span class="token operator">=</span><span class="token number">10</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
而<span class="token constant">JSON</span><span class="token punctuation">.</span>stringify序列化结果如下：
<span class="token string">&quot;{&quot;</span>a<span class="token string">&quot;:&quot;</span>hehe<span class="token string">&quot;,&quot;</span>age<span class="token string">&quot;:10}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69);function T(C,H){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,u,n("ul",null,[n("li",null,[s("Node.js 的API文档（英文）： "),n("a",d,[s("https://nodejs.org/docs/latest-v8.x/api/index.html"),e(a)])]),n("li",null,[s("Node.js 的API文档（中文）："),n("a",k,[s("http://nodejs.cn/api/"),e(a)])])]),v,n("ul",null,[n("li",null,[s("打开os模块的源码："),n("a",m,[s("https://github.com/nodejs/node/blob/master/lib/os.js，翻到最底部，找到"),e(a)]),s(),h,s("这个方法")]),b,g,n("li",null,[y,s(" 的实现，在 "),n("a",f,[s("https://github.com/nodejs/node/blob/master/src/node_os.cc"),e(a)]),s(" 里，里面都是 C++ 的代码。比如有一个"),w,s("方法。")])]),x,n("p",null,[s("res.write() API的信息量略大，建议看下"),n("a",q,[s("官方文档"),e(a)]),s("。")]),j,n("p",null,[s("访问地址 "),n("a",_,[s("http://127.0.0.1:3000/hello?nick=chyingp&hello=world"),e(a)])]),R,n("p",null,[s("由于我并没有 "),n("a",L,[s("www.chyingp.com"),e(a)]),s(" 这个域名，于是先配置本地host")]),S,n("p",null,[s("启动服务，并在浏览器里访问 "),n("a",U,[s("http://www.chyingp.com:3000"),e(a)]),s("。注意，浏览器会提示你证书不可靠，点击 信任并继续访问 就行了。")]),P])}const I=p(i,[["render",T],["__file","05.html.vue"]]);export{I as default};
