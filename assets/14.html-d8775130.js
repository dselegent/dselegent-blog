import{ab as e,G as o,H as c,E as n,S as s,N as t,ac as p,W as l}from"./framework-09305b5d.js";const i={},u=p(`<h1 id="_14-【ts类型声明-keepalive】" tabindex="-1"><a class="header-anchor" href="#_14-【ts类型声明-keepalive】" aria-hidden="true">#</a> 14 【TS类型声明 keepAlive】</h1><h2 id="_1-ts-类型声明使用-讲解" tabindex="-1"><a class="header-anchor" href="#_1-ts-类型声明使用-讲解" aria-hidden="true">#</a> 1.Ts 类型声明使用 &amp; 讲解</h2><blockquote><p>该文章未归纳完，那么多API肯定也说不完。。不过也涵盖了主要的组合式 API 的 TS类型。</p><p>核心：大部分都是运用API函数泛型来定义类型。</p></blockquote><h3 id="_1-1-父组件相关的" tabindex="-1"><a class="header-anchor" href="#_1-1-父组件相关的" aria-hidden="true">#</a> 1.1 父组件相关的</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>onsub<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleChange<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>childRef<span class="token punctuation">&#39;</span></span> <span class="token attr-name">:child</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>2<span class="token punctuation">&#39;</span></span> <span class="token attr-name">:strData</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span>1&quot;<span class="token punctuation">&#39;</span></span> <span class="token attr-name">:arrFor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@elPsyKongroo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>onsub<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>ts<span class="token punctuation">&#39;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> child <span class="token keyword">from</span> <span class="token string">&#39;./child.vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span>Ref<span class="token punctuation">,</span>reactive<span class="token punctuation">,</span>computed<span class="token punctuation">,</span>customRef<span class="token punctuation">,</span>watch<span class="token punctuation">,</span>provide <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
 
<span class="token comment">//&gt; ref</span>
<span class="token comment">// interface Ref&lt;T&gt; {</span>
<span class="token comment">//   value: T</span>
<span class="token comment">// }</span>
<span class="token comment">// function ref&lt;T&gt;(value: T): Ref&lt;T&gt;</span>
<span class="token keyword">const</span> year <span class="token operator">=</span> ref<span class="token operator">&lt;</span>string <span class="token operator">|</span> number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;2020&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 如果泛型的类型未知，则建议将 ref 转换为 Ref&lt;T&gt;：</span>
<span class="token keyword">function</span> useState<span class="token operator">&lt;</span>State <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initial<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>initial<span class="token punctuation">)</span> <span class="token keyword">as</span> Ref<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> <span class="token comment">// state.value -&gt; State extends string</span>
  <span class="token keyword">return</span> state
<span class="token punctuation">}</span>
 
<span class="token comment">//&gt; reactive</span>
<span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> string
  year<span class="token operator">?</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>
<span class="token keyword">const</span> book <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>Book<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">&#39;唉，真有氏的怀表怎么停了!&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// function reactive&lt;T extends object&gt;(target: T): UnwrapNestedRefs&lt;T&gt;</span>
 
<span class="token comment">//&gt; customRef</span>
<span class="token comment">// function customRef&lt;T&gt;(factory: CustomRefFactory&lt;T&gt;): Ref&lt;T&gt;</span>
<span class="token comment">// type CustomRefFactory&lt;T&gt; = (</span>
<span class="token comment">//   track: () =&gt; void,</span>
<span class="token comment">//   trigger: () =&gt; void</span>
<span class="token comment">// ) =&gt; {</span>
<span class="token comment">//   get: () =&gt; T</span>
<span class="token comment">//   set: (value: T) =&gt; void</span>
<span class="token comment">// }</span>
<span class="token keyword">function</span> <span class="token function">useDebouncedRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span>string<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">200</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> customRef<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">track<span class="token punctuation">,</span> trigger</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> newValue
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a23 <span class="token operator">=</span> <span class="token function">useDebouncedRef</span><span class="token punctuation">(</span><span class="token string">&#39;heelo1&#39;</span><span class="token punctuation">)</span>
a23<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>
 
 
<span class="token comment">//&gt; provide 与 inject   // inject示例在同级child.vue里</span>
<span class="token comment">// interface InjectionKey&lt;T&gt; extends Symbol {}</span>
<span class="token comment">// function provide&lt;T&gt;(key: InjectionKey&lt;T&gt; | string, value: T): void</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;static&#39;</span><span class="token punctuation">,</span>year<span class="token punctuation">)</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;pbook&#39;</span><span class="token punctuation">,</span>book<span class="token punctuation">)</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">&#39;changeFn&#39;</span><span class="token punctuation">,</span>onsub<span class="token punctuation">)</span>
<span class="token comment">//! 有时候可能需要在子组件修改响应式的数据，此时provide一个方法给子组件调用</span>
 
 
 
<span class="token comment">//&gt; computed</span>
<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> doubleCount <span class="token operator">=</span> computed<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>
 
<span class="token comment">//&gt; watch</span>
watch<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// watch&lt;Ref&lt;number&gt;&gt;(count,()=&gt;{}) // 也可以</span>
<span class="token keyword">interface</span> <span class="token class-name">ReactiveData2</span><span class="token punctuation">{</span>
  <span class="token literal-property property">content2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">count2</span><span class="token operator">:</span> number
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> refData <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> reactiveData <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">content</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">110</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> reactiveData2 <span class="token operator">=</span> reactive<span class="token operator">&lt;</span>ReactiveData2<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">content2</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">count2</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
watch<span class="token operator">&lt;</span><span class="token punctuation">[</span>Ref<span class="token operator">&lt;</span>number<span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number<span class="token punctuation">,</span>ReactiveData2<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span>refData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>reactiveData<span class="token punctuation">.</span>content<span class="token punctuation">.</span>count<span class="token punctuation">,</span>reactiveData2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
 
 
<span class="token comment">// defineExpose 暴露的内容</span>
<span class="token comment">// let childRef = ref()</span>
<span class="token comment">// setTimeout(() =&gt; {</span>
<span class="token comment">//   console.log(childRef.value.ex1); // 如果是子组件的ref对象数据，会自动解包 .value</span>
<span class="token comment">// }, 1000);</span>
 
<span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>target <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">onsub</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
  year<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2036</span>
  book<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;掌管未来女神的作战计划 El psy kongroo&#39;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-子组件相关的" tabindex="-1"><a class="header-anchor" href="#_1-2-子组件相关的" aria-hidden="true">#</a> 1.2 子组件相关的</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>studyContent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{a}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{a2}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>{{pbook.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>ts<span class="token punctuation">&#39;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> inject<span class="token punctuation">,</span>ref<span class="token punctuation">,</span>Ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span>
 
<span class="token comment">//! defineProps 或 defineEmits 只能是要么使用\`运行时声明\`，要么使用\`类型声明\`。同时使用两种声明方式会导致编译报错。</span>
 
<span class="token comment">//&gt; defineProps</span>
<span class="token comment">// 仅限类型的 defineProps 声明的不足之处在于，它没有可以给 props 提供默认值的方式。为了解决这个问题，提供了 withDefaults 编译器宏：</span>
<span class="token comment">//? 运行时声明 的方式只能限制参数类型，无法限制是否必传、和默认值</span>
<span class="token comment">// const props = defineProps({</span>
<span class="token comment">//   child: String,</span>
<span class="token comment">//   sda: String, //undefined</span>
<span class="token comment">//   strData: String,</span>
<span class="token comment">//   arrFor: Array</span>
<span class="token comment">// })</span>
 
<span class="token comment">//? 类型声明 的方式1：能限制是否必传 &gt; defineProps 单独使用该api</span>
<span class="token comment">// interface arrfor {</span>
<span class="token comment">//   name:string,</span>
<span class="token comment">//   children?:Array&lt;arrfor&gt;</span>
<span class="token comment">// }</span>
<span class="token comment">// const props = defineProps&lt;{</span>
<span class="token comment">//   child?: string|number,</span>
<span class="token comment">//   sda?: string, //undefined</span>
<span class="token comment">//   strData?: string,</span>
<span class="token comment">//   arrFor: []</span>
<span class="token comment">// }&gt;();</span>
<span class="token comment">// console.log(props);</span>
 
<span class="token comment">//? 类型声明 的方式2：能限制是否必传，以及默认值</span>
<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">child</span><span class="token operator">:</span> string<span class="token operator">|</span>number<span class="token punctuation">,</span>
  sda<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token comment">// 未设置默认值，为 undefined</span>
  <span class="token literal-property property">strData</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  msg<span class="token operator">?</span><span class="token operator">:</span> string
  labels<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  obj<span class="token operator">?</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span>number<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">withDefaults</span><span class="token punctuation">(</span>defineProps<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">labels</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">obj</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span>props<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 
<span class="token comment">//&gt; defineEmits</span>
<span class="token comment">// // 等效this.$emit(&#39;eventName&#39;,&#39;data&#39;)</span>
<span class="token comment">// const emits = defineEmits([&#39;update&#39;, &#39;delete&#39;])</span>
<span class="token comment">// emits(&#39;delete&#39;,&#39;测试&#39;)</span>
 
<span class="token comment">// emits的类型声明写法，()的e id只是形参名字，不影响其他。</span>
<span class="token keyword">const</span> emit <span class="token operator">=</span> defineEmits<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">&#39;elPsyKongroo&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
  <span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// emit(&#39;elPsyKongroo&#39;, 2)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">//&gt; defineExpose</span>
<span class="token keyword">interface</span> <span class="token class-name">exFace</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">ex1</span><span class="token operator">:</span>Ref<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  ex2<span class="token operator">?</span><span class="token operator">:</span>number
<span class="token punctuation">}</span>
<span class="token keyword">let</span> ex1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> <span class="token literal-property property">exObj</span><span class="token operator">:</span>exFace <span class="token operator">=</span> <span class="token punctuation">{</span>
  ex1<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 源码类型: const defineExpose: (exposed?: Record&lt;string, any&gt;) =&gt; void</span>
<span class="token function">defineExpose</span><span class="token punctuation">(</span>exObj<span class="token punctuation">)</span>
 
 
<span class="token comment">//&gt; inject</span>
<span class="token comment">// interface InjectionKey&lt;T&gt; extends Symbol {}</span>
<span class="token comment">// // 没有默认值</span>
<span class="token comment">// function inject&lt;T&gt;(key: InjectionKey&lt;T&gt; | string): T | undefined</span>
<span class="token comment">// // 有默认值</span>
<span class="token comment">// function inject&lt;T&gt;(key: InjectionKey&lt;T&gt; | string, defaultValue: T): T</span>
 
<span class="token comment">// // 有工厂函数</span>
<span class="token comment">// function inject&lt;T&gt;(</span>
<span class="token comment">//   key: InjectionKey&lt;T&gt; | string,</span>
<span class="token comment">//   defaultValue: () =&gt; T,</span>
<span class="token comment">//   treatDefaultAsFactory: true</span>
<span class="token comment">// ): T</span>
<span class="token keyword">let</span> defaultFn <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;ab12&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token string">&#39;雏见泽&#39;</span><span class="token operator">+</span><span class="token string">&#39;棉流&#39;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>defaultFn<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
 
<span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> string
  year<span class="token operator">?</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> inject<span class="token operator">&lt;</span>Ref<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;static&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 无默认值</span>
  <span class="token comment">//! 即使在子组件可以直接修改，但最好不要这么做，将会影响到provide的父组件以及其他所有inject的子组件。</span>
  <span class="token comment">//! 这会导致 溯源 非常麻烦，所以修改方式统一为在父组件provide一个方法，子组件调用进行修改！</span>
  <span class="token comment">// a.value = &#39;直接作死修改&#39;</span>
<span class="token keyword">let</span> pbook <span class="token operator">=</span> inject<span class="token operator">&lt;</span>Book<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;pbook&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 无默认值</span>
<span class="token keyword">let</span> <span class="token function-variable function">changeFn</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">val</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span> <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;changeFn&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 无默认值</span>
<span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;static2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;????&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 有默认值</span>
<span class="token keyword">let</span> a3 <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;static3&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 无默认值且未找到则为 undefined</span>
<span class="token keyword">let</span> globalGuide <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">&#39;guide&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 访问全局的</span>
 
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">changeFn</span><span class="token punctuation">(</span><span class="token string">&#39;injectFn传参&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-keep-alive" tabindex="-1"><a class="header-anchor" href="#_2-keep-alive" aria-hidden="true">#</a> 2.keep-alive</h2><h3 id="_2-1-基本介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-基本介绍" aria-hidden="true">#</a> 2.1 基本介绍</h3><p>有时候我们不希望组件被重新渲染影响使用体验；或者处于性能考虑，避免多次重复渲染降低性能。而是希望组件可以缓存下来,维持当前的状态。这时候就需要用到keep-alive组件。</p><p>开启keep-alive 生命周期的变化</p><ul><li>初次进入时： onMounted&gt; onActivated</li><li>退出后触发 <code>deactivated</code></li><li>再次进入：</li><li>只会触发 onActivated</li><li>事件挂载的方法等，只执行一次的放在 onMounted中；组件每次进去执行的方法放在 onActivated中</li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">:exclude</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">:max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Props：</p><ul><li>include - string | RegExp | Array。只有名称匹配的组件会被缓存。</li><li>exclude - string | RegExp | Array。任何名称匹配的组件都不会被缓存。</li><li>max - number | string。最多可以缓存多少组件实例。</li></ul><p><strong>用法：</strong></p><p><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。</p><p><strong>主要用于保留组件状态或避免重新渲染。</strong></p><blockquote><p>注意事项：</p><ol><li><p>优先级: 如果 <code>exclude</code> 和 <code>include</code> 内都有同个组件名， <code>exclude</code> 优先级高于 <code>include</code></p></li><li><p>缓存销毁: <code>max</code> 当已缓存的组件数量超过 <code>max</code> 值，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉。</p></li><li><p>生命周期: 被缓存的组件才会调用 <code>activated</code> 这些缓存相关的生命周期 ,换句话说就是 <code>exclude</code> 内的组件不会触发 activated！！</p></li><li><p>离开组件、再度激活: 当组件在 <code>&lt;keep-alive&gt;</code> 内被切换时，它的 mounted 和 unmounted 生命周期钩子不会被调用，取而代之的是 activated 和 deactivated。(这会运用在 <code>&lt;keep-alive&gt;</code> 的直接子节点及其所有子孙节点。)</p></li></ol></blockquote><h3 id="_2-2-使用案例" tabindex="-1"><a class="header-anchor" href="#_2-2-使用案例" aria-hidden="true">#</a> 2.2 使用案例</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:exclude</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;test1&#39;]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;test1&#39;,&#39;test2&#39;]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>1<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>dynamic<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>changeComponent<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>更改组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> test1 <span class="token keyword">from</span> <span class="token string">&#39;./test-components/test1.vue&#39;</span>
<span class="token keyword">import</span> test2 <span class="token keyword">from</span> <span class="token string">&#39;./test-components/test2.vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span>shallowRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">let</span> <span class="token literal-property property">dynamic</span><span class="token operator">:</span>any <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span>test1<span class="token punctuation">)</span>
<span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">changeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dynamic<span class="token punctuation">.</span>value <span class="token operator">=</span> test2
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    dynamic<span class="token punctuation">.</span>value <span class="token operator">=</span> test1
  <span class="token punctuation">}</span>
  state<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>value
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong><code>include</code> 和 <code>exclude</code></strong></p><p><code>include</code> 和 <code>exclude</code> prop 允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p></li></ul><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!-- 逗号分隔字符串 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>a,b<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
 
<span class="token comment">&lt;!-- regex (使用 \`v-bind\`) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/a|b/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
 
<span class="token comment">&lt;!-- Array (使用 \`v-bind\`) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keep-alive</span> <span class="token attr-name">:include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[&#39;a&#39;, &#39;b&#39;]<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>view<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keep-alive</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用了 include / exclude 后，必须显式声明组件的 name !!!</strong><strong>这样才能与缓存组件匹配、生效。</strong></p><blockquote><p><strong>提示</strong></p><p>在 3.2.34 或以上的版本中, 使用 <code>&lt;script setup&gt;</code> 的单文件组件会自动根据文件名生成对应的 <code>name</code> 选项，无需再手动声明。</p></blockquote><p>注意，<code>&lt;keep-alive&gt;</code> 是用在其一个直属的子组件被切换的情形。如果你在其中有 <code>v-for</code> 则不会工作。如果有上述的多个条件性的子元素，<code>&lt;keep-alive&gt;</code> 要求同时只有一个子元素被渲染。</p><h3 id="_2-3-缓存实例的生命周期" tabindex="-1"><a class="header-anchor" href="#_2-3-缓存实例的生命周期" aria-hidden="true">#</a> 2.3 缓存实例的生命周期</h3><p>当一个组件实例从 DOM 上移除但因为被 <code>&lt;KeepAlive&gt;</code> 缓存而仍作为组件树的一部分时，它将变为<strong>不活跃</strong>状态而不是被卸载。当一个组件实例作为缓存树的一部分插入到 DOM 中时，它将重新<strong>被激活</strong>。</p>`,28),r={href:"https://staging-cn.vuejs.org/api/composition-api-lifecycle.html#onactivated",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"onActivated()",-1),d={href:"https://staging-cn.vuejs.org/api/composition-api-lifecycle.html#ondeactivated",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"onDeactivated()",-1),m=p(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> onActivated<span class="token punctuation">,</span> onDeactivated <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token function">onActivated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 调用时机为首次挂载</span>
  <span class="token comment">// 以及每次从缓存中被重新插入时</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">onDeactivated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在从 DOM 上移除、进入缓存</span>
  <span class="token comment">// 以及组件卸载时调用</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意：</p><ul><li><code>onActivated</code> 在组件挂载时也会调用，并且 <code>onDeactivated</code> 在组件卸载时也会调用。</li><li>这两个钩子不仅适用于 <code>&lt;KeepAlive&gt;</code> 缓存的根组件，也适用于缓存树中的后代组件。</li></ul>`,3);function g(b,f){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("一个持续存在的组件可以通过 "),n("a",r,[k,t(a)]),s(" 和 "),n("a",d,[v,t(a)]),s(" 注册相应的两个状态的生命周期钩子：")]),m])}const h=e(i,[["render",g],["__file","14.html.vue"]]);export{h as default};
