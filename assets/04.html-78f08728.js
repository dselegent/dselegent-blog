import{ab as n,G as s,H as a,ac as p}from"./framework-09305b5d.js";const t={},e=p(`<h1 id="_04-【对象】" tabindex="-1"><a class="header-anchor" href="#_04-【对象】" aria-hidden="true">#</a> 04 【对象】</h1><h2 id="_1-对象基础" tabindex="-1"><a class="header-anchor" href="#_1-对象基础" aria-hidden="true">#</a> 1.对象基础</h2><h3 id="_1-1-对象介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-对象介绍" aria-hidden="true">#</a> 1.1 对象介绍</h3><p>对象是JS中的引用数据类型<br><strong>对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性</strong><br> 使用typeof检查一个对象时，会返回object</p><p>对象（object）是 “键值对” 的集合，表示属性和值的映射关系。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobbies</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;足球&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;编程&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>属性名（键名，key）: 属性值（value）</li><li>JS 中，大括号表示对象</li><li>最后的属性后面不加逗号</li><li>{} 后加上分号</li></ul><h3 id="_1-2-对象分类" tabindex="-1"><a class="header-anchor" href="#_1-2-对象分类" aria-hidden="true">#</a> 1.2 对象分类</h3><p><strong>1.内建对象</strong></p><ul><li>由ES标准中定义的对象，在任何的ES的实现中都可以使用</li><li>比如：Math String Number Boolean Function Object....</li></ul><p><strong>2. 宿主对象</strong></p><ul><li>由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</li><li>比如 BOM DOM</li></ul><p><strong>3.自定义对象</strong></p><p><strong>由开发人员自己创建的对象</strong></p><p>创建对象<br> 方式一：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>方式二：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-对象的语法" tabindex="-1"><a class="header-anchor" href="#_1-3-对象的语法" aria-hidden="true">#</a> 1.3 对象的语法</h3><p>k 和 v 之间用冒号分隔，每组 <code>k:v</code> 之间用逗号分隔，最后一个 <code>k:v</code> 对后可以不书写逗号。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">k</span><span class="token operator">:</span> v<span class="token punctuation">,</span>
    <span class="token constant">K</span><span class="token operator">:</span> v<span class="token punctuation">,</span>
    <span class="token constant">K</span><span class="token operator">:</span> v<span class="token punctuation">,</span>
    <span class="token constant">K</span><span class="token operator">:</span> v
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-属性是否加引号" tabindex="-1"><a class="header-anchor" href="#_1-4-属性是否加引号" aria-hidden="true">#</a> 1.4 属性是否加引号</h3><p>如果对象的属性键名不符合 JS 标识符命名规范，则这个键名必须用引号包裹。</p><blockquote><p>注意：对象中的 key 本身就是字符串格式，只是符合 JS 标识符命名规范的可以省略引号！</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span> 
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobbys</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;足球&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;游泳&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;编程&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;favorite-book&#39;</span><span class="token operator">:</span> <span class="token string">&#39;舒克和贝塔&#39;</span>
    <span class="token comment">// 属性名中有短横，不符合JS标识符命名规范，属性名必须用引号包裹。</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-属性的增加" tabindex="-1"><a class="header-anchor" href="#_1-5-属性的增加" aria-hidden="true">#</a> 1.5 属性的增加</h3><p><strong>向对象中添加属性</strong><br> 语法：<br> 对象.属性名 = 属性值;<br><strong>对象[&quot;属性名&quot;] = 属性值;</strong> //这种方式能够使用特殊的属性名</p><p><strong>对象的属性名没有任何要求，不需要遵守标识符的规范，但是在开发中，尽量按照标识符的要求去写。</strong><br> 属性值也可以任意的数据类型。</p><p>如果对象本身没有某个属性值，则用点语法赋值时，这个属性会被创建出来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;zjr-b&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-属性的删除" tabindex="-1"><a class="header-anchor" href="#_1-6-属性的删除" aria-hidden="true">#</a> 1.6 属性的删除</h3><p><strong>删除对象中的属性</strong><br> 语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">delete</span> 对象<span class="token punctuation">.</span>属性名  
<span class="token keyword">delete</span> 对象<span class="token punctuation">[</span><span class="token string">&quot;属性名&quot;</span><span class="token punctuation">]</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;zjr-b&#39;</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">[</span><span class="token string">&#39;zjr-b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-属性的更改" tabindex="-1"><a class="header-anchor" href="#_1-7-属性的更改" aria-hidden="true">#</a> 1.7 属性的更改</h3><p>直接使用赋值运算符重新对某属性赋值即可更改属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>a<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-属性的访问" tabindex="-1"><a class="header-anchor" href="#_1-8-属性的访问" aria-hidden="true">#</a> 1.8 属性的访问</h3><p>读取对象中的属性<br> 语法：<br> 对象.属性名<br> 对象[&quot;属性名&quot;] <code>&quot;属性名&quot;</code>可以使字符串常量，也可以是字符串变量<br> 如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined</p><p>可以用“点语法”访问对象中指定键的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xiaoming<span class="token punctuation">.</span>name<span class="token punctuation">;</span>		<span class="token comment">// &#39;小明&#39;</span>
xiaoming<span class="token punctuation">.</span>age<span class="token punctuation">;</span>		<span class="token comment">// 12</span>
xiaoming<span class="token punctuation">.</span>hobbys<span class="token punctuation">;</span>	<span class="token comment">// [&#39;足球&#39;, &#39;游泳&#39;, &#39;编程&#39;] </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果属性名不符合 JS 标识符命名规范，则必须用方括号的写法来访问。</p><blockquote><p>方括号 <code>[]</code> 中只能是字符串类型！</p><p>任何对象的属性名都可以通过 <code>[]</code> 来访问，只要把属性名写为字符串的形式。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xiaoming<span class="token punctuation">[</span><span class="token string">&#39;favorite-book&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">// &#39;舒克和贝塔&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果属性名以变量形式存储，则必须使用方括号形式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-基本数据类型和引用数据类型" tabindex="-1"><a class="header-anchor" href="#_2-基本数据类型和引用数据类型" aria-hidden="true">#</a> 2.基本数据类型和引用数据类型</h2><p>基本数据类型<br> String Number Boolean Null Undefined<br> 引用数据类型<br> Object<br><strong>基本数据类型的数据，变量是直接保存的它的值。</strong><br> 变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。<br><strong>引用数据类型的数据，变量是保存的对象的引用（内存地址）。</strong><br> 如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。<br> 比较两个变量时，对于基本数据类型，比较的就是值，<br> 对于引用数据类型比较的是地址，地址相同才相同</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>			<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
			<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
			a<span class="token operator">++</span><span class="token punctuation">;</span>
			
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a = &quot;</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b = &quot;</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;孙悟空&quot;</span><span class="token punctuation">;</span>
			
			<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>
			
			<span class="token comment">//修改obj的name属性</span>
			obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;猪八戒&quot;</span><span class="token punctuation">;</span>

			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			<span class="token comment">//设置obj2为null</span>
			obj2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			
			<span class="token comment">/*console.log(obj);
			console.log(obj2);*/</span>
			
			<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
			<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
			<span class="token comment">//console.log(c == d);</span>
			
			<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">var</span> obj4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			obj3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;沙和尚&quot;</span><span class="token punctuation">;</span>
			obj4<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;沙和尚&quot;</span><span class="token punctuation">;</span>
			
			<span class="token comment">/*console.log(obj3);
			console.log(obj4);*/</span>
			
			<span class="token comment">/*
			 * 当比较两个基本数据类型的值时，就是比较值。
			 * 而比较两个引用数据类型时，它是比较的对象的内存地址，
			 * 		如果两个对象是一摸一样的，但是地址不同，它也会返回false
			 */</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">==</span> obj4<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>基本数据类型在内存中的表现</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/05f02af34af3aca236c1c9a70a4b190c0a32a9db.png" alt="image-20220813142838514" tabindex="0" loading="lazy"><figcaption>image-20220813142838514</figcaption></figure><p><strong>引用数据类型在内存中的表现</strong></p><blockquote><p>这个很像c语言的指针，new object是在堆内存申请了一块内存空间（malloc），并把对应的地址赋值给（指针变量）obj，然后把obj的值（地址）赋值给obj2，两个（指针）就指向同一片内存空间</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/2294f60ea3558caf8da4fcca5447dedb81c373eb.png" alt="image-20220813142850159" tabindex="0" loading="lazy"><figcaption>image-20220813142850159</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/44adfa66f12130a78ed01c46ceb1558d2fb5b39f.png" alt="image-20220813142858409" tabindex="0" loading="lazy"><figcaption>image-20220813142858409</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/873b5b08f53bf00681b1cf892b31c834a0dda8d4.png" alt="image-20220813142905754" tabindex="0" loading="lazy"><figcaption>image-20220813142905754</figcaption></figure><h2 id="_3-对象的方法" tabindex="-1"><a class="header-anchor" href="#_3-对象的方法" aria-hidden="true">#</a> 3.对象的方法</h2><h3 id="_3-1-认识方法" tabindex="-1"><a class="header-anchor" href="#_3-1-认识方法" aria-hidden="true">#</a> 3.1 认识方法</h3><p><strong>方法（method）</strong><br> 如果某个属性值是函数，则它也被称为对象的 “方法”。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobbys</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;足球&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;游泳&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;编程&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;favorite-book&#39;</span><span class="token operator">:</span> <span class="token string">&#39;舒克和贝塔&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// sayHello方法</span>
    <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;你好我是小明，今年12岁，我是个男生&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 “点语法” 可以调用对象的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>xiaoming<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-2-方法和函数" tabindex="-1"><a class="header-anchor" href="#_3-2-方法和函数" aria-hidden="true">#</a> 3.2 方法和函数</h3><p>方法也是函数，只不过方法是对象的 “函数属性”，它需要用对象打点调用。</p><p>在正式学习了什么是 “方法” 之后，就能深入理解之前我们学习的一些函数的书写形式了，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>对象.方法名();<br> 函数名()</strong></p></blockquote><h3 id="_3-3-对象的遍历" tabindex="-1"><a class="header-anchor" href="#_3-3-对象的遍历" aria-hidden="true">#</a> 3.3 对象的遍历</h3><p>和遍历数组类似，对象也可以被遍历，遍历对象需要使用 for...in... 循环。</p><p>使用 for...in... 循环可以遍历对象的每个键。</p><p>在后续的 ES6 相关课程中，还会学习新的对象遍历的方式。</p><p>【for...in...循环】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">循环遍历对象自身的和继承的可枚举属性</span><span class="token punctuation">(</span>不含Symbol属性<span class="token punctuation">)</span><span class="token punctuation">.</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// k: 循环变量，它会依次成为对象的每一个键</span>
<span class="token comment">// obj: 要遍历的对象</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;属性&#39;</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">&#39;的值是&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【案例】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">88</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;对象obj的属性&#39;</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">&#39;的值是&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
对象obj的属性a的值是11
对象obj的属性b的值是22
对象obj的属性c的值是88
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> zjr <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">love</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1800000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">home</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">mm</span><span class="token operator">:</span> <span class="token string">&#39;glp&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">bb</span><span class="token operator">:</span> <span class="token string">&#39;zyj&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> zjr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
name
string
love
string
home
object
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>for...in... 循环中，每一个迭代值是对应值的字符串形式。</p></blockquote><p>用的对象设置null即可</p><h2 id="_4-深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#_4-深拷贝和浅拷贝" aria-hidden="true">#</a> 4.深拷贝和浅拷贝</h2><ol><li><p>首先浅拷贝和深拷贝只针对想Object,Array这样的复杂对象，简单来说，浅拷贝只复制一层对象的属性，二深拷贝则复制了所有的层级。</p></li><li><p>对于字符串类型，浅复制是对值的复制，对于对象来说，浅复制是对对象地址的复制，并没有开辟新的栈，也就是复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，则另一个对象的属性也会改变，而深复制则是开辟新的栈，两个对象对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。</p></li></ol><h3 id="_4-1-复习基本类型值和引用类型值" tabindex="-1"><a class="header-anchor" href="#_4-1-复习基本类型值和引用类型值" aria-hidden="true">#</a> 4.1 复习基本类型值和引用类型值</h3><p>还记得我们之前学习过的基本类型值和引用类型值吗？</p><table><thead><tr><th></th><th>举例</th><th>当 var a = b 变量传值时</th><th>当用 == 比较时</th><th>当用 === 比较时</th></tr></thead><tbody><tr><td>基本类型值</td><td>数字、字符串、布尔、undefined、null</td><td>内存中产生新的副本</td><td>比较值是否相等</td><td>类型相等的前提下，比较值相等</td></tr><tr><td>引用类型值</td><td>对象、数组等</td><td>内存中不产生新的副本，而是让新变量指向同一个对象</td><td>比较内存地址是否相同，即比较是否为同一对象</td><td>比较内存地址是否相同，即比较是否为同一对象</td></tr></tbody></table><blockquote><p>对于引用类型的比较来说：== 与 === 是没有区别的！</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-对象是引用类型值" tabindex="-1"><a class="header-anchor" href="#_4-2-对象是引用类型值" aria-hidden="true">#</a> 4.2 对象是引用类型值</h3><p>对象是引用类型值，这意味着：</p><p>不能用 <code>var obj2 = obj1</code> 这样的语法拷贝一个对象。</p><p>使用 == 或者 === 进行对象的比较时，比较的是它们是否为内存中的同一个对象，而不是比较值是否相同。</p><p>【案例】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 例子1</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// false</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// false</span>

<span class="token comment">// 例子2</span>
<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj4 <span class="token operator">=</span> obj3<span class="token punctuation">;</span>
obj3<span class="token punctuation">.</span>a<span class="token operator">++</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// {a: 11}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">==</span> obj4<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3 <span class="token operator">===</span> obj4<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-浅拷贝" tabindex="-1"><a class="header-anchor" href="#_4-3-浅拷贝" aria-hidden="true">#</a> 4.3 浅拷贝</h3><p>复习什么是浅拷贝：只拷贝对象的 “表层”，如果对象的某些属性值又是引用类型值，则不进一步拷贝它们，只是传递它们的引用。</p><p>常见方法：</p><ol><li><p>拷贝对象：<code>Object.assgin() </code>/ 展开运算符 <code>{...obj} </code>拷贝对象</p></li><li><p>拷贝数组：<code>Array.prototype.concat() </code>或者 <code>[...arr]</code></p></li></ol><p>使用 for...in... 循环也可实现对象的浅拷贝。</p><p>【案例】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 实现浅拷贝</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ds&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// const obj2 = {...obj};</span>
<span class="token keyword">function</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span><span class="token parameter">newObj<span class="token punctuation">,</span> oldObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 每遍历一个 k 属性，就给 obj2 也添加一个同名的 k 属性</span>
          <span class="token comment">// 值和 obj1 的 k 属性值相同</span>
        newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">shallowCopy</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 为什么叫浅拷贝呢？比如 c 属性的值是引用类型值，那么本质上 obj1 和 obj2 的 c 属性是内存中的同一个数组，并没有被拷贝分开。</span>
obj1<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// obj2 的 c 属性这个数组也会被增加 77 数组</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>c <span class="token operator">==</span> obj2<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true，true 就证明了数组是同一个对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是简单数据类型拷贝值，引用数据类型拷贝的是地址 (简单理解： 如果是单层对象，没问题，如果有多层就有问题)</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>1. 直接赋值和浅拷贝有什么区别？
直接赋值的方法，只要是对象，都会相互影响，因为是直接拷贝对象栈里面的地址
浅拷贝如果是一层对象，不相互影响，如果出现多层对象拷贝还会相互影响
2. 浅拷贝怎么理解？
拷贝对象之后，里面的属性值是简单数据类型直接拷贝值
如果属性值是引用数据类型则拷贝的是地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-深拷贝" tabindex="-1"><a class="header-anchor" href="#_4-4-深拷贝" aria-hidden="true">#</a> 4.4 深拷贝</h3><p>复习什么是深拷贝：拷贝对象的全貌，不论对象的属性值是否又是引用类型值，都能将它们实现拷贝。</p><p>和数组的深拷贝类似，对象的深拷贝需要使用递归。</p><p>常见方法：</p><ol><li>通过递归实现深拷贝</li><li>lodash的cloneDeep</li><li>通过JSON.stringify()实现</li></ol><p>面试时经常会考察深拷贝算法，必须掌握。</p><p>【案例】</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>		<span class="token operator">&lt;</span>script src<span class="token operator">=</span>&quot;https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>cdn<span class="token punctuation">.</span>bootcdn<span class="token punctuation">.</span>net<span class="token operator">/</span>ajax<span class="token operator">/</span>libs<span class="token operator">/</span>lodash<span class="token punctuation">.</span>js<span class="token operator">/</span><span class="token number">4.17</span><span class="token number">.21</span><span class="token operator">/</span>lodash<span class="token punctuation">.</span>min<span class="token punctuation">.</span>js
<span class="token string">&quot; type=&quot;</span>text<span class="token operator">/</span>javascript<span class="token string">&quot; charset=&quot;</span>utf<span class="token operator">-</span><span class="token number">8</span>&quot;<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>		

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;ds&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// const obj2 = {}</span>
<span class="token comment">// 拷贝函数</span>
<span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">newObj<span class="token punctuation">,</span> oldObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">debugger</span><span class="token punctuation">;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> oldObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理数组的问题  一定先写数组 在写 对象 不能颠倒</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> oldObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// deepCopy(obj2, obj);</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>

obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;ds2&quot;</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,110),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","04.html.vue"]]);export{r as default};
