import{ab as n,G as s,H as a,ac as t}from"./framework-09305b5d.js";const p={},e=t(`<h1 id="_17-【文件上传】" tabindex="-1"><a class="header-anchor" href="#_17-【文件上传】" aria-hidden="true">#</a> 17 【文件上传】</h1><h2 id="_1-初始化准备" tabindex="-1"><a class="header-anchor" href="#_1-初始化准备" aria-hidden="true">#</a> 1.初始化准备</h2><h3 id="_1-1-安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-1-安装依赖" aria-hidden="true">#</a> 1.1 安装依赖</h3><p>首先创建一个<code>express-multer-upload</code>工程项目，然后在项目中下好各种依赖包。</p><p><strong>multer中间件</strong></p><p>Multer 是一个 node.js 中间件，用于处理 <code>multipart/form-data</code> 类型的表单数据，它主要用于上传文件。</p><p><strong>注意</strong>: Multer 不会处理任何非 <code>multipart/form-data</code> 类型的表单数据。</p><p>下面是我下载的依赖以及版本。</p><figure><img src="https://i0.hdslb.com/bfs/album/b61fccbd8e385d376270ad9ba3a8bf7e77a260e5.png" alt="image-20221231143824464" tabindex="0" loading="lazy"><figcaption>image-20221231143824464</figcaption></figure><h3 id="_1-2-项目结构划分" tabindex="-1"><a class="header-anchor" href="#_1-2-项目结构划分" aria-hidden="true">#</a> 1.2 项目结构划分</h3><p>本着以比较规范的形式去完成这个项目，所以有必要进行合理的项目结构划分。如下：</p><figure><img src="https://i0.hdslb.com/bfs/album/fae1b84fb6e88e92b54428a9ba2fd93b0ad4680a.png" alt="image-20221231144220130" tabindex="0" loading="lazy"><figcaption>image-20221231144220130</figcaption></figure><h2 id="_2-multer上传逻辑" tabindex="-1"><a class="header-anchor" href="#_2-multer上传逻辑" aria-hidden="true">#</a> 2.multer上传逻辑</h2><h3 id="_2-1-multer配置" tabindex="-1"><a class="header-anchor" href="#_2-1-multer配置" aria-hidden="true">#</a> 2.1 multer配置</h3><p>在 multer 目录下创建 <strong>multerConfig.js</strong>，编写如下代码：</p><ul><li>引入依赖</li><li>封装处理路径函数</li><li>设置 multer 的配置对象</li><li>为 multer 添加配置</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 引入依赖</span>
<span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;multer&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span> 

<span class="token comment">// 2. 封装处理路径函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">handlePath</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 3. 设置 multer 的配置对象</span>
<span class="token keyword">const</span> storage <span class="token operator">=</span> multer<span class="token punctuation">.</span><span class="token function">diskStorage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 3.1 存储路径</span>
  <span class="token function-variable function">destination</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span>mimetype <span class="token operator">===</span> <span class="token string">&#39;image/jpeg&#39;</span> <span class="token operator">||</span> file<span class="token punctuation">.</span>mimetype <span class="token operator">===</span> <span class="token string">&#39;image/png&#39;</span> <span class="token operator">||</span> file<span class="token punctuation">.</span>mimetype<span class="token operator">===</span><span class="token string">&#39;image/gif&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">handlePath</span><span class="token punctuation">(</span><span class="token string">&#39;../../public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;仅支持 jpg/png/gif 格式的图片！&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">//  3.2 存储名称</span>
  <span class="token function-variable function">filename</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> file<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将图片名称分割伪数组，用于截取图片的后缀</span>
    <span class="token keyword">const</span> fileFormat <span class="token operator">=</span> file<span class="token punctuation">.</span>originalname<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 自定义图片名称</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> fileFormat<span class="token punctuation">[</span>fileFormat<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 4. 为 multer 添加配置</span>
<span class="token keyword">const</span> multerConfig <span class="token operator">=</span> <span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">storage</span><span class="token operator">:</span> storage<span class="token punctuation">,</span>
  <span class="token literal-property property">limits</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fileSize</span><span class="token operator">:</span> <span class="token number">2097152</span> <span class="token punctuation">}</span> <span class="token comment">// 2M</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> multerConfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在该配置中可以设置文件保存的地址、文件名称、限制上传的文件格式、文件大小</p><h3 id="_2-2-upload上传逻辑" tabindex="-1"><a class="header-anchor" href="#_2-2-upload上传逻辑" aria-hidden="true">#</a> 2.2 upload上传逻辑</h3><p>在 multer 目录下创建 <strong>upload.js</strong>，编写如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入配置好的 multerConfig</span>
<span class="token keyword">const</span> multerConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./multerConfig&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 上传到服务器地址</span>
<span class="token keyword">const</span> BaseURL <span class="token operator">=</span> <span class="token string">&#39;http://localhost:3001&#39;</span> 
<span class="token comment">// 上传到服务器的目录</span>
<span class="token keyword">const</span> imgPath <span class="token operator">=</span> <span class="token string">&#39;/public/&#39;</span>

<span class="token comment">// 封装上传图片的接口</span>
<span class="token keyword">function</span> <span class="token function">uploadAvatar</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    multerConfig<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 传递的图片格式错误或者超出文件限制大小，就会reject出去</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 拼接成完整的服务器静态资源图片路径</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>BaseURL <span class="token operator">+</span> imgPath <span class="token operator">+</span> req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> uploadAvatar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码主要是封装了一个上传文件的方法，当图片上传成功时就将拼接好的图片链接 <code>resolve</code> 出去。该方法会在控制器中被调用。</p><p>注意：上面的 <code>multerConfig.single(&#39;file&#39;)</code> 表示单文件上传，并且字段名为 &quot;file&quot;，后面上传图片的字段必须保持一致</p><h2 id="_3-编写控制器-定义路由" tabindex="-1"><a class="header-anchor" href="#_3-编写控制器-定义路由" aria-hidden="true">#</a> 3.编写控制器，定义路由</h2><h3 id="_3-1-编写控制器" tabindex="-1"><a class="header-anchor" href="#_3-1-编写控制器" aria-hidden="true">#</a> 3.1 编写控制器</h3><p>在 controllers 目录下创建 <strong>UserController.js</strong>，编写如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> uploadAvatar <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../multer/upload&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 用户的逻辑控制器</span>
<span class="token keyword">const</span> UserController <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 头像图片上传</span>
  <span class="token keyword">async</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> uploadRes <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">uploadAvatar</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;上传成功！&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">img_url</span><span class="token operator">:</span> uploadRes<span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> UserController
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码主要是编写了一个用户控制器类 <code>UserController</code>，以及一个图片上传的方法 <code>upload</code>。</p><p>在 <code>upload</code> 中调用了上传图片的接口 <code>uploadAvatar</code>，得到成功或失败的结果，在响应给客户端。</p><h3 id="_3-2-定义路由" tabindex="-1"><a class="header-anchor" href="#_3-2-定义路由" aria-hidden="true">#</a> 3.2 定义路由</h3><ol><li>在 routers 目录下创建 <strong>index.js</strong>，编写如下代码：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 导入用户逻辑</span>
<span class="token keyword">const</span> userController <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../controllers/UserController&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建路由对象</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 设置路由</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/upload/avatar&#39;</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>upload<span class="token punctuation">)</span>

<span class="token comment">// 导入路由对象</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>定义了路由之后还需要在 <strong>app.js</strong> 中注册路由，添加如下代码：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入定义的路由</span>
<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./src/routers/index&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 注册路由</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 app.js 中，增加上面两行代码即可完成路由注册</p><h2 id="_4-上传图片" tabindex="-1"><a class="header-anchor" href="#_4-上传图片" aria-hidden="true">#</a> 4.上传图片</h2><p>接下来进入测试环节，借助 postman 工具进行测试</p><figure><img src="https://i0.hdslb.com/bfs/album/67de24fa073b3e001ef3b10e55a0d1ef2f359fe4.png" alt="image-20221231144808803" tabindex="0" loading="lazy"><figcaption>image-20221231144808803</figcaption></figure><p>可以看到，成功的拿到了响应的数据，里面也包含了图片的链接地址</p><p>注意点：</p><ul><li>表单必须是 form-data 格式</li><li>文件的字段必须与后端保持一致</li></ul><h2 id="_5-图片名称优化" tabindex="-1"><a class="header-anchor" href="#_5-图片名称优化" aria-hidden="true">#</a> 5.图片名称优化</h2><p>由于这是一个用户上传头像图片的功能，当用户第二次上传头像时，需要将原先的图片删除掉，否则旧的图片会一直保存在服务器中。</p><p>一开始的想法是使用用户id作为图片名称，这样每一次上传图片，都会把原来的图片覆盖掉。但是这样会有两个问题</p><ul><li>不同格式的图片会残留（jpg、png、gif），不会被覆盖掉</li><li>如果可以覆盖，但是图片链接地址不会有变化，存入数据库时也是跟上一次的图片地址是相同的，这样会导致前端页面不会根据静态资源中头像图片变化而变化</li></ul><p>所以这里采用的做法是先对图片的名称进行拼接优化，改为如下的形式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>时间戳.用户id.jpg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样既能保证每一张图片都不重复，而且还附带了用户的id</p><p>注：可以使用 md5 对时间戳进行加密，以确保唯一性。这里为了方便就直接使用时间戳。</p><h2 id="_6-图片名称优化实现" tabindex="-1"><a class="header-anchor" href="#_6-图片名称优化实现" aria-hidden="true">#</a> 6.图片名称优化实现</h2><p>这个过程其实就是删除旧图片，重命名新图片为规定的格式，可以编写一个函数来实现。</p><h3 id="_6-1-图片去重删除和重命名" tabindex="-1"><a class="header-anchor" href="#_6-1-图片去重删除和重命名" aria-hidden="true">#</a> 6.1 图片去重删除和重命名</h3><ul><li>查找指定路径下的所有图片文件，进行遍历</li><li>先查询该id命名的文件是否存在，存在则删除</li><li>根据新存入的文件名(时间戳.jpg)，找到对应文件，然后重命名为: <code>时间戳.id.jpg</code></li></ul><p>在<strong>upload.js</strong>，编写如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 对图片进行去重删除和重命名</span>
<span class="token keyword">const</span> <span class="token function-variable function">hanldeImgDelAndRename</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> dirPath</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// TODO 查找该路径下的所有图片文件</span>
  fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>dirPath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> files</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 当前图片的名称</span>
      <span class="token keyword">const</span> currentImgName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token comment">// 图片的名称数组：[时间戳, id, 后缀]</span>
      <span class="token keyword">const</span> imgNameArr <span class="token operator">=</span> currentImgName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>

      <span class="token comment">// TODO 先查询该id命名的文件是否存在，有则删除</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>imgNameArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> currentImgPath <span class="token operator">=</span> dirPath <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> currentImgName
        fs<span class="token punctuation">.</span><span class="token function">unlink</span><span class="token punctuation">(</span>currentImgPath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// TODO 根据新存入的文件名(时间戳.jpg)，找到对应文件，然后重命名为: 时间戳.id.jpg</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentImgName <span class="token operator">===</span> filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> old_path <span class="token operator">=</span> dirPath <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> currentImgName
        <span class="token keyword">const</span> new_path <span class="token operator">=</span> dirPath <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> imgNameArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> id  <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token comment">// 重命名该文件</span>
        fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>old_path<span class="token punctuation">,</span> new_path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数执行过程分析：</p><ol><li>该函数主要调用了 <code>fs</code> 内置模块中的 <code>readdir</code> 进行指定路径查询文件，再进行遍历</li><li>将图片名称分割为数组，取出id与传入的id进行判断，符合条件则调用 <code>fs</code> 内置模块中的 <code>fs.unlink()</code> 方法删除文件</li><li>根据新存入的文件名(时间戳.jpg)，找到对应文件，然后重命名为: <code>时间戳.id.jpg</code>。然后调用 <code>fs</code> 内置模块中的 <code>fs.rename()</code> 方法重命名文件</li></ol><h3 id="_6-2-修改-uploadavatar-接口" tabindex="-1"><a class="header-anchor" href="#_6-2-修改-uploadavatar-接口" aria-hidden="true">#</a> 6.2 修改 uploadAvatar 接口</h3><p>完成图片去重删除和重命名 <code>hanldeImgDelAndRename</code> 方法后，还需要在 <strong>upload.js</strong> 中原先的上传接口方法 <code>uploadAvatar</code> 中进行调用，修改为如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 封装处理路径函数</span>
<span class="token keyword">const</span> <span class="token function-variable function">handlePath</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dir</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./&#39;</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 上传接口的 请求参数req  响应参数res</span>
<span class="token keyword">function</span> <span class="token function">uploadAvatar</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    multerConfig<span class="token punctuation">.</span><span class="token function">single</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 对图片进行去重删除和重命名</span>
        <span class="token function">hanldeImgDelAndRename</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">,</span> req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> <span class="token function">handlePath</span><span class="token punctuation">(</span><span class="token string">&#39;../../public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> img <span class="token operator">=</span> req<span class="token punctuation">.</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          <span class="token literal-property property">id</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
          <span class="token comment">// 重新返回符合规定的图片链接地址</span>
          <span class="token literal-property property">img_url</span><span class="token operator">:</span> BaseURL <span class="token operator">+</span> imgPath <span class="token operator">+</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">&#39;.&#39;</span> <span class="token operator">+</span> img<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：在上传文件时，必须携带 id 字段，这样 <code>req.body.id</code> 才能获取到传入的 id。</p><h2 id="_7-最终测试" tabindex="-1"><a class="header-anchor" href="#_7-最终测试" aria-hidden="true">#</a> 7.最终测试</h2><h3 id="_7-1-第一次上传" tabindex="-1"><a class="header-anchor" href="#_7-1-第一次上传" aria-hidden="true">#</a> 7.1 第一次上传</h3><figure><img src="https://i0.hdslb.com/bfs/album/091fb78bd9060b86acfb97692aac08896e7145cf.png" alt="image-20221231145520966" tabindex="0" loading="lazy"><figcaption>image-20221231145520966</figcaption></figure><p>可以看到，图片上传成功，并且图片的名称也是按照我们的规定进行拼接，后端服务器也成功保存了上传的图片。</p><figure><img src="https://i0.hdslb.com/bfs/album/c9b36c3e07689163cdf719f27613600efc655764.png" alt="image-20221231145533537" tabindex="0" loading="lazy"><figcaption>image-20221231145533537</figcaption></figure><h3 id="_7-2-第二次上传" tabindex="-1"><a class="header-anchor" href="#_7-2-第二次上传" aria-hidden="true">#</a> 7.2 第二次上传</h3><figure><img src="https://i0.hdslb.com/bfs/album/f8cc5e1e10251493e090ee2030861d3d279c7bed.png" alt="image-20221231145555139" tabindex="0" loading="lazy"><figcaption>image-20221231145555139</figcaption></figure><p>第二次上传，成功的将相同 id 的旧图片进行了删除，并且重命名了图片名称。</p><h3 id="_7-3-第三次上传" tabindex="-1"><a class="header-anchor" href="#_7-3-第三次上传" aria-hidden="true">#</a> 7.3 第三次上传</h3><p>这里还可以上传不同 id 以表示不同用户上传头像来进行测试，如下：</p><figure><img src="https://i0.hdslb.com/bfs/album/7fcff0c72d96af7a77e65901326d43e211c58635.png" alt="image-20221231145616872" tabindex="0" loading="lazy"><figcaption>image-20221231145616872</figcaption></figure><p>可以看到，不同 id 之间上传的图片是互不干扰的，只有当 id 匹配时才会进行替换和重命名。</p><p>最后只需要在控制器当中，把获取到的图片链接地址保存到数据库即可，这里可以根据用户 id 进行保存。</p><h2 id="_8-ajax上传" tabindex="-1"><a class="header-anchor" href="#_8-ajax上传" aria-hidden="true">#</a> 8.ajax上传</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ajax<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>ajax上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>avatar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>上传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.ajax [type=button]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.ajax [name=username]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> password <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.ajax [name=password]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> avatar <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.ajax [name=avatar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  avatar<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建预览地址</span>
    <span class="token keyword">let</span> httpUrl <span class="token operator">=</span> window<span class="token punctuation">.</span>webkitURL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span>avatar<span class="token punctuation">.</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> httpUrl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 要处理成表单对象上传</span>
    <span class="token keyword">const</span> formsdata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    formsdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span> username<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    formsdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span> password<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 追加name值，和文件对象</span>
    formsdata<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;avatar&#39;</span><span class="token punctuation">,</span> avatar<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    axios
      <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user/upload/avatar&#39;</span><span class="token punctuation">,</span> formsdata<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;multipart/form-data&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>imgPath<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,76),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","17.html.vue"]]);export{r as default};
