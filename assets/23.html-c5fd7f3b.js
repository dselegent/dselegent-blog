import{ab as p,G as i,H as o,E as n,S as s,N as e,ac as t,W as c}from"./framework-09305b5d.js";const l={},r=t(`<h1 id="_23-【umijs入门】" tabindex="-1"><a class="header-anchor" href="#_23-【umijs入门】" aria-hidden="true">#</a> 23 【UmiJS入门】</h1><h2 id="_1-umi-介绍" tabindex="-1"><a class="header-anchor" href="#_1-umi-介绍" aria-hidden="true">#</a> 1.Umi 介绍</h2><figure><img src="https://img.alicdn.com/imgextra/i3/O1CN01eBiy611b67KLFOxi3_!!6000000003415-2-tps-200-200.png" alt="Umi" tabindex="0" loading="lazy"><figcaption>Umi</figcaption></figure><h3 id="_1-1-umi-是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-umi-是什么" aria-hidden="true">#</a> 1.1 Umi 是什么？</h3><p>Umi，中文发音为「乌米」，是可扩展的企业级前端应用框架。Umi 以路由为基础的，同时支持配置式路由和约定式路由，保证路由的功能完备，并以此进行功能扩展。然后配以生命周期完善的插件体系，覆盖从源码到构建产物的每个生命周期，支持各种功能扩展和业务需求。</p><p>Umi 有很多非常有意思的特性，比如。</p><p>1、<strong>企业级</strong>，在安全性、稳定性、最佳实践、约束能力方面会考虑更多 2、<strong>插件化</strong>，啥都能改，Umi 本身也是由插件构成 3、<strong>MFSU</strong>，比 Vite 还快的 Webpack 打包方案 4、基于 React Router 6 的完备路由 5、默认最快的请求 6、SSR &amp; SSG 7、稳定白盒性能好的 ESLint 和 Jest 8、React 18 的框架级接入 9、Monorepo 最佳实践 ...</p><h3 id="_1-2-什么时候不用-umi" tabindex="-1"><a class="header-anchor" href="#_1-2-什么时候不用-umi" aria-hidden="true">#</a> 1.2 什么时候不用 Umi？</h3><p>如果你的项目，</p><p>1、需要支持 IE 8 或更低版本的浏览器 2、需要支持 React 16.8.0 以下的 React 3、需要跑在 Node 14 以下的环境中 4、有很强的 webpack 自定义需求和主观意愿 5、需要选择不同的路由方案 ...</p><p>Umi 可能不适合你。</p><h3 id="_1-3-为什么不是" tabindex="-1"><a class="header-anchor" href="#_1-3-为什么不是" aria-hidden="true">#</a> 1.3 为什么不是？</h3><ol><li><p><code>create-react-app</code></p><p>create-react-app 是脚手架，和 Umi、next.js、remix、ice、modern.js 等元框架不是同一类型。脚手架可以让我们快速启动项目，对于单一的项目够用，但对于团队而言却不够。因为使用脚手架像泼出去的水，一旦启动，无法迭代。同时脚手架所能做的封装和抽象都非常有限。</p></li><li><p><code>next.js</code></p><p>如果要做 SSR，next.js 是非常好的选择（当然，Umi 也支持 SSR）；而如果只做 CSR，Umi 会是更好的选择。相比之下，Umi 的扩展性会更好；并且 Umi 做了很多更贴地气的功能，比如配置式路由、补丁方案、antd 的接入、微前端、国际化、权限等；同时 Umi 会更稳定，因为他锁了能锁的全部依赖，定期主动更新，某一个子版本的 Umi，不会因为重装依赖之后而跑不起来。</p></li><li><p><code>remix</code></p><p>Remix 是我非常喜欢的框架，Umi 4 从中<s>抄</s>（学）了不少东西。但 Remix 是 Server 框架，其内置的 loader 和 action 都是跑在 server 端的，所以会对部署环境会有一定要求。Umi 将 loader、action 以及 remix 的请求机制同时运用到 client 和 server 侧，不仅 server 请求快，纯 CSR 的项目请求也可达到理论的最快值。同时 Remix 基于 esbuild 做打包，可能不适用于对兼容性有要求或者依赖尺寸特别大的项目。</p></li></ol><h3 id="_1-4-插件和插件集" tabindex="-1"><a class="header-anchor" href="#_1-4-插件和插件集" aria-hidden="true">#</a> 1.4 插件和插件集</h3><p>Umi 通过提供插件和插件集的机制来满足不同场景和业务的需求。插件是为了扩展一个功能，而插件集是为了扩展一类业务。比如要支持 vue，我们可以有 <code>@umijs/preset-vue</code>，包含 vue 相关的构建和运行时；比如要支持 h5 的应用类型，可以有 <code>@umijs/preset-h5</code>，把 h5 相关的功能集合到一起。</p><p>如果要类比，插件集和 babel 的 preset，以及 eslint 的 config 都类似。</p><h3 id="_1-5-import-all-from-umi" tabindex="-1"><a class="header-anchor" href="#_1-5-import-all-from-umi" aria-hidden="true">#</a> 1.5 import all from umi</h3><p>很多人可能都第一次听到。import all from umi 意思是所有 import 都来自 <code>umi</code>。比如 dva 不是 <code>import { connect } from &#39;dva&#39;</code>，而是 <code>import { connect } from &#39;umi&#39;</code>，从 umi 中导出。导出的方法不仅来自 umi 自身，还来自 umi 插件。</p><p>这是两年前 Umi 3 加的功能，最近发现 Remix、prisma、vitekit 等框架和工具都有类似实现。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 大量插件为 umi 提供额外导出内容</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> connect<span class="token punctuation">,</span> useModel<span class="token punctuation">,</span> useIntl<span class="token punctuation">,</span> useRequest<span class="token punctuation">,</span> MicroApp<span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这带来的好处是。通过 Umi 将大量依赖管理起来，用户无需手动安装；同时开发者在代码中也会少很多 import 语句。</p><h2 id="_2-快速上手" tabindex="-1"><a class="header-anchor" href="#_2-快速上手" aria-hidden="true">#</a> 2.快速上手</h2><h3 id="_2-1-环境准备" tabindex="-1"><a class="header-anchor" href="#_2-1-环境准备" aria-hidden="true">#</a> 2.1 环境准备</h3>`,23),d={href:"https://github.com/nvm-sh/nvm",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/coreybutler/nvm-windows",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"然后需要包管理工具。node 默认包含 npm，但也可以选择其他方案，",-1),m={href:"https://pnpm.io/installation",target:"_blank",rel:"noopener noreferrer"},k={href:"https://yarnpkg.com/getting-started/install",target:"_blank",rel:"noopener noreferrer"},b=t(`<h3 id="_2-2-创建项目" tabindex="-1"><a class="header-anchor" href="#_2-2-创建项目" aria-hidden="true">#</a> 2.2 创建项目</h3><p>先找个地方建个空目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> myapp <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> myapp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过官方工具创建项目，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> dlx create-umi@latest
✔ Install the following package: create-umi? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span> · <span class="token boolean">true</span>
✔ Pick Npm Client › <span class="token function">pnpm</span>
✔ Pick Npm Registry › taobao
Write: .gitignore
Write: .npmrc
Write: .umirc.ts
Copy:  layouts/index.tsx
Write: package.json
Copy:  pages/index.tsx
Copy:  pages/users.tsx
Copy:  pages/users/foo.tsx
<span class="token operator">&gt;</span> @ postinstall /private/tmp/sorrycc-vylwuW
<span class="token operator">&gt;</span> umi setup
info  - generate files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用yarn和npm</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ npx create-umi@latest
$ <span class="token function">yarn</span> create umi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>国内建议选 <strong>pnpm + taobao 源</strong>，速度提升明显。这一步会自动安装依赖，同时安装成功后会自动执行 <code>umi setup</code> 做一些文件预处理等工作。</p><p>选择后会自动生成一个最基本的 Umi 项目，并根据选中的客户端和镜像源安装依赖：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── package.json
├── pnpm-lock.yaml
├── src
│   ├── assets
│   │   └── yay.jpg
│   ├── layouts
│   │   ├── index.less
│   │   └── index.tsx
│   └── pages
│       ├── docs.tsx
│       └── index.tsx
├── tsconfig.json
└── typings.d.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就一键完成 Umi 项目的初始化了。</p><h3 id="_2-3-参数选项" tabindex="-1"><a class="header-anchor" href="#_2-3-参数选项" aria-hidden="true">#</a> 2.3 参数选项</h3><p>使用 <code>create-umi</code> 创建项目时，可用的参数如下：</p><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>--no-git</code></td><td>创建项目，但不初始化 Git</td></tr><tr><td><code>--no-install</code></td><td>创建项目，但不自动安装依赖</td></tr></tbody></table><h2 id="_3-运行时配置" tabindex="-1"><a class="header-anchor" href="#_3-运行时配置" aria-hidden="true">#</a> 3.运行时配置</h2><p>运行时配置和配置的区别是他跑在浏览器端，基于此，我们可以在这里写函数、tsx、import 浏览器端依赖等等，注意不要引入 node 依赖。</p><h3 id="_3-1-配置方式" tabindex="-1"><a class="header-anchor" href="#_3-1-配置方式" aria-hidden="true">#</a> 3.1 配置方式</h3><p>约定 <code>src/app.tsx</code> 为运行时配置。</p><h3 id="_3-2-配置" tabindex="-1"><a class="header-anchor" href="#_3-2-配置" aria-hidden="true">#</a> 3.2 配置</h3><p>Umi 在 <code>.umirc.ts</code> 或 <code>config/config.ts</code> 中配置项目和插件，支持 es6。一份常见的配置如下，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> default <span class="token punctuation">{</span>
  base: <span class="token string">&#39;/docs/&#39;</span>,
  publicPath: <span class="token string">&#39;/public/&#39;</span>,
  hash: true,
  history: <span class="token punctuation">{</span>
    type: <span class="token string">&#39;hash&#39;</span>,
  <span class="token punctuation">}</span>,
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-配置文件" tabindex="-1"><a class="header-anchor" href="#_3-3-配置文件" aria-hidden="true">#</a> 3.3 配置文件</h3><p>如果项目的配置不复杂，推荐在 <code>.umirc.ts</code> 中写配置； 如果项目的配置比较复杂，可以将配置写在 <code>config/config.ts</code> 中，并把配置的一部分拆分出去，比如路由配置可以拆分成单独的 <code>routes.ts</code>：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// config/routes.ts</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> exact<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> path<span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&#39;index&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// config/config.ts</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">&#39;./routes&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  routes<span class="token operator">:</span> routes<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>推荐两种配置方式二选一，<code>.umirc.ts</code> 优先级更高。</p><h3 id="_3-4-typescript-提示" tabindex="-1"><a class="header-anchor" href="#_3-4-typescript-提示" aria-hidden="true">#</a> 3.4 TypeScript 提示</h3><p>如果你想在写配置时也有提示，可以通过 umi 的 <code>defineConfig</code> 方法定义配置，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">layout</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// or</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RuntimeConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token literal-property property">layout</span><span class="token operator">:</span> RuntimeConfig<span class="token punctuation">[</span><span class="token string">&#39;layout&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-本地临时配置" tabindex="-1"><a class="header-anchor" href="#_3-5-本地临时配置" aria-hidden="true">#</a> 3.5 本地临时配置</h3><p>可以新建 <code>.umirc.local.ts</code>，这份配置会和 <code>.umirc.ts</code> 做 deep merge 后形成最终配置。</p><blockquote><p>注：<code>.umirc.local.ts</code> 仅在 <code>umi dev</code> 时有效。<code>umi build</code> 时不会被加载。</p></blockquote><p>比如，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .umirc.ts 或者 config/config.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// .umirc.local.ts 或者 config/config.local.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&#39;local&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拿到的配置是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&#39;local&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><ul><li><code>config/config.ts</code> 对应的是 <code>config/config.local.ts</code></li><li><code>.local.ts</code> 是本地验证使用的临时配置，请将其添加到 <code>.gitignore</code>，<strong>务必不要提交到 git 仓库中</strong></li><li><code>.local.ts</code> 配置的优先级最高，比 <code>UMI_ENV</code> 指定的配置更高</li></ul><h2 id="_4-目录结构" tabindex="-1"><a class="header-anchor" href="#_4-目录结构" aria-hidden="true">#</a> 4.目录结构</h2><p>这里罗列了 Umi 项目中约定(或推荐)的目录结构，在项目开发中，请遵照这个目录结构组织代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">.</span>
├── config
│   └── config.ts
├── dist
├── mock
│   └── app.ts｜tsx
├── src
│   ├── .umi
│   ├── .umi-production
│   ├── app.ts
│   ├── layouts
│   │   ├── BasicLayout.tsx
│   │   ├── index.less
│   ├── models
│   │   ├── global.ts
│   │   └── index.ts
│   ├── pages
│   │   ├── index.less
│   │   └── index.tsx
│   ├── utils // 推荐目录
│   │   └── index.ts
│   ├── services // 推荐目录
│   │   └── api.ts
│   ├── global.ts
│   ├── global.<span class="token punctuation">(</span>css<span class="token operator">|</span><span class="token function">less</span><span class="token operator">|</span>sass<span class="token operator">|</span>scss<span class="token punctuation">)</span>
│   ├── overrides.<span class="token punctuation">(</span>css<span class="token operator">|</span><span class="token function">less</span><span class="token operator">|</span>sass<span class="token operator">|</span>scss<span class="token punctuation">)</span>
│   ├── favicon.<span class="token punctuation">(</span>ico<span class="token operator">|</span>gif<span class="token operator">|</span>png<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>svg<span class="token operator">|</span>avif<span class="token operator">|</span>webp<span class="token punctuation">)</span>
│   └── loading.tsx
├── node_modules
│   └── .cache
│       ├── bundler-webpack
│       ├── mfsu
│       └── mfsu-deps
├── .env
├── plugin.ts 
├── .umirc.ts // 与 config/config 文件 <span class="token number">2</span> 选一
├── package.json
├── tsconfig.json
└── typings.d.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-package-json" tabindex="-1"><a class="header-anchor" href="#_4-1-package-json" aria-hidden="true">#</a> 4.1 package.json</h3><p>包含插件和插件集，以 <code>@umijs/preset-</code>、<code>@umijs/plugin-</code>、<code>umi-preset-</code> 和 <code>umi-plugin-</code> 开头的依赖会被自动注册为插件或插件集。</p><h3 id="_4-2-env" tabindex="-1"><a class="header-anchor" href="#_4-2-env" aria-hidden="true">#</a> 4.2 .env</h3><p>环境变量，比如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PORT=8888
COMPRESS=none
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-umirc-ts" tabindex="-1"><a class="header-anchor" href="#_4-3-umirc-ts" aria-hidden="true">#</a> 4.3 .umirc.ts</h3><blockquote><p>与 <code>config/config.ts</code> 文件功能相同，2 选 1 。<code>.umirc.ts</code> 文件优先级较高</p></blockquote><p>配置文件，包含 Umi 内置功能和插件的配置。</p>`,49),g={href:"https://umijs.org/docs/guides/env-variables#umi_env",target:"_blank",rel:"noopener noreferrer"},h=t(`<h3 id="_4-4-config-config-ts" tabindex="-1"><a class="header-anchor" href="#_4-4-config-config-ts" aria-hidden="true">#</a> 4.4 config/config.ts</h3><blockquote><p>与 <code>.umirc.ts</code> 文件功能相同，2 选 1 。<code>.umirc.ts</code> 文件优先级较高</p></blockquote><p>配置文件，包含 Umi 内置功能和插件的配置。</p><h3 id="_4-5-dist-目录" tabindex="-1"><a class="header-anchor" href="#_4-5-dist-目录" aria-hidden="true">#</a> 4.5 dist 目录</h3><p>执行 <code>umi build</code> 后，产物默认会存放在这里。可通过配置修改产物输出路径。</p><h3 id="_4-6-mock-目录" tabindex="-1"><a class="header-anchor" href="#_4-6-mock-目录" aria-hidden="true">#</a> 4.6 mock 目录</h3><p>存储 mock 文件，此目录下所有 <code>js</code> 和 <code>ts</code> 文件会被解析为 mock 文件。用于本地的模拟数据服务。</p><h3 id="_4-7-public-目录" tabindex="-1"><a class="header-anchor" href="#_4-7-public-目录" aria-hidden="true">#</a> 4.7 public 目录</h3><p>此目录下所有文件会被 copy 到输出路径。</p><h3 id="_4-8-src-目录" tabindex="-1"><a class="header-anchor" href="#_4-8-src-目录" aria-hidden="true">#</a> 4.8 <code>src</code> 目录</h3><h4 id="_4-8-1-umi-目录" tabindex="-1"><a class="header-anchor" href="#_4-8-1-umi-目录" aria-hidden="true">#</a> 4.8.1 .umi 目录</h4><p>dev 时的临时文件目录，比如入口文件、路由等，都会被临时生成到这里。<strong>不要提交 .umi 目录到 git 仓库，他们会在 <code>umi dev</code> 时被删除并重新生成。</strong></p><h4 id="_4-8-2-umi-production-目录" tabindex="-1"><a class="header-anchor" href="#_4-8-2-umi-production-目录" aria-hidden="true">#</a> 4.8.2 .umi-production 目录</h4><p>build 时的临时文件目录，比如入口文件、路由等，都会被临时生成到这里。<strong>不要提交 .umi-production 目录到 git 仓库，他们会在 <code>umi build</code> 时被删除并重新生成。</strong></p><h4 id="_4-8-3-app-ts-tsx" tabindex="-1"><a class="header-anchor" href="#_4-8-3-app-ts-tsx" aria-hidden="true">#</a> 4.8.3 app.[ts｜tsx]</h4><p>运行时配置文件，可以在这里扩展运行时的能力，比如修改路由、修改 render 方法等。运行时配置是跑在浏览器端，因此我们可以在这里写函数、jsx 语法，import 浏览器端依赖等等。</p><h4 id="_4-8-4-layouts-index-tsx" tabindex="-1"><a class="header-anchor" href="#_4-8-4-layouts-index-tsx" aria-hidden="true">#</a> 4.8.4 layouts/index.tsx</h4><p>约定式路由时的全局布局文件，实际上是在路由外面套了一层。比如，你的路由是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;./pages/index&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/users&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;./pages/users&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从组件角度可以简单的理解为如下关系：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>page</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">1</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>page</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>page</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">2</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>page</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-8-5-pages-目录" tabindex="-1"><a class="header-anchor" href="#_4-8-5-pages-目录" aria-hidden="true">#</a> 4.8.5 pages 目录</h4><p>所有路由组件存放在这里。使用约定式路由时，约定 <code>pages</code> 下所有的 <code>(j|t)sx?</code> 文件即路由。使用约定式路由，意味着不需要维护可怕的路由配置文件。最常用的有基础路由和动态路由（用于详情页等，需要从 url 取参数的情况）</p><p><strong>1.基础路由</strong></p><p>假设 <code>pages</code> 目录结构如下：</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> pages/
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> + users/
</span><span class="token prefix unchanged"> </span><span class="token line">   - index.js
</span><span class="token prefix unchanged"> </span><span class="token line"> - index.js
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，会自动生成路由配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;./pages/index.js&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/users/&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;./pages/users/index.js&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.动态路由</strong></p><p>约定，带 <code>$</code> 前缀的目录或文件为动态路由。若 <code>$</code> 后不指定参数名，则代表 <code>*</code> 通配，比如以下目录结构：</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> pages/
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> + foo/
</span><span class="token prefix unchanged"> </span><span class="token line">   - $slug.js
</span><span class="token prefix unchanged"> </span><span class="token line"> + $bar/
</span><span class="token prefix unchanged"> </span><span class="token line">   - $.js
</span><span class="token prefix unchanged"> </span><span class="token line"> - index.js
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会生成路由配置如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;./pages/index.js&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/foo/:slug&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;./pages/foo/$slug.js&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&#39;/:bar/*&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;./pages/$bar/$.js&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3../src/pages/404.js</strong></p><p>当访问的路由地址不存在时，会自动显示 404 页面。只有 build 之后生效。调试的时候可以访问 <code>/404</code> 。</p><h4 id="_4-8-6-global-j-t-sx" tabindex="-1"><a class="header-anchor" href="#_4-8-6-global-j-t-sx" aria-hidden="true">#</a> 4.8.6 global.(j|t)sx?</h4><p>在入口文件最前面被自动引入，可以考虑在此加入 polyfill。Umi 区别于其他前端框架，没有显式的程序主入口，如 <code>src/index.js</code>，所以在引用某些模块的时候，如果模块功能要求在程序主入口添加代码时，你就可以写到这个文件。</p><h4 id="_4-8-7-global-css-less-sass-scss" tabindex="-1"><a class="header-anchor" href="#_4-8-7-global-css-less-sass-scss" aria-hidden="true">#</a> 4.8.7 global.(css|less|sass|scss)</h4><p>这个文件不走 css modules，自动被引入，可以写一些全局样式，它的引入位置很靠前，所以优先级相对较低；如果想覆盖三方依赖样式，推荐使用 <code>overrides.(css|less|sass|scss)</code>。</p><h4 id="_4-8-8-overrides-css-less-sass-scss" tabindex="-1"><a class="header-anchor" href="#_4-8-8-overrides-css-less-sass-scss" aria-hidden="true">#</a> 4.8.8 overrides.(css|less|sass|scss)</h4><p>这个文件不走 css modules，自动被引入，专用于覆盖三方依赖的样式；该文件中所有的 CSS 选择器都会被自动加上 <code>body</code> 前缀以确保优先级始终高于原有选择器，这样一来在页面切换时有异步 chunk 动态插入的情况下样式覆盖也能生效。</p><h4 id="_4-8-9-loading-tsx-jsx" tabindex="-1"><a class="header-anchor" href="#_4-8-9-loading-tsx-jsx" aria-hidden="true">#</a> 4.8.9 loading.(tsx|jsx)</h4><p>定义懒加载过程中要显示的加载动画。Umi 4 默认按页拆包，所以这近似等价于 Umi 3 中的 <code>dynamicImport.loading</code> 选项。</p><h3 id="_4-8-10-plugin-ts" tabindex="-1"><a class="header-anchor" href="#_4-8-10-plugin-ts" aria-hidden="true">#</a> 4.8.10 plugin.ts</h3><p>存在这个文件，会被当前项目加载为 Umi 插件，你可以在这里实现一些插件级的功能。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> IApi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;umi&#39;</span><span class="token punctuation">;</span>
 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>api<span class="token operator">:</span> IApi<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  api<span class="token punctuation">.</span><span class="token function">onDevCompileDone</span><span class="token punctuation">(</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    opts<span class="token punctuation">;</span>
    <span class="token comment">// console.log(&#39;&gt; onDevCompileDone&#39;, opts.isFirstCompile);</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  api<span class="token punctuation">.</span><span class="token function">onBuildComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    opts<span class="token punctuation">;</span>
    <span class="token comment">// console.log(&#39;&gt; onBuildComplete&#39;, opts.isFirstCompile);</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  api<span class="token punctuation">.</span><span class="token function">chainWebpack</span><span class="token punctuation">(</span><span class="token punctuation">(</span>memo<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    memo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-11-favicon" tabindex="-1"><a class="header-anchor" href="#_4-8-11-favicon" aria-hidden="true">#</a> 4.8.11 favicon</h3><p>约定如果存在 <code>src/favicon.(ico|gif|png|jpg|jpeg|svg|avif|webp)</code> 文件，将会使用它作为构建网页的 <code>shortcut icon</code>，如存在 <code>src/favicon.png</code> 则构建时会生成：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shortcut icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/favicon.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>支持多种文件后缀，按以下优先级匹配：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">FAVICON_FILES</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&#39;favicon.ico&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;favicon.gif&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;favicon.png&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;favicon.jpg&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;favicon.jpeg&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;favicon.svg&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;favicon.avif&#39;</span><span class="token punctuation">,</span>
  <span class="token string">&#39;favicon.webp&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),f={href:"https://umijs.org/docs/api/config#favicons",target:"_blank",rel:"noopener noreferrer"},x=n("blockquote",null,[n("p",null,"配置优先级会大于约定")],-1);function y(_,j){const a=c("ExternalLinkIcon");return i(),o("div",null,[r,n("p",null,[s("首先得有 node，并确保 node 版本是 14 或以上。（推荐用 "),n("a",d,[s("nvm"),e(a)]),s(" 来管理 node 版本，windows 下推荐用 "),n("a",u,[s("nvm-windows"),e(a)]),s("）")]),v,n("ul",null,[n("li",null,[n("a",m,[s("pnpm"),e(a)]),s(", umi 团队推荐")]),n("li",null,[n("a",k,[s("Yarn"),e(a)])])]),b,n("p",null,[s("配置文件的优先级见："),n("a",g,[s("UMI_ENV"),e(a)])]),h,n("p",null,[s("如果约定方式不满足你的需求，可以使用 "),n("a",f,[s("favicons"),e(a)]),s(" 配置。")]),x])}const U=p(l,[["render",y],["__file","23.html.vue"]]);export{U as default};
