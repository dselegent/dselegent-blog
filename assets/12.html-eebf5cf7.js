const e=JSON.parse(`{"key":"v-192a05d7","path":"/front_end/front_end_base/javascript/12.html","title":"12 【语法之错误处理机制】","lang":"zh-CN","frontmatter":{"description":"12 【语法之错误处理机制】 错误处理机制是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行 15.1 Error 实例对象 JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生提供Error构造函数，所有抛出的错误都是这个构造函数的实例。 var err = new Error('出错了'); err.message // \\"出错了\\"","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.cf/front_end/front_end_base/javascript/12.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"12 【语法之错误处理机制】"}],["meta",{"property":"og:description","content":"12 【语法之错误处理机制】 错误处理机制是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行 15.1 Error 实例对象 JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生提供Error构造函数，所有抛出的错误都是这个构造函数的实例。 var err = new Error('出错了'); err.message // \\"出错了\\""}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12 【语法之错误处理机制】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"15.1 Error 实例对象","slug":"_15-1-error-实例对象","link":"#_15-1-error-实例对象","children":[]},{"level":2,"title":"15.2 原生错误类型","slug":"_15-2-原生错误类型","link":"#_15-2-原生错误类型","children":[{"level":3,"title":"15.2.1 SyntaxError 对象","slug":"_15-2-1-syntaxerror-对象","link":"#_15-2-1-syntaxerror-对象","children":[]},{"level":3,"title":"15.2.2 ReferenceError 对象","slug":"_15-2-2-referenceerror-对象","link":"#_15-2-2-referenceerror-对象","children":[]},{"level":3,"title":"15.2.3 RangeError 对象","slug":"_15-2-3-rangeerror-对象","link":"#_15-2-3-rangeerror-对象","children":[]},{"level":3,"title":"15.2.4 TypeError 对象","slug":"_15-2-4-typeerror-对象","link":"#_15-2-4-typeerror-对象","children":[]},{"level":3,"title":"15.2.5 URIError 对象","slug":"_15-2-5-urierror-对象","link":"#_15-2-5-urierror-对象","children":[]},{"level":3,"title":"15.2.6 EvalError 对象","slug":"_15-2-6-evalerror-对象","link":"#_15-2-6-evalerror-对象","children":[]},{"level":3,"title":"15.2.7 总结","slug":"_15-2-7-总结","link":"#_15-2-7-总结","children":[]}]},{"level":2,"title":"15.3 自定义错误","slug":"_15-3-自定义错误","link":"#_15-3-自定义错误","children":[]},{"level":2,"title":"15.4 throw 语句","slug":"_15-4-throw-语句","link":"#_15-4-throw-语句","children":[]},{"level":2,"title":"15.5 try...catch 结构","slug":"_15-5-try-catch-结构","link":"#_15-5-try-catch-结构","children":[]},{"level":2,"title":"15.6 finally 代码块","slug":"_15-6-finally-代码块","link":"#_15-6-finally-代码块","children":[]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":9.58,"words":2874},"filePathRelative":"front_end/front_end_base/javascript/12.md","localizedDate":"2023年1月30日","excerpt":"<h1> 12 【语法之错误处理机制】</h1>\\n<p>错误处理机制是指预估代码执行过程中可能发生的错误，然后最大程度的避免错误的发生导致整个程序无法继续运行</p>\\n<h2> 15.1 Error 实例对象</h2>\\n<p>JavaScript 解析或运行时，一旦发生错误，引擎就会抛出一个错误对象。JavaScript 原生提供<code>Error</code>构造函数，所有抛出的错误都是这个构造函数的实例。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> err <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'出错了'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nerr<span class=\\"token punctuation\\">.</span>message <span class=\\"token comment\\">// \\"出错了\\"</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
