import{ab as t,G as p,H as c,E as n,S as s,N as e,ac as o,W as l}from"./framework-09305b5d.js";const i={},r=n("h1",{id:"_06-【electron对话框】",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_06-【electron对话框】","aria-hidden":"true"},"#"),s(" 06 【electron对话框】")],-1),u=n("blockquote",null,[n("p",null,"显示用于打开和保存文件、警报等的本机系统对话框")],-1),d=n("h2",{id:"_1-选择文件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-选择文件","aria-hidden":"true"},"#"),s(" 1.选择文件")],-1),k=n("p",null,[n("code",null,"browserWindow"),s(" 参数允许该对话框将自身附加到父窗口, 作为父窗口的模态框。")],-1),g=n("p",null,[n("code",null,"dialog.showOpenDialog([browserWindow, ]options)")],-1),m=n("code",null,"browserWindow",-1),h={href:"https://www.electronjs.org/zh/docs/latest/api/browser-window",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"选项",-1),b=n("li",null,[n("code",null,"title"),s(" string (可选) - 对话框窗口的标题")],-1),v=n("li",null,[n("code",null,"defaultPath"),s(" string (可选) - 对话框的默认展示路径")],-1),f=n("li",null,[n("code",null,"buttonLabel"),s(" string (可选) - 「确认」按钮的自定义标签, 当为空时, 将使用默认标签。")],-1),w=n("code",null,"filters",-1),y={href:"https://www.electronjs.org/zh/docs/latest/api/structures/file-filter",target:"_blank",rel:"noopener noreferrer"},x=o("<li><code>properties</code> string[] (可选) - 包含对话框相关属性。 支持以下属性值: <ul><li><code>openFile</code> - 允许选择文件</li><li><code>openDirectory</code> - 允许选择文件夹</li><li><code>multiSelections</code>-允许多选。</li><li><code>showHiddenFiles</code>-显示对话框中的隐藏文件。</li><li><code>createDirectory</code> <em>macOS</em> -允许你通过对话框的形式创建新的目录。</li><li><code>promptToCreate</code> <em>Windows</em>-如果输入的文件路径在对话框中不存在, 则提示创建。 这并不是真的在路径上创建一个文件，而是允许返回一些不存在的地址交由应用程序去创建。</li><li><code>noResolveAliases</code> <em>macOS</em>-禁用自动的别名路径(符号链接) 解析。 所选别名现在将会返回别名路径而非其目标路径。</li><li><code>treatPackageAsDirectory</code> <em>macOS</em> -将包 (如 <code>.app </code>文件夹) 视为目录而不是文件。</li><li><code>dontAddToRecent</code> <em>Windows</em> - 不要将正在打开的项目添加到最近的文档列表中。</li></ul></li><li><code>message</code> string (可选) <em>macOS</em> -显示在输入框上方的消息。</li>",2),S=n("code",null,"securityScopedBookmarks",-1),q=n("em",null,"macOS",-1),j=n("em",null,"mas",-1),W={href:"https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW16",target:"_blank",rel:"noopener noreferrer"},O=n("p",null,[s("返回 "),n("code",null,"Promise<Object>"),s(" - resolve包含以下内容的object：")],-1),D=n("li",null,[n("code",null,"canceled"),s(" boolean - 对话框是否被取消。")],-1),A=n("li",null,[n("code",null,"filePaths"),s(" string[] - 用户选择的文件路径的数组. 如果对话框被取消，这将是一个空的数组。")],-1),P=n("code",null,"bookmarks",-1),L=n("em",null,"macOS",-1),B=n("em",null,"mas",-1),F=n("code",null,"filePaths",-1),z=n("code",null,"securityScopedBookmarks",-1),I={href:"https://www.electronjs.org/zh/docs/latest/api/dialog#bookmarks-array",target:"_blank",rel:"noopener noreferrer"},C=o(`<p><code>filters</code> 指定一个文件类型数组，用于规定用户可见或可选的特定类型范围。 例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Images&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gif&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Movies&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;mkv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;avi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mp4&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Custom File Type&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;as&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;All Files&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>extensions</code> 数组应为没有通配符或点的扩展名 (例如, <code>&quot;png&quot;</code> 是正确的, 而 <code>&quot;.png&quot;</code> 和 <code>*. png &quot;</code> 就是错误的)。 若要显示所有文件, 请使用 <code>&quot;*&quot;</code> 通配符 (不支持其他通配符)。</p><p><strong>注意:</strong> 在 Windows 和 Linux 上, 打开对话框不能同时是文件选择器和目录选择器, 因此如果在这些平台上将 <code>properties</code> 设置为<code>[&quot;openFile&quot;、&quot;openDirectory&quot;]</code>, 则将显示为目录选择器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span>mainWindow<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;openFile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;openDirectory&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>canceled<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>filePaths<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>app<span class="token punctuation">,</span> BrowserWindow<span class="token punctuation">,</span> dialog<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;did-finish-load&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">buttonLabel</span><span class="token operator">:</span> <span class="token string">&#39;select&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultPath</span><span class="token operator">:</span> app<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token string">&#39;desktop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;multiSelections&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;createDirectory&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;openFile&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;openDirectory&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>filePaths<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/466fe6245fdbd2fdac0055fb569804c070093801.png" alt="image-20230112161936191" tabindex="0" loading="lazy"><figcaption>image-20230112161936191</figcaption></figure><p>终端输出：</p><figure><img src="https://i0.hdslb.com/bfs/album/00656f895450ef2bb3f7bbc116612c10bff95dcd.png" alt="image-20230112162109809" tabindex="0" loading="lazy"><figcaption>image-20230112162109809</figcaption></figure><h2 id="_2-保存文件" tabindex="-1"><a class="header-anchor" href="#_2-保存文件" aria-hidden="true">#</a> 2.保存文件</h2><p><code>browserWindow</code> 参数允许该对话框将自身附加到父窗口, 作为父窗口的模态框。</p><p><code>dialog.showSaveDialog([browserWindow, ]options)</code></p>`,13),M=n("code",null,"browserWindow",-1),T={href:"https://www.electronjs.org/zh/docs/latest/api/browser-window",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"选项",-1),V=n("li",null,[n("code",null,"title"),s(" string (可选) - 对话框标题。 无法在一些 "),n("em",null,"Linux"),s(" 桌面环境中显示。")],-1),E=n("li",null,[n("code",null,"defaultPath"),s(" string (可选) - 默认情况下使用的绝对目录路径、绝对文件路径或文件名。")],-1),H=n("li",null,[n("code",null,"buttonLabel"),s(" string (可选) - 「确认」按钮的自定义标签, 当为空时, 将使用默认标签。")],-1),G=n("code",null,"filters",-1),R={href:"https://www.electronjs.org/zh/docs/latest/api/structures/file-filter",target:"_blank",rel:"noopener noreferrer"},K=o("<li><code>message</code> string (可选) <em>macOS</em> -显示在对话框上的消息。</li><li><code>nameFieldLabel</code> string (可选) <em>macOS</em> - 文件名输入框对应的自定义标签名。</li><li><code>showsTagField</code> boolean (可选) <em>macOS</em> - 显示标签输入框，默认为 <code>true</code>。</li><li><code>properties</code> string[] (可选) <ul><li><code>showHiddenFiles</code>-显示对话框中的隐藏文件。</li><li><code>createDirectory</code> <em>macOS</em> -允许你通过对话框的形式创建新的目录。</li><li><code>treatPackageAsDirectory</code> <em>macOS</em> -将包 (如 <code>.app </code>文件夹) 视为目录而不是文件。</li><li><code>showOverwriteConfirmation</code> <em>Linux</em> - 设置如果用户输入了已存在的文件名，是否会向用户显示确认对话框。</li><li><code>dontAddToRecent</code> <em>Windows</em> - 不要将正在保存的项目添加到最近的文档列表中。</li></ul></li>",4),Y=n("code",null,"securityScopedBookmarks",-1),U=n("em",null,"macOS",-1),$=n("em",null,"mas",-1),J={href:"https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW16",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,[s("返回 "),n("code",null,"Promise<Object>"),s(" - resolve包含以下内容的object：")],-1),X=n("li",null,[n("code",null,"canceled"),s(" boolean - 对话框是否被取消。")],-1),Z=n("li",null,[n("code",null,"filePath"),s(" string (可选) - 如果对话框被取消，该值为 "),n("code",null,"undefined"),s("。")],-1),nn=n("code",null,"bookmark",-1),sn=n("em",null,"macOS",-1),an=n("em",null,"mas",-1),en=n("code",null,"securityScopedBookmarks",-1),on={href:"https://www.electronjs.org/zh/docs/latest/api/dialog#bookmarks-array",target:"_blank",rel:"noopener noreferrer"},tn=o(`<p><code>filters</code> 可以指定可显示文件的数组类型，详见 <code>dialog.showOpenDialog</code> 事例</p><p><strong>注意：</strong> 在macOS上，建议使用异步版本，以避免展开和折叠对话框时出现问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>dialog<span class="token punctuation">.</span><span class="token function">showSaveDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>filePath<span class="token punctuation">,</span> <span class="token string">&#39;dselegent&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/dd3456c3ce71f17648e280430b52deceb03e5604.png" alt="image-20230112164112002" tabindex="0" loading="lazy"><figcaption>image-20230112164112002</figcaption></figure><h2 id="_3-消息框" tabindex="-1"><a class="header-anchor" href="#_3-消息框" aria-hidden="true">#</a> 3.消息框</h2><p>显示一个消息框</p><p><code>browserWindow</code> 参数允许该对话框将自身附加到父窗口, 作为父窗口的模态框。</p><p><code>dialog.showMessageBox([browserWindow, ]options)</code></p>`,8),pn=n("code",null,"browserWindow",-1),cn={href:"https://www.electronjs.org/zh/docs/latest/api/browser-window",target:"_blank",rel:"noopener noreferrer"},ln=n("code",null,"选项",-1),rn=o("<li><code>message</code> string - message box 的内容.</li><li><code>type</code> string (可选) - 可以为 <code>&quot;none&quot;</code>, <code>&quot;info&quot;</code>, <code>&quot;error&quot;</code>, <code>&quot;question&quot;</code> 或者 <code>&quot;warning&quot;</code>. 在 Windows 上, <code>&quot;question&quot;</code> 与<code>&quot;info&quot;</code>显示相同的图标, 除非你使用了 <code>&quot;icon&quot;</code> 选项设置图标。 在 macOS 上, <code>&quot;warning&quot;</code> 和 <code>&quot;error&quot;</code> 显示相同的警告图标</li><li><code>buttons</code> string[] (可选) - 按钮文本数组。 在 Windows上，一个空数组将导致按钮被标为“OK”。</li><li><code>defaultId</code> Integer (可选) - 在 message box 对话框打开的时候，设置默认选中的按钮，值为在 buttons 数组中的索引.</li>",4),un=n("code",null,"signal",-1),dn={href:"https://nodejs.org/api/globals.html#globals_class_abortsignal",target:"_blank",rel:"noopener noreferrer"},kn=n("code",null,"signal",-1),gn=n("li",null,[n("code",null,"title"),s(" string (可选) - message box 的标题，一些平台不显示.")],-1),mn=n("li",null,[n("code",null,"detail"),s(" string (可选) - 额外信息.")],-1),hn=n("li",null,[n("code",null,"checkboxLabel"),s(" string (可选) - 如果使用了，消息框将包含带有给定标签的复选框。")],-1),_n=n("li",null,[n("code",null,"checkboxChecked"),s(" boolean (可选) - checkbox 的初始值。 默认值为 "),n("code",null,"false")],-1),bn=n("code",null,"icon",-1),vn={href:"https://www.electronjs.org/zh/docs/latest/api/native-image",target:"_blank",rel:"noopener noreferrer"},fn=o("<li><code>textWidth</code> Integer (可选) <em>macOS</em> - 自定义消息框中文本的宽度</li><li><code>cancelId</code> Integer (可选) - 用于取消对话框的按钮的索引，例如 <code>Esc</code> 键. 默认情况下，它被分配给第一个按钮，文字为 “cancel” 或 “no”。 如果不存在这个标签的按钮，同时该选项又未设置，返回值为<code>0</code>。</li><li><code>noLink</code> boolean (可选) - 在Windows上，应用将尝试找出哪个 <code>buttons</code> 是常用按钮(例如 &quot;Cancel&quot; 或 &quot;Yes&quot;)，然后在对话框中以链接命令的方式展现其它的按钮。 这可以使对话框以现代Windows应用程序的风格显示。 如果你不喜欢这个行为, 你可以设置 <code>noLink</code> 为 <code>true</code>.</li><li><code>normalizeAccessKeys</code> boolean (可选) -规范跨平台的键盘访问键。 默认值为 <code>false</code>. 用 <code>&amp;</code> 连接和转换键盘访问键, 以便它们在每个平台上正常工作.<code>&amp;</code> 字符会在macOS上被删除，在 Linux 上会被转换为 <code>_</code>，在 Windows 上保持不变。 例如 <code>Vie&amp;w</code> 的按钮标签在 Linux 上会被转换为 <code>Vie_w</code>，在 macOS 转换为 <code>View</code> 并且可以被选择。而Windows和Linux上表示 <code>Alt-W</code> 。</li>",4),wn=o(`<p>返回 <code>Promise&lt;Object&gt;</code> - resolve包含以下属性的promise：</p><ul><li><code>response</code> number - 点击的按钮的索引。</li><li><code>checkboxChecked</code> boolean - 如果设置了 <code>checkboxLabel</code>，返回复选框是否被选中的状态。 否则，返回 <code>false</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> answers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Yes&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;No&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Maybe&#39;</span><span class="token punctuation">]</span>
dialog<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Message Box&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;Please select an option&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">detail</span><span class="token operator">:</span> <span class="token string">&#39;Message details.&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">buttons</span><span class="token operator">:</span> answers
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>response<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">User selected: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>answers<span class="token punctuation">[</span>response<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/975f169a851644a7e747fbdf0ca38030089c47d7.png" alt="image-20230112164703446" tabindex="0" loading="lazy"><figcaption>image-20230112164703446</figcaption></figure>`,4);function yn(xn,Sn){const a=l("ExternalLinkIcon");return p(),c("div",null,[r,u,d,k,g,n("ul",null,[n("li",null,[m,s(),n("a",h,[s("BrowserWindow"),e(a)]),s(" (可选)")]),n("li",null,[_,s(" 对象 "),n("ul",null,[b,v,f,n("li",null,[w,s(" [FileFilter"),n("a",y,[s("]"),e(a)]),s(" (可选)")]),x,n("li",null,[S,s(" boolean (可选) "),q,s(),j,s(" - 在打包提交到Mac App Store时创建 "),n("a",W,[s("security scoped bookmarks"),e(a)])])])])]),O,n("ul",null,[D,A,n("li",null,[P,s(" string[] (optional) "),L,s(),B,s(" - 一个数组， "),F,s(" 数组，base64编码字符串包含安全范围书签数据。 "),z,s(" 必须启用才能捕获数据。 (返回值见 "),n("a",I,[s("这里的表格"),e(a)]),s("。)")])]),C,n("ul",null,[n("li",null,[M,s(),n("a",T,[s("BrowserWindow"),e(a)]),s(" (可选)")]),n("li",null,[N,s(" 对象 "),n("ul",null,[V,E,H,n("li",null,[G,s(" [FileFilter"),n("a",R,[s("]"),e(a)]),s(" (可选)")]),K,n("li",null,[Y,s(" boolean (可选) "),U,s(),$,s(" - 在打包提交到Mac App Store时创建 "),n("a",J,[s("security scoped bookmarks"),e(a)]),s(" 当该选项被启用且文件尚不存在时，那么在选定的路径下将创建一个空文件。")])])])]),Q,n("ul",null,[X,Z,n("li",null,[nn,s(" string(optional) "),sn,s(),an,s(" - 包含了安全作用域的书签数据 Base64 编码的字符串来保存文件。 "),en,s(" 必须启用才有效。 (返回值见 "),n("a",on,[s("这里的表格"),e(a)]),s("。)")])]),tn,n("ul",null,[n("li",null,[pn,s(),n("a",cn,[s("BrowserWindow"),e(a)]),s(" (可选)")]),n("li",null,[ln,s(" 对象 "),n("ul",null,[rn,n("li",null,[un,s(" AbortSignal (可选) - 通过 "),n("a",dn,[s("AbortSignal"),e(a)]),s(" 信号实例可选地关闭消息框，消息框的行为就像用户点击取消一样。 在 macOS, "),kn,s(" 不适用于没有父窗口的消息框。因为平台限制，这些消息框同步运行")]),gn,mn,hn,_n,n("li",null,[bn,s(" ("),n("a",vn,[s("NativeImage"),e(a)]),s(" | string) (可选)")]),fn])])]),wn])}const jn=t(i,[["render",yn],["__file","06.html.vue"]]);export{jn as default};
