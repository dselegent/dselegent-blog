import{ab as n,G as s,H as e,ac as a}from"./framework-09305b5d.js";const t={},o=a(`<h1 id="_27-【三大家族scroll、offset、client】" tabindex="-1"><a class="header-anchor" href="#_27-【三大家族scroll、offset、client】" aria-hidden="true">#</a> 27 【三大家族scroll、offset、client】</h1><p>JS的三大家族主要是Offset、Scroll、Client，通过对三大家族不同属性的灵活使用，我们可以模拟出很多炫酷的JS动画，增强界面的视觉感染力！让静态页面活起来！</p><p>注意以下的值全是不带px的，单纯的数字</p><figure><img src="https://i0.hdslb.com/bfs/album/a363913f6564155d01e6a619e0689d5fc5d355b0.png" alt="image-20220825182901210" tabindex="0" loading="lazy"><figcaption>image-20220825182901210</figcaption></figure><blockquote><p>对于clientX、clientY、offsetX、offsetY已在鼠标事件记录过</p></blockquote><h2 id="_1-scroll家族" tabindex="-1"><a class="header-anchor" href="#_1-scroll家族" aria-hidden="true">#</a> 1.scroll家族</h2><h3 id="_1-1-scrollheight和scrollwidth-只读" tabindex="-1"><a class="header-anchor" href="#_1-1-scrollheight和scrollwidth-只读" aria-hidden="true">#</a> 1.1 scrollHeight和scrollWidth（只读）</h3><blockquote><p>获取元素整个<strong>内容</strong>的高度和宽度 （包含看不见的） ，如果有滚动条（滚动条会占用部分宽高），不计算滚动条的宽高</p></blockquote><p><code>Element.scrollHeight</code>属性返回一个整数值（小数会四舍五入），表示当前元素的总高度（单位像素），包括溢出容器、当前不可见的部分。它包括<code>padding</code>，但是不包括<code>border</code>、<code>margin</code>以及水平滚动条的高度（如果有水平滚动条的话），还包括伪元素（<code>::before</code>或<code>::after</code>）的高度。</p><p><code>Element.scrollWidth</code>属性表示当前元素的总宽度（单位像素），其他地方都与<code>scrollHeight</code>属性类似。这两个属性只读。</p><p>整张网页的总高度可以从<code>document.documentElement</code>或<code>document.body</code>上读取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 返回网页的总高度</span>
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果元素节点的内容出现溢出，即使溢出的内容是隐藏的，<code>scrollHeight</code>属性仍然返回元素的总高度。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// HTML 代码如下</span>
<span class="token comment">// &lt;div id=&quot;myDiv&quot; style=&quot;height: 200px; overflow: hidden;&quot;&gt;...&lt;div&gt;</span>
document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myDiv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scrollHeight <span class="token comment">// 356</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，即使<code>myDiv</code>元素的 CSS 高度只有200像素，且溢出部分不可见，但是<code>scrollHeight</code>仍然会返回该元素的原始高度。</p><figure><img src="https://i0.hdslb.com/bfs/album/ce777bd4a059a1af22115b6fb92fca524287855f.png" alt="image-20220825183304333" tabindex="0" loading="lazy"><figcaption>image-20220825183304333</figcaption></figure><h3 id="_1-2-scrolltop和scrollleft-可修改" tabindex="-1"><a class="header-anchor" href="#_1-2-scrolltop和scrollleft-可修改" aria-hidden="true">#</a> 1.2 scrollTop和scrollLeft（可修改）</h3><blockquote><p>获取元素垂直和水平滚动条滚动的距离(被卷去的头部和左侧)</p></blockquote><p><code>Element.scrollLeft</code>属性表示当前元素的水平滚动条向右侧滚动的像素数量，<code>Element.scrollTop</code>属性表示当前元素的垂直滚动条向下滚动的像素数量。对于那些没有滚动条的网页元素，这两个属性总是等于0。</p><p>如果要查看整张网页的水平的和垂直的滚动距离，要从<code>document.documentElement</code>元素上读取。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个属性都可读写，设置该属性的值（不需要单位），会导致浏览器将当前元素自动滚动到相应的位置。</p><h2 id="_2-offset家族" tabindex="-1"><a class="header-anchor" href="#_2-offset家族" aria-hidden="true">#</a> 2.offset家族</h2><figure><img src="https://i0.hdslb.com/bfs/album/416c7cae6c2abeee8358e955de8f31c792bb7259.png" alt="image-20220825183858516" tabindex="0" loading="lazy"><figcaption>image-20220825183858516</figcaption></figure><h3 id="_2-1-offsetheight和offsetwidth" tabindex="-1"><a class="header-anchor" href="#_2-1-offsetheight和offsetwidth" aria-hidden="true">#</a> 2.1 offsetHeight和offsetWidth</h3><blockquote><p>获取盒子的高度宽度，包括内容区、内边距、边框（这里就是css设置的那些样式组合）</p></blockquote><p><code>Element.offsetHeight</code>属性返回一个整数，表示元素的 CSS 垂直高度（单位像素），包括元素本身的高度、padding 和 border，以及水平滚动条的高度（如果存在滚动条）。</p><p><code>Element.offsetWidth</code>属性表示元素的 CSS 水平宽度（单位像素），其他都与<code>Element.offsetHeight</code>一致。</p><p>这两个属性都是只读属性，只比<code>Element.clientHeight</code>和<code>Element.clientWidth</code>多了边框的高度或宽度。如果元素的 CSS 设为不可见（比如<code>display: none;</code>），则返回<code>0</code>。</p><h3 id="_2-2-offsetparent" tabindex="-1"><a class="header-anchor" href="#_2-2-offsetparent" aria-hidden="true">#</a> 2.2 offsetParent</h3><p><code>Element.offsetParent</code>属性返回最靠近当前元素的、并且 CSS 的<code>position</code>属性不等于<code>static</code>的上层元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;position: absolute;&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>span</code>元素的<code>offsetParent</code>属性就是<code>div</code>元素。</p><p>该属性主要用于确定子元素位置偏移的计算基准，<code>Element.offsetTop</code>和<code>Element.offsetLeft</code>就是<code>offsetParent</code>元素计算的。</p><p>如果该元素是不可见的（<code>display</code>属性为<code>none</code>），或者位置是固定的（<code>position</code>属性为<code>fixed</code>），则<code>offsetParent</code>属性返回<code>null</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;position: absolute;&quot;</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>span style<span class="token operator">=</span><span class="token string">&quot;display: none;&quot;</span><span class="token operator">&gt;</span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>span</code>元素的<code>offsetParent</code>属性是<code>null</code>。</p><p>如果某个元素的所有上层节点的<code>position</code>属性都是<code>static</code>，则<code>Element.offsetParent</code>属性指向<code>&lt;body&gt;</code>元素。</p><h3 id="_2-3-offsetleft和offsettop-只读" tabindex="-1"><a class="header-anchor" href="#_2-3-offsetleft和offsettop-只读" aria-hidden="true">#</a> 2.3 offsetLeft和offsetTop（只读）</h3><blockquote><p>当前元素和定位父元素之间的偏移量（如果没有设置定位父元素，就是相对于左上角的位置,top是距离顶部的距离,left是最左边的距离） offsetLeft水平偏移量 offsetTop垂直偏移量</p></blockquote><p><code>Element.offsetLeft</code>返回当前元素左上角相对于最近的开启了定位的节点的水平位移，<code>Element.offsetTop</code>返回垂直位移，单位为像素。通常，这两个值是指相对于父节点的位移。</p><p>下面的代码可以算出元素左上角相对于整张网页的坐标。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getElementPosition</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    x <span class="token operator">+=</span> e<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">;</span>
    y <span class="token operator">+=</span> e<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
    e <span class="token operator">=</span> e<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> y<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-client家族" tabindex="-1"><a class="header-anchor" href="#_3-client家族" aria-hidden="true">#</a> 3.client家族</h2><h3 id="_3-1-clientheight和clientwidth-不包含滚动条" tabindex="-1"><a class="header-anchor" href="#_3-1-clientheight和clientwidth-不包含滚动条" aria-hidden="true">#</a> 3.1 clientHeight和clientWidth(不包含滚动条)</h3><blockquote><p>元素的<strong>可见</strong>高度，包括元素的内容区和内边距的高度 元素的<strong>可见</strong>宽度，包括元素的内容区和内边距的宽度</p></blockquote><p><code>Element.clientHeight</code>属性返回一个整数值，表示元素节点的 CSS 高度（单位像素），只对块级元素生效，对于行内元素返回<code>0</code>。如果块级元素没有设置 CSS 高度，则返回实际高度。</p><p>除了元素本身的高度，它还包括<code>padding</code>部分，但是不包括<code>border</code>、<code>margin</code>。如果有水平滚动条，还要减去水平滚动条的高度。注意，这个值始终是整数，如果是小数会被四舍五入。</p><p><code>Element.clientWidth</code>属性返回元素节点的 CSS 宽度，同样只对块级元素有效，也是只包括元素本身的宽度和<code>padding</code>，如果有垂直滚动条，还要减去垂直滚动条的宽度。</p><p><code>document.documentElement</code>的<code>clientHeight</code>属性，返回当前视口的高度（即浏览器窗口的高度），等同于<code>window.innerHeight</code>属性减去水平滚动条的高度（如果有的话）。<code>document.body</code>的高度则是网页的实际高度。一般来说，<code>document.body.clientHeight</code>大于<code>document.documentElement.clientHeight</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 视口高度</span>
document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight

<span class="token comment">// 网页总高度</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-clientleft和clienttop" tabindex="-1"><a class="header-anchor" href="#_3-2-clientleft和clienttop" aria-hidden="true">#</a> 3.2 clientLeft和ClientTop</h3><blockquote><p>边框宽度和边框的高度</p></blockquote><p><code>Element.clientLeft</code>属性等于元素节点左边框（left border）的宽度（单位像素），不包括左侧的<code>padding</code>和<code>margin</code>。如果没有设置左边框，或者是行内元素（<code>display: inline</code>），该属性返回<code>0</code>。该属性总是返回整数值，如果是小数，会四舍五入。</p><p><code>Element.clientTop</code>属性等于网页元素顶部边框的宽度（单位像素），其他特点都与<code>clientLeft</code>相同。</p><p><strong>判断滚动条是否滚动到底</strong> 垂直滚动条 <code>scrollHeight -scrollTop = clientHeight</code></p><p>水平滚动 <code>scrollWidth -scrollLeft = clientWidth</code></p><p><strong>检查浏览器宽高（可视区域）兼容性写法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">//获取屏幕可视区域的宽高</span>
    <span class="token keyword">function</span> <span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&quot;width&quot;</span><span class="token operator">:</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span>
                <span class="token string-property property">&quot;height&quot;</span><span class="token operator">:</span> window<span class="token punctuation">.</span>innerHeight
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">===</span> <span class="token string">&quot;CSS1Compat&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&quot;width&quot;</span><span class="token operator">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>
                <span class="token string-property property">&quot;height&quot;</span><span class="token operator">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&quot;width&quot;</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>
                <span class="token string-property property">&quot;height&quot;</span><span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

      <span class="token comment">//需求：浏览器每次更改大小，判断是否符合某一标准然后给背景上色。</span>
        <span class="token comment">//  // &gt;960红色，大于640小于960蓝色，小于640绿色。</span>
        <span class="token comment">//步骤：</span>
        <span class="token comment">//1.老三步</span>
        <span class="token comment">//2.判断。</span>
        <span class="token comment">//3.上色</span>

        <span class="token comment">//1.老三步</span>
        window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> fn<span class="token punctuation">;</span>
        <span class="token comment">//页面加载的时候直接执行一次函数，确定浏览器可视区域的宽，给背景上色</span>
        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//封装成函数，然后指定的时候去调用和绑定函数名</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//2.判断。</span>
            <span class="token comment">//3.上色</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token operator">&gt;</span><span class="token number">960</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token operator">&gt;</span><span class="token number">640</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-getboundingclientrect-方法" tabindex="-1"><a class="header-anchor" href="#_4-getboundingclientrect-方法" aria-hidden="true">#</a> 4.getBoundingClientRect()方法</h2><p>getBoundingClientRect()获取元素位置，这个方法没有参数</p><p>getBoundingClientRect()用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。</p><p>getBoundingClientRect()是DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> rect <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码中，<code>getBoundingClientRect</code>方法返回的<code>rect</code>对象，具有以下属性（全部为只读）。</p><ul><li><code>x</code>：元素左上角相对于视口的横坐标</li><li><code>y</code>：元素左上角相对于视口的纵坐标</li><li><code>height</code>：元素高度</li><li><code>width</code>：元素宽度</li><li><code>left</code>：元素左上角相对于视口的横坐标，与<code>x</code>属性相等</li><li><code>right</code>：元素右边界相对于左边视口的横坐标（等于<code>x + width</code>）</li><li><code>top</code>：元素顶部相对于视口的纵坐标，与<code>y</code>属性相等</li><li><code>bottom</code>：元素底部相对于上边视口的纵坐标（等于<code>y + height</code>）</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/01fad9d5c8543c2643870c8d444c9405bdc4d2e3.png" alt="image-20220825185128644" tabindex="0" loading="lazy"><figcaption>image-20220825185128644</figcaption></figure><p>由于元素相对于视口（viewport）的位置，会随着页面滚动变化，因此表示位置的四个属性值，都不是固定不变的。如果想得到绝对位置，可以将<code>left</code>属性加上<code>window.scrollX</code>，<code>top</code>属性加上<code>window.scrollY</code>。</p><p>注意，<code>getBoundingClientRect</code>方法的所有属性，都把边框（<code>border</code>属性）算作元素的一部分。也就是说，都是从边框外缘的各个点来计算。因此，<code>width</code>和<code>height</code>包括了元素本身 + <code>padding</code> + <code>border</code>。</p><p>​</p><h2 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结" aria-hidden="true">#</a> 5.总结</h2><figure><img src="https://tva1.sinaimg.cn/large/0074UQWJgy1h3ejhem2rlj30ow07uq7a.jpg" alt="image-20220620111553872" tabindex="0" loading="lazy"><figcaption>image-20220620111553872</figcaption></figure><p><strong>三大家族区别</strong></p><ul><li>offset家族 offsetHeight: 元素高，height+border+padding offsetWidth: 元素宽，width+border+padding offsetTop: 上边距离带有定位的父盒子的距离（重要） offsetLeft: 左边距离带有定位的父盒子的距离（重要） offsetParent: 最近的带有定位的父盒子</li><li>scroll家族 scrollHeight: 内容高，不含border scrollWidth: 内容宽，不含border scrollTop: document.documentELement.scrollTop || document.body.scrollTop; （重要）window.pageXOffset; 浏览器页面被卷去的头部 元素调用.必须具有滚动条的盒子调用。盒子本身遮挡住的子盒子内容。 子盒子被遮挡住的头部 scrollLeft: document.documentELement.scrollLeft: || document.body.scrollLeft: ; （重要）window.pageYOffset; 浏览器页面被卷去的左侧 元素调用.必须具有滚动条的盒子调用。盒子本身遮挡住的子盒子内容。 子盒子被遮挡住的左侧</li><li>client家族 clientHeight: 元素高，height+padding; window.innerHeight; document.body.clientHeight 可视区域的高 clientWidth: 元素宽，width+padding; window.innerWidth; document.documentElementWidth; 可视区域的宽 clientTop: 元素的上border宽 clientLeft: 元素的左border宽 clientY 调用者：event.clientY(event)（重要） 作用：鼠标距离浏览器可视区域的距离，上 clientX 调用者：event.clientX(event)（重要） 作用：鼠标距离浏览器可视区域的距离，左</li></ul>`,74),c=[o];function p(i,l){return s(),e("div",null,c)}const r=n(t,[["render",p],["__file","27.html.vue"]]);export{r as default};
