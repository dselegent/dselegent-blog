const e=JSON.parse('{"key":"v-6a8491ba","path":"/front_end/js_advanced/webpack/03.html","title":"03 【资源处理】","lang":"zh-CN","frontmatter":{"description":"03 【资源处理】 在上一章，我们讲解了四种资源模块引入外部资源。除了资源模块，我们还可以通过 loader引入其他类型的文件。 什么是loader webpack 只能理解 JavaScript 和JSON文件，这是 webpack 开箱可用的自带能力。 loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供 应用程序使用，以及被添加到依赖图中。 在 webpack 的配置中，loader 有两个属性：","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.cf/front_end/js_advanced/webpack/03.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"03 【资源处理】"}],["meta",{"property":"og:description","content":"03 【资源处理】 在上一章，我们讲解了四种资源模块引入外部资源。除了资源模块，我们还可以通过 loader引入其他类型的文件。 什么是loader webpack 只能理解 JavaScript 和JSON文件，这是 webpack 开箱可用的自带能力。 loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供 应用程序使用，以及被添加到依赖图中。 在 webpack 的配置中，loader 有两个属性："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03 【资源处理】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.HTML资源","slug":"_1-html资源","link":"#_1-html资源","children":[]},{"level":2,"title":"2.样式资源","slug":"_2-样式资源","link":"#_2-样式资源","children":[{"level":3,"title":"2.1 css","slug":"_2-1-css","link":"#_2-1-css","children":[]},{"level":3,"title":"2.2 less&sass","slug":"_2-2-less-sass","link":"#_2-2-less-sass","children":[]},{"level":3,"title":"2.3 抽离CSS","slug":"_2-3-抽离css","link":"#_2-3-抽离css","children":[]},{"level":3,"title":"2.4 压缩css（生产模式）","slug":"_2-4-压缩css-生产模式","link":"#_2-4-压缩css-生产模式","children":[]}]},{"level":2,"title":"3.图片资源","slug":"_3-图片资源","link":"#_3-图片资源","children":[]},{"level":2,"title":"4.字体资源","slug":"_4-字体资源","link":"#_4-字体资源","children":[]},{"level":2,"title":"5.数据资源","slug":"_5-数据资源","link":"#_5-数据资源","children":[]},{"level":2,"title":"6.自定义 JSON 模块 parser","slug":"_6-自定义-json-模块-parser","link":"#_6-自定义-json-模块-parser","children":[]},{"level":2,"title":"7.js规范化","slug":"_7-js规范化","link":"#_7-js规范化","children":[{"level":3,"title":"7.1 配置文件","slug":"_7-1-配置文件","link":"#_7-1-配置文件","children":[]},{"level":3,"title":"7.2 具体配置","slug":"_7-2-具体配置","link":"#_7-2-具体配置","children":[]},{"level":3,"title":"7.3 在 Webpack 中使用","slug":"_7-3-在-webpack-中使用","link":"#_7-3-在-webpack-中使用","children":[]},{"level":3,"title":"7.4 VSCode Eslint 插件","slug":"_7-4-vscode-eslint-插件","link":"#_7-4-vscode-eslint-插件","children":[]},{"level":3,"title":"7.5 overlay","slug":"_7-5-overlay","link":"#_7-5-overlay","children":[]}]},{"level":2,"title":"8.js兼容处理","slug":"_8-js兼容处理","link":"#_8-js兼容处理","children":[{"level":3,"title":"8.1 什么是JS兼容性处理？","slug":"_8-1-什么是js兼容性处理","link":"#_8-1-什么是js兼容性处理","children":[]},{"level":3,"title":"8.2 babel的介绍","slug":"_8-2-babel的介绍","link":"#_8-2-babel的介绍","children":[]},{"level":3,"title":"8.3 babel的安装","slug":"_8-3-babel的安装","link":"#_8-3-babel的安装","children":[]},{"level":3,"title":"8.4 webpack配置","slug":"_8-4-webpack配置","link":"#_8-4-webpack配置","children":[]}]},{"level":2,"title":"9.代码分离","slug":"_9-代码分离","link":"#_9-代码分离","children":[{"level":3,"title":"9.1 入口起点( 不推荐 )","slug":"_9-1-入口起点-不推荐","link":"#_9-1-入口起点-不推荐","children":[]},{"level":3,"title":"9.2 防止重复","slug":"_9-2-防止重复","link":"#_9-2-防止重复","children":[]},{"level":3,"title":"9.3 动态导入","slug":"_9-3-动态导入","link":"#_9-3-动态导入","children":[]},{"level":3,"title":"9.4 懒加载","slug":"_9-4-懒加载","link":"#_9-4-懒加载","children":[]},{"level":3,"title":"9.5 预获取、预加载","slug":"_9-5-预获取、预加载","link":"#_9-5-预获取、预加载","children":[]}]},{"level":2,"title":"10.缓存","slug":"_10-缓存","link":"#_10-缓存","children":[{"level":3,"title":"10.1 输出文件的文件名","slug":"_10-1-输出文件的文件名","link":"#_10-1-输出文件的文件名","children":[]},{"level":3,"title":"10.2 缓存第三方库","slug":"_10-2-缓存第三方库","link":"#_10-2-缓存第三方库","children":[]}]},{"level":2,"title":"11.js压缩","slug":"_11-js压缩","link":"#_11-js压缩","children":[]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":29.46,"words":8839},"filePathRelative":"front_end/js_advanced/webpack/03.md","localizedDate":"2023年1月30日","excerpt":"<h1> 03 【资源处理】</h1>\\n<p>在上一章，我们讲解了四种资源模块引入外部资源。除了资源模块，我们还可以通过 loader引入其他类型的文件。</p>\\n<p><strong>什么是loader</strong></p>\\n<p><code>webpack</code> 只能理解 <code>JavaScript</code> 和<code>JSON</code>文件，这是 webpack 开箱可用的自带能力。 loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供 应用程序使用，以及被添加到依赖图中。</p>\\n<p>在 webpack 的配置中，<code>loader</code> 有两个属性：</p>","autoDesc":true}');export{e as data};
