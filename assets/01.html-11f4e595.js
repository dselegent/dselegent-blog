import{ab as p,G as o,H as i,E as s,S as n,N as e,ac as t,W as l}from"./framework-09305b5d.js";const c={},r=t(`<h1 id="_01-【git-提交规范】" tabindex="-1"><a class="header-anchor" href="#_01-【git-提交规范】" aria-hidden="true">#</a> 01 【Git 提交规范】</h1><h2 id="_1-git提交规范-commitizen" tabindex="-1"><a class="header-anchor" href="#_1-git提交规范-commitizen" aria-hidden="true">#</a> 1.Git提交规范（Commitizen）</h2><h3 id="_1-1-背景" tabindex="-1"><a class="header-anchor" href="#_1-1-背景" aria-hidden="true">#</a> 1.1 背景</h3><p>Git是目前世界上最先进的分布式版本控制系统，在我们平时的项目开发中已经广泛使用。而当我们使用Git提交代码时，都需要写Commit Message提交说明才能够正常提交。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git commit -m &quot;提交&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然而，我们平时在编写提交说明时，通常会直接填写如&quot;fix&quot;或&quot;bug&quot;等不规范的说明，不规范的提交说明很难让人明白这次代码提交究竟是为了什么。而在工作中，一份清晰简介规范的Commit Message能让后续代码审查、信息查找、版本回退都更加高效可靠。因此我们需要一些工具来约束开发者编写符合规范的提交说明。</p><h3 id="_1-2-提交规范" tabindex="-1"><a class="header-anchor" href="#_1-2-提交规范" aria-hidden="true">#</a> 1.2 提交规范</h3>`,7),u={href:"https://zj-git-guide.readthedocs.io/zh_CN/latest/message/Angular%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF%E8%A7%84%E8%8C%83/",target:"_blank",rel:"noopener noreferrer"},d=t(`<h4 id="提交格式" tabindex="-1"><a class="header-anchor" href="#提交格式" aria-hidden="true">#</a> 提交格式</h4><p>符合规范的Commit Message的提交格式如下，包含了页眉（header）、正文（body）和页脚（footer）三部分。其中，header是必须的，body和footer可以忽略。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;
// 空一行
&lt;body&gt;
// 空一行
&lt;footer&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="页眉设置" tabindex="-1"><a class="header-anchor" href="#页眉设置" aria-hidden="true">#</a> 页眉设置</h4><p>页眉（header）通常只有一行，包括了提交类型（type）、作用域（scope）和主题（subject）。其中，type和subject是必须的，scope是可选的。</p><p><strong>提交类型</strong></p><p>提交类型（type）用于说明此次提交的类型，需要指定为下面其中一个：</p><figure><img src="https://article.biliimg.com/bfs/article/25c25024576908442687ed7bd9ec508b13b6be0c.png" alt="image-20230212220159594" tabindex="0" loading="lazy"><figcaption>image-20230212220159594</figcaption></figure><p><strong>作用域</strong></p><p>作用域（scope）表示此次提交影响的范围。比如可以取值api，表明只影响了接口。</p><p><strong>主题</strong></p><p>主题（subject）描述是简短的一句话，简单说明此次提交的内容。</p><h4 id="正文和页脚" tabindex="-1"><a class="header-anchor" href="#正文和页脚" aria-hidden="true">#</a> 正文和页脚</h4><p>正文（body）和页眉（footer）这两部分不是必须的。</p><p>如果是破坏性的变更，那就必须在提交的正文或脚注加以展示。一个破坏性变更必须包含大写的文本 BREAKING CHANGE，紧跟冒号和空格。脚注必须只包含 BREAKING CHANGE、外部链接、issue 引用和其它元数据信息。例如修改了提交的流程，依赖了一些包，可以在正文写上：BREANKING CHANGE：需要重新npm install，使用npm run cm代替git commit。</p><p>下面给出了一个Commit Message例子，该例子中包含了header和body。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>chore: 引入commitizen

BREANKING CHANGE：需要重新npm install，使用npm run cm代替git commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，在平时的提交中，我们也可以只包含header，比如我们修改了登录页面的某个功能，那么可以这样写Commit Message。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>feat(登录）：添加登录接口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-3-commitizen" tabindex="-1"><a class="header-anchor" href="#_1-3-commitizen" aria-hidden="true">#</a> 1.3 Commitizen</h3><p>虽然有了规范，但是还是无法保证每个人都能够遵守相应的规范，因此就需要使用一些工具来保证大家都能够提交符合规范的Commit Message。常用的工具包括了可视化工具和信息交互工具，其中Commitizen是常用的Commitizen工具，接下来将会先介绍Commitizen的使用方法。</p><h4 id="什么是commitizen" tabindex="-1"><a class="header-anchor" href="#什么是commitizen" aria-hidden="true">#</a> 什么是Commitizen</h4>`,22),m={href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"},k=t(`<h4 id="安装commitizen" tabindex="-1"><a class="header-anchor" href="#安装commitizen" aria-hidden="true">#</a> 安装Commitizen</h4><p>可以使用npm安装Commitizen。其中，cz-conventional-changelog是本地适配器。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install commitizen cz-conventional-changelog --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="配置commitizen" tabindex="-1"><a class="header-anchor" href="#配置commitizen" aria-hidden="true">#</a> 配置Commitizen</h4><p>安装好Commitizen之后，就需要配置Commitizen，我们需要在package.json中加入以下代码。其中，需要增加一个script，使得我们可以通过执行npm run cm来代替git commit，而path为cz-conventional-changelog包相对于项目根目录的路径。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;script&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;cm&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git cz&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./node_modules/cz-conventional-changelog&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实这个可以全局安装，这样我们所有地方都可以用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> commitizen cz-conventional-changelog  <span class="token comment"># 安装规范化提交插件</span>

<span class="token builtin class-name">echo</span> <span class="token string">&#39;{&quot;path&quot;: &quot;cz-conventional-changelog&quot;}&#39;</span> <span class="token operator">&gt;</span> ~/.czrc <span class="token comment"># 配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成之后，我们就可以通过执行npm run cm来代替git commit，接着只需要安装提示，完成header、body和footer的编写，就能够编写出符合规范的Commit Message。</p><figure><img src="https://article.biliimg.com/bfs/article/ee3c890b2c596ad7f0a2bd6d1839e082f9fc1f08.png" alt="image-20230212220930672" tabindex="0" loading="lazy"><figcaption>image-20230212220930672</figcaption></figure><h2 id="_2-git工作流规范-husky" tabindex="-1"><a class="header-anchor" href="#_2-git工作流规范-husky" aria-hidden="true">#</a> 2.Git工作流规范（Husky ）</h2><h3 id="_2-1-背景" tabindex="-1"><a class="header-anchor" href="#_2-1-背景" aria-hidden="true">#</a> 2.1 背景</h3><p>有些同学可能会把ESLint、Stylelint或Commitizen提示的错误忽视不见，直接将代码提交到代码仓库中。这样做的话，那么其他同学在pull代码并diff代码时可能会出现大段代码标红，同时在进行CI时又可能因为代码风格或规范问题被打回重改。</p><p>那么，有没有一种方法，让大家在提交代码时需要确保本地的代码或Commit Message已经通过检查才能够push到代码仓库，从而更好的保障代码质量呢？接下来，将会介绍如何使用Husky + Commintlint + Lint-staged打造规范的Git检查工作流，确保我们的代码只有符合规范才能提交到代码仓库。</p><h3 id="_2-2-什么是git-hook" tabindex="-1"><a class="header-anchor" href="#_2-2-什么是git-hook" aria-hidden="true">#</a> 2.2 什么是git hook</h3><p>在介绍Husky之前，我们先来看什么是git hook，也就是常说的Git钩子。</p><p>和其它版本控制系统一样，Git能在特定的重要动作发生时触发自定义脚本。有两组这样的钩子：客户端的和服务器端的。 客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。 你可以随心所欲地运用这些钩子。</p><p>其中，客户端钩子我们可能用的比较多，客户端钩子通常包括了提交工作流钩子、电子邮件工作流钩子和其它钩子。这些钩子通常存储在项目的.git/hooks目录下，我们需要关注的主要是提交工作流钩子。提交工作流钩子主要包括了以下四种：</p><ul><li><p>pre-commit：该钩子在键入提交信息前运行。 它用于检查即将提交的快照。如果该钩子以非零值退出，Git 将放弃此次提交，你可以利用该钩子，来检查代码风格是否一致。</p></li><li><p>prepare-commit-msg：该钩子在启动提交信息编辑器之前，默认信息被创建之后运行。 它允许你编辑提交者所看到的默认信息。</p></li><li><p>commit-msg：该钩子接收一个参数，此参数存有当前提交信息的临时文件的路径。 如果该钩子脚本以非零值退出，Git 将放弃提交，因此，可以用来在提交通过前验证项目状态或提交信息。</p></li><li><p>post-commit：该钩子一般用于通知之类的事情。</p><p>在上面的钩子中，我们需要关注pre-commit和commit-msg钩子。</p></li></ul><h3 id="_2-3-什么是husky" tabindex="-1"><a class="header-anchor" href="#_2-3-什么是husky" aria-hidden="true">#</a> 2.3 什么是husky</h3>`,20),v={href:"https://github.com/typicode/husky",target:"_blank",rel:"noopener noreferrer"},g=t(`<h3 id="_2-4-安装husky" tabindex="-1"><a class="header-anchor" href="#_2-4-安装husky" aria-hidden="true">#</a> 2.4 安装husky</h3><p>安装husky，可以使用npm进行安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> husky --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-配置husky" tabindex="-1"><a class="header-anchor" href="#_2-5-配置husky" aria-hidden="true">#</a> 2.5 配置husky</h3><p>安装好husky之后，还需要对husky进行配置。不同版本的husky配置方法有些不同。</p><ol><li>安装 husky git hooks</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 方法1：</span>
npx husky <span class="token function">install</span>
<span class="token comment"># 方法2：配置 package.json, scripts：&quot;prepare&quot;: &quot;husky install&quot;</span>
<span class="token function">npm</span> run prepare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>测试 husky 钩子作用，添加 pre-commit 钩子</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npm test&quot;</span>
<span class="token comment"># 查看当前目录 .husky 目录是否有生成 pre-commit 文件</span>
<span class="token comment"># 如果需要删除这个钩子，直接 删除 .husky/pre-commit 文件即可</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们需要安装配置好ESLint或Stylelint，并且在 <code>pre-commit</code> 中加入以下代码。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

npx eslint *.<span class="token punctuation">{</span>js,jsx,ts,tsx<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，当我们执行git commit时，就会触发pre-commit钩子，并且执行对应命令，这里将会指定目录下的文件进行ESLint检查，如果ESLint检查不通过，是无法进行commit的。</p><figure><img src="https://article.biliimg.com/bfs/article/914bd4db9e59aab4cee16b65998131af6d162b99.png" alt="image-20230212221721568" tabindex="0" loading="lazy"><figcaption>image-20230212221721568</figcaption></figure><p>如果ESLint检查通过，就可以正常进行commit。</p><figure><img src="https://article.biliimg.com/bfs/article/5aaaa1287862843e69b499d50e3ce3b69734cf78.png" alt="image-20230212221733767" tabindex="0" loading="lazy"><figcaption>image-20230212221733767</figcaption></figure><p>在安装并配置好husky之后，如果发现在commit时不能触发pre-commit，可以试着重新安装husky，并且重启VSCode。</p><h3 id="_2-6-只使用husky的问题" tabindex="-1"><a class="header-anchor" href="#_2-6-只使用husky的问题" aria-hidden="true">#</a> 2.6 只使用husky的问题</h3><p>使用husky虽然能够帮助我们在commit或push前执行一些指令，但是如果只使用husky，仍然存在下面这些问题：</p><ul><li><p>在某次提交时，我们只修改了某个文件，但是只使用husky会把所有的文件都运行一遍Lint检查，时间成本太高。此外，有些项目会在中途才加上husky，但是在commit时husky也会对其它未修改的历史代码进行检查，可能会一下子报了很多错误，这个时候我们更希望只对当前修改过的文件进行检查，而不是对项目中的代码都进行检查。</p></li><li><p>husky的钩子只能执行一个指令，但是有时候我们希望能够在git commit之前执行多个指令，比如执行ESLint、Stylelint或Commitlint等操作。</p><p>为了解决上面的问题，就需要结合Lint-staged一起使用。</p></li></ul><h2 id="_3-git工作流规范-lint-staged" tabindex="-1"><a class="header-anchor" href="#_3-git工作流规范-lint-staged" aria-hidden="true">#</a> 3.Git工作流规范（Lint-staged）</h2><h3 id="_3-1-什么是lint-staged" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是lint-staged" aria-hidden="true">#</a> 3.1 什么是Lint-staged</h3>`,21),b={href:"https://github.com/okonet/lint-staged",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>其次，Lint-staged允许指定不同类型后缀文件执行不同指令的操作，并且可以按步骤再额外执行一些其它shell指令。</p><p>安装Lint-staged，可以使用npm进行安装。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> lint-staged --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-2-配置lint-staged" tabindex="-1"><a class="header-anchor" href="#_3-2-配置lint-staged" aria-hidden="true">#</a> 3.2 配置Lint-staged</h3><p>安装好了Lint-staged之后，就需要配置Lint-staged。我们可以在package.json中加入以下代码，这里需要先安装配置好husky，ESLint和Stylelint。</p><p><code>.lintstagedrc.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;*.vue&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;stylelint --fix&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;*.{js,jsx,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;eslint --fix&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;*.{htm,html,css,sss,less,scss,sass}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;stylelint --fix&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>package.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz &amp;&amp; git push&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;lint:lint-staged&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lint-staged&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>pre-commit</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/usr/bin/env sh</span>
<span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> -- <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span>

npx lint-staged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们执行git commit时，就会触发husky的pre-commit钩子，调用lint-staged命令。而lint-staged包含了对*.vue，<em>.{js,jsx,ts,tsx}，</em>.{htm,html,css,sss,less,scss,sass}类型文件的操作。以*.vue为例，当匹配到后缀名为.vue的文件时，就会分别执行以下操作：</p><ul><li>首先会执行eslint --fix命令，对.vue文件执行ESLint检查，并且自动修复一些JS格式问题</li><li>接着会执行stylelint --fix命令，对.vue文件的CSS执行Stylelint检查，并且自动修复一些CSS格式问题</li><li>最后，若前面的指令都执行通过，那么将加入到本地的git commit中，如果没有执行通过，那么将不能commit</li></ul><h2 id="_4-git工作流规范-commitlint" tabindex="-1"><a class="header-anchor" href="#_4-git工作流规范-commitlint" aria-hidden="true">#</a> 4.Git工作流规范（Commitlint）</h2><p>除了在commit前对JS和CSS执行ESLint和Stylelint检查之外，也可以对Commit Message进行检查。接下来，将会介绍Commitlint的安装和配置方法。</p><h3 id="_4-1-什么是commitlint" tabindex="-1"><a class="header-anchor" href="#_4-1-什么是commitlint" aria-hidden="true">#</a> 4.1 什么是Commitlint</h3>`,16),y={href:"https://commitlint.js.org/#/",target:"_blank",rel:"noopener noreferrer"},f=t(`<h3 id="_4-2-安装commitlint" tabindex="-1"><a class="header-anchor" href="#_4-2-安装commitlint" aria-hidden="true">#</a> 4.2 安装Commitlint</h3><p>使用npm安装Commitlint相关依赖包。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @commitlint/cli @commitlint/config-conventional --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-配置commitlint" tabindex="-1"><a class="header-anchor" href="#_4-3-配置commitlint" aria-hidden="true">#</a> 4.3 配置Commitlint</h3><p>安装好Commitlint之后，就需要配置Commitlint，可以在根目录创建<code>.commitlintrc.js</code>文件进行配置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@commitlint/config-conventional&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_={href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>接下来，需要在<code>.husky</code>中加入<code>commit-msg</code>钩子。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置好了之后，当我们进行git commit时，就会触发commit-msg钩子，执行commintlint命令，并且读取commitlint.config.js中的规则对我们的提交说明进行检查，如果校验不通过，将不能提交。</p><h2 id="_5-cz-git" tabindex="-1"><a class="header-anchor" href="#_5-cz-git" aria-hidden="true">#</a> 5.cz-git</h2><h3 id="_5-1-介绍" tabindex="-1"><a class="header-anchor" href="#_5-1-介绍" aria-hidden="true">#</a> 5.1 介绍</h3>`,5),q={href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"},z=s("p",null,[s("strong",null,"特点")],-1),j=s("li",null,[n("💪 友好型命令行工具，"),s("strong",null,"“懒字优先”"),n(" ！支持在命令行搜索和选择，减少拼写错误。")],-1),C=s("strong",null,"轻量级",-1),S=s("strong",null,"高度自定义",-1),E={href:"https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commits",target:"_blank",rel:"noopener noreferrer"},A={href:"https://cz-git.qbb.sh/zh/recipes/#scopes",target:"_blank",rel:"noopener noreferrer"},L=s("strong",null,"commitlint",-1),G=s("strong",null,"emoji",-1),w={href:"https://cz-git.qbb.sh/zh/recipes/issue-prefixs.html",target:"_blank",rel:"noopener noreferrer"},M=t('<p><strong>为什么制作了这款插件</strong></p><ul><li><p><strong>cz-customizable</strong></p><ol><li>需要额外添加配置文件。</li><li>仅支持上下选择是的交互方式。</li><li>可支持的习惯型配置项少。</li></ol></li><li><p><strong>cz-conventional-changelog</strong></p><ol><li><p>支持的自定义配置项少。</p></li><li><p>交互方式不友好。</p></li><li><p>重复性输入的东西太多。</p></li></ol></li></ul><h3 id="_5-2-项目中使用" tabindex="-1"><a class="header-anchor" href="#_5-2-项目中使用" aria-hidden="true">#</a> 5.2 项目中使用</h3><blockquote><p>只需要简单的三个步骤:</p></blockquote>',4),N={href:"https://cz-git.qbb.sh/zh/guide/#%E5%85%A8%E5%B1%80%E4%BD%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},I=s("code",null,"commitizen",-1),B=s("code",null,"cz",-1),P=s("code",null,"git cz",-1),H=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g commitizen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>步骤 1: 下载依赖</strong></p><ul><li>NPM</li><li>YARN</li><li>PNPM</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -D cz-git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>步骤 2: 修改 <code>package.json</code> 添加 <code>config</code> 指定使用的适配器</strong></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node_modules/cz-git&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤 3: 添加自定义配置(可选，使用默认)</strong></p><blockquote><p>有两种配置方式</p></blockquote>`,8),R={href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/conventional-changelog/commitlint#config",target:"_blank",rel:"noopener noreferrer"},$={href:"https://cz-git.qbb.sh/zh/config/",target:"_blank",rel:"noopener noreferrer"},F=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// .commitlintrc.js</span>
<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;cz-git&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>UserConfig<span class="token punctuation">}</span></span> */</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">rule</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">prompt</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">useEmoji</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token comment">//option...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式二:</strong> 在 <strong>package.json</strong> 下 config.commitizen 下添加自定义配置，但过量的配置项会导致 package.json 臃肿，适合简单自定义。例如:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;git cz&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node_modules/cz-git&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;useEmoji&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-全局使用" tabindex="-1"><a class="header-anchor" href="#_5-3-全局使用" aria-hidden="true">#</a> 5.3 全局使用</h3><blockquote><p>全局安装的好处在于：在任何项目下都可以利用 <code>cz</code> 或 <code>git cz</code> 命令启动命令行工具，生成标准化 commit message</p></blockquote><p>只需要简单的三个步骤：</p><p><strong>步骤 1: 下载全局依赖</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g cz-git commitizen
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>步骤 2: 全局配置适配器类型</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>echo &#39;{ &quot;path&quot;: &quot;cz-git&quot; }&#39; &gt; ~/.czrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>步骤 3: 添加自定义配置(可选，使用默认配置)</strong></p><blockquote><p>有 两种 配置方式</p></blockquote><p><strong>方式一:</strong> 编辑 <code>~/.czrc</code> 文件以 json 形式添加配置, 例如:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz-git&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;useEmoji&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),D={href:"https://github.com/conventional-changelog/commitlint",target:"_blank",rel:"noopener noreferrer"},K=s("code",null,"$HOME",-1),O={href:"https://cz-git.qbb.sh/zh/config/",target:"_blank",rel:"noopener noreferrer"},U=t(`<h3 id="_5-4-我的配置" tabindex="-1"><a class="header-anchor" href="#_5-4-我的配置" aria-hidden="true">#</a> 5.4 我的配置</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// @see: https://cz-git.qbenben.com/zh/guide</span>
<span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;cz-git&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>UserConfig<span class="token punctuation">}</span></span> */</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">ignores</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token parameter">commit</span> <span class="token operator">=&gt;</span> commit<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;init&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@commitlint/config-conventional&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// @see: https://commitlint.js.org/#/reference-rules</span>
    <span class="token string-property property">&#39;body-leading-blank&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;footer-leading-blank&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;header-max-length&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;subject-empty&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;type-empty&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;never&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;subject-case&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;type-enum&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token string">&#39;always&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token string">&#39;feat&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;fix&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;docs&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;refactor&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;perf&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;ci&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;chore&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;revert&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;wip&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;workflow&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;types&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;release&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">prompt</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">messages</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;选择你要提交的类型 :&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">&#39;选择一个提交范围（可选）:&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">customScope</span><span class="token operator">:</span> <span class="token string">&#39;请输入自定义的提交范围 :&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">&#39;填写简短精炼的变更描述 :\\n&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token string">&#39;填写更加详细的变更描述（可选）。使用 &quot;|&quot; 换行 :\\n&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">breaking</span><span class="token operator">:</span> <span class="token string">&#39;列举非兼容性重大的变更（可选）。使用 &quot;|&quot; 换行 :\\n&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">footerPrefixesSelect</span><span class="token operator">:</span> <span class="token string">&#39;选择关联issue前缀（可选）:&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">customFooterPrefix</span><span class="token operator">:</span> <span class="token string">&#39;输入自定义issue前缀 :&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">footer</span><span class="token operator">:</span> <span class="token string">&#39;列举关联issue (可选) 例如: #31, #I3244 :\\n&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">confirmCommit</span><span class="token operator">:</span> <span class="token string">&#39;是否提交或修改commit ?&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">types</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;feat&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;feat:     ✨  新增功能 | A new feature&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:sparkles:&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;fix&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;fix:      🐛  修复缺陷 | A bug fix&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:bug:&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;docs&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;docs:     📝  文档更新 | Documentation only changes&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:memo:&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;style:    💄  代码格式 | Changes that do not affect the meaning of the code&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:lipstick:&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;refactor&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;refactor: ♻️   代码重构 | A code change that neither fixes a bug nor adds a feature&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:recycle:&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;perf&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;perf:     ⚡️  性能提升 | A code change that improves performance&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:zap:&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;test:     ✅  测试相关 |Adding missing tests or correcting existing tests&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:white_check_mark:&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;build:    📦️   构建相关 | Changes that affect the build system or external dependencies&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:package:&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;ci&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;ci:       🎡  持续集成 | Changes to our CI configuration files and scripts&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:ferris_wheel:&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;chore&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;chore:    🔨  其他修改 | Other changes that don&#39;t modify src or test files&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:hammer:&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;revert&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;revert:   ⏪️  回退代码 | Reverts a previous commit&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">emoji</span><span class="token operator">:</span> <span class="token string">&#39;:rewind:&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">useEmoji</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">themeColorCode</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scopes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">allowCustomScopes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">allowEmptyScopes</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">customScopesAlign</span><span class="token operator">:</span> <span class="token string">&#39;bottom&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">customScopesAlias</span><span class="token operator">:</span> <span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">emptyScopesAlias</span><span class="token operator">:</span> <span class="token string">&#39;empty&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">upperCaseSubject</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">allowBreakingChanges</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;feat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fix&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">breaklineNumber</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">breaklineChar</span><span class="token operator">:</span> <span class="token string">&#39;|&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">skipQuestions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">issuePrefixs</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;closed&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;closed:   ISSUES has been processed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">customIssuePrefixsAlign</span><span class="token operator">:</span> <span class="token string">&#39;top&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">emptyIssuePrefixsAlias</span><span class="token operator">:</span> <span class="token string">&#39;skip&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">customIssuePrefixsAlias</span><span class="token operator">:</span> <span class="token string">&#39;custom&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">allowCustomIssuePrefixs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">allowEmptyIssuePrefixs</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">confirmColorize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">maxHeaderLength</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
    <span class="token literal-property property">maxSubjectLength</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>
    <span class="token literal-property property">minSubjectLength</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scopeOverrides</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultBody</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultIssues</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultScope</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultSubject</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://article.biliimg.com/bfs/article/99ead6f04bba10d7799dff1c05aad0d6a3ca63a2.png" alt="image-20230212230104019" tabindex="0" loading="lazy"><figcaption>image-20230212230104019</figcaption></figure>`,3);function J(Q,T){const a=l("ExternalLinkIcon");return o(),i("div",null,[r,s("p",null,[n("那么，什么样的提交说明才能符合规范的说明呢？不同的团队可以制定不同的规范，当然，我们也可以直接使用目前流行的规范，比如"),s("a",u,[n("Angular Git Commit Guidelines"),e(a)]),n("。接下来将会对目前流行的Angular提交规范进行介绍。")]),d,s("p",null,[s("a",m,[n("Commitizen"),e(a)]),n("是一个撰写符合上面Commit Message标准的一款工具，可以帮助开发者提交符合规范的Commit Message。")]),k,s("p",null,[s("a",v,[n("husky"),e(a)]),n("是常见的git hook工具，使用husky可以挂载Git钩子，当我们本地进行git commit或git push等操作前，能够执行其它一些操作，比如进行ESLint检查，如果不通过，就不允许commit或push。")]),g,s("p",null,[s("a",b,[n("Lint-staged"),e(a)]),n("可以在git staged阶段的文件上执行Linters，简单说就是当我们运行ESlint或Stylelint命令时，可以通过设置指定只检查我们通过git add添加到暂存区的文件，可以避免我们每次检查都把整个项目的代码都检查一遍，从而提高效率。")]),h,s("p",null,[n("在使用Git提交代码时，通常都需要填写提交说明，也就是Commit Message。在前面的文章中，已经介绍了如何使用Commitizen或可视化工具编写符合规范的Commit Message。然而有些同学可能还是会使用git commit方式提交一些不符合规范的Commit Message。为了禁止不符合规范的Commit Message的提交，我们就需要采用一些工具，只有当开发者编写了符合规范的Commit Message才能够进行commit。而"),s("a",y,[n("Commitlint"),e(a)]),n("就是这样一种工具，通过结合husky一起使用，可以在开发者进行commit前就对Commit Message进行检查，只有符合规范，才能够进行commit。")]),f,s("p",null,[n("在comminlint.config.js中加入以下代码，表示使用config-conventional规范对提交说明进行检查。具体的规范配置可以查看："),s("a",_,[n("https://github.com/conventional-changelog/commitlint"),e(a)])]),x,s("p",null,[n("一款工程性更强，轻量级，高度自定义，标准输出格式的 "),s("a",q,[n("commitizen"),e(a)]),n(" 适配器")]),z,s("ul",null,[j,s("li",null,[n("⚡️ "),C,n("，"),S,n(", 但输出格式遵循标准的 "),s("a",E,[n("Angular commit"),e(a)]),n(" 规范。")]),s("li",null,[n("🔨 "),s("a",A,[n("更好维护 monorepo 工程化项目"),e(a)]),n(" 与 "),L,n(" 配合给予命令行的相关校验信息。")]),s("li",null,[n("✅ 支持在 commit 中添加 "),G,n(" ｜ 更好的与issue链接，尤其 "),s("a",w,[n("gitee"),e(a)])])]),M,s("p",null,[s("a",N,[n("全局安装"),e(a)]),n(),I,n(",如此一来可以快速使用 "),B,n(" 或 "),P,n(" 命令进行启动。")]),H,s("p",null,[s("strong",null,[n("方式一: (推荐) cz-git 与 "),s("a",R,[n("commitlint"),e(a)]),n(" 进行联动给予校验信息")]),n("，所以可以编写于 "),s("a",V,[n("commitlint"),e(a)]),n(" 配置文件之中。 例如: ("),s("a",$,[n("⇒ 配置模板"),e(a)]),n(")")]),F,s("p",null,[s("strong",null,[n("方式二: 与 "),s("a",D,[n("commitlint"),e(a)]),n(" 配合")]),n("，在 "),K,n(" 路径下创建配置文件 ("),s("a",O,[n("↓ 配置模板"),e(a)]),n(")")]),U])}const Y=p(c,[["render",J],["__file","01.html.vue"]]);export{Y as default};
