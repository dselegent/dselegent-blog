import{ab as p,G as o,H as c,E as n,S as s,N as t,ac as e,W as l}from"./framework-844b12a4.js";const i={},u=n("h1",{id:"_09-【进程间通信】",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_09-【进程间通信】","aria-hidden":"true"},"#"),s(" 09 【进程间通信】")],-1),r=n("p",null,"进程间通信 (IPC) 是在 Electron 中构建功能丰富的桌面应用程序的关键部分之一。 由于主进程和渲染器进程在 Electron 的进程模型具有不同的职责，因此 IPC 是执行许多常见任务的唯一方法，例如从 UI 调用原生 API 或从原生菜单触发 Web 内容的更改。",-1),d=n("p",null,"官方文档：",-1),k={href:"https://www.electronjs.org/docs/latest/api/ipc-main",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.electronjs.org/docs/latest/api/ipc-renderer",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.electronjs.org/docs/latest/api/web-contents#contentssendchannel-args",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"_1-ipc-通道",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-ipc-通道","aria-hidden":"true"},"#"),s(" 1.IPC 通道")],-1),b={href:"https://www.electronjs.org/zh/docs/latest/api/ipc-main",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"ipcMain",-1),w={href:"https://www.electronjs.org/zh/docs/latest/api/ipc-renderer",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"ipcRenderer",-1),f=n("strong",null,"任意",-1),y=n("strong",null,"双向",-1),q=n("p",null,"我们将介绍一些基本的 IPC 模式，并提供具体的示例。您可以将这些示例作为您应用程序代码的参考。",-1),P=n("h2",{id:"_2-渲染器进程到主进程-单向",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-渲染器进程到主进程-单向","aria-hidden":"true"},"#"),s(" 2.渲染器进程到主进程（单向）")],-1),j={href:"https://www.electronjs.org/zh/docs/latest/api/ipc-renderer",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"ipcRenderer.send",-1),x={href:"https://www.electronjs.org/zh/docs/latest/api/ipc-main",target:"_blank",rel:"noopener noreferrer"},C=n("code",null,"ipcMain.on",-1),W=e(`<p>通常使用此模式从 Web 内容调用主进程 API。 我们将通过创建一个简单的应用来演示此模式，可以通过编程方式更改它的窗口标题。</p><h3 id="_2-1-使用-ipcmain-on-监听事件" tabindex="-1"><a class="header-anchor" href="#_2-1-使用-ipcmain-on-监听事件" aria-hidden="true">#</a> 2.1 使用 <code>ipcMain.on</code> 监听事件</h3><p>在主进程中，使用 <code>ipcMain.on</code> API 在 <code>set-title</code> 通道上设置一个 IPC 监听器:</p><p><code>main.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>app<span class="token punctuation">,</span> BrowserWindow<span class="token punctuation">,</span> ipcMain<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//...</span>

<span class="token keyword">function</span> <span class="token function">handleSetTitle</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> title</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> webContents <span class="token operator">=</span> event<span class="token punctuation">.</span>sender
  <span class="token keyword">const</span> win <span class="token operator">=</span> BrowserWindow<span class="token punctuation">.</span><span class="token function">fromWebContents</span><span class="token punctuation">(</span>webContents<span class="token punctuation">)</span>
  win<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createWindow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">webPreferences</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">preload</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;preload.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ipcMain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;set-title&#39;</span><span class="token punctuation">,</span> handleSetTitle<span class="token punctuation">)</span>
  <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),A=n("code",null,"handleSetTitle",-1),T={href:"https://www.electronjs.org/zh/docs/latest/api/structures/ipc-main-event",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"title",-1),M=n("code",null,"set-title",-1),R=n("code",null,"win.setTitle",-1),E=e(`<h3 id="_2-2-通过预加载脚本暴露-ipcrenderer-send" tabindex="-1"><a class="header-anchor" href="#_2-2-通过预加载脚本暴露-ipcrenderer-send" aria-hidden="true">#</a> 2.2 通过预加载脚本暴露 <code>ipcRenderer.send</code></h3><p>要将消息发送到上面创建的监听器，您可以使用 <code>ipcRenderer.send</code> API。 默认情况下，渲染器进程没有权限访问 Node.js 和 Electron 模块。 作为应用开发者，您需要使用 <code>contextBridge</code> API 来选择要从预加载脚本中暴露哪些 API。</p><p>在您的预加载脚本中添加以下代码，向渲染器进程暴露一个全局的 <code>window.electronAPI</code> 变量。</p><p><code>preload.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> contextBridge<span class="token punctuation">,</span> ipcRenderer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;electronAPI&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">setTitle</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;set-title&#39;</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，您将能够在渲染器进程中使用 <code>window.electronAPI.setTitle()</code> 函数。</p>`,6),F=n("p",null,[n("strong",null,"安全警告")],-1),z={href:"https://www.electronjs.org/zh/docs/latest/tutorial/context-isolation#security-considerations",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"ipcRenderer.send",-1),U=e(`<h3 id="_2-3-构建渲染器进程-ui" tabindex="-1"><a class="header-anchor" href="#_2-3-构建渲染器进程-ui" aria-hidden="true">#</a> 2.3 构建渲染器进程 UI</h3><p>在 BrowserWindow 加载的我们的 HTML 文件中，添加一个由文本输入框和按钮组成的基本用户界面:</p><p><code>index.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Security-Policy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default-src &#39;self&#39;; script-src &#39;self&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    Title: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Set<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./render.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使这些元素具有交互性，我们将在导入的 <code>renderer.js</code> 文件中添加几行代码，以利用从预加载脚本中暴露的 <code>window.electronAPI</code> 功能：</p><p><code>renderer.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> setButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> titleInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span>
setButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> title <span class="token operator">=</span> titleInput<span class="token punctuation">.</span>value
    window<span class="token punctuation">.</span>electronAPI<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，您的演示应用应该已经功能齐全。 尝试使用输入框，看看 BrowserWindow 的标题会发生什么变化！</p><h2 id="_3-渲染器进程到主进程-双向" tabindex="-1"><a class="header-anchor" href="#_3-渲染器进程到主进程-双向" aria-hidden="true">#</a> 3.渲染器进程到主进程（双向）</h2>`,9),V={href:"https://www.electronjs.org/zh/docs/latest/api/ipc-renderer#ipcrendererinvokechannel-args",target:"_blank",rel:"noopener noreferrer"},O=n("code",null,"ipcRenderer.invoke",-1),N={href:"https://www.electronjs.org/zh/docs/latest/api/ipc-main#ipcmainhandlechannel-listener",target:"_blank",rel:"noopener noreferrer"},H=n("code",null,"ipcMain.handle",-1),D=e(`<p>在下面的示例中，我们将从渲染器进程打开一个原生的文件对话框，并返回所选文件的路径。</p><h3 id="_3-1-使用-ipcmain-handle-监听事件" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-ipcmain-handle-监听事件" aria-hidden="true">#</a> 3.1 使用 <code>ipcMain.handle</code> 监听事件</h3><p>在主进程中，我们将创建一个 <code>handleFileOpen()</code> 函数，它调用 <code>dialog.showOpenDialog</code> 并返回用户选择的文件路径值。 每当渲染器进程通过 <code>dialog:openFile</code> 通道发送 <code>ipcRender.invoke</code> 消息时，此函数被用作一个回调。 然后，返回值将作为一个 Promise 返回到最初的 <code>invoke</code> 调用。</p><p><code>main.js </code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> BrowserWindow<span class="token punctuation">,</span> dialog<span class="token punctuation">,</span> ipcMain <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token comment">//...</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleFileOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> canceled<span class="token punctuation">,</span> filePaths <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> dialog<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>canceled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> filePaths<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">createWindow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">webPreferences</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">preload</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;preload.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

app<span class="token punctuation">.</span><span class="token function">whenReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  ipcMain<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token string">&#39;dialog:openFile&#39;</span><span class="token punctuation">,</span> handleFileOpen<span class="token punctuation">)</span>
  <span class="token function">createWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>关于通道名称</strong></p><p>IPC 通道名称上的 <code>dialog:</code> 前缀对代码没有影响。 它仅用作命名空间以帮助提高代码的可读性。</p></blockquote><h3 id="_3-2-通过预加载脚本暴露-ipcrenderer-invoke" tabindex="-1"><a class="header-anchor" href="#_3-2-通过预加载脚本暴露-ipcrenderer-invoke" aria-hidden="true">#</a> 3.2 通过预加载脚本暴露 <code>ipcRenderer.invoke</code></h3><p>在预加载脚本中，我们暴露了一个单行的 <code>openFile</code> 函数，它调用并返回 <code>ipcRenderer.invoke(&#39;dialog:openFile&#39;)</code> 的值。 我们将在下一步中使用此 API 从渲染器的用户界面调用原生对话框。</p><p><code>preload.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> contextBridge<span class="token punctuation">,</span> ipcRenderer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;electronAPI&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">openFile</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&#39;dialog:openFile&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),L=n("p",null,[n("strong",null,"安全警告")],-1),Y={href:"https://www.electronjs.org/zh/docs/latest/tutorial/context-isolation#security-considerations",target:"_blank",rel:"noopener noreferrer"},G=n("code",null,"ipcRenderer.invoke",-1),J=e(`<h3 id="_3-3-构建渲染器进程-ui" tabindex="-1"><a class="header-anchor" href="#_3-3-构建渲染器进程-ui" aria-hidden="true">#</a> 3.3 构建渲染器进程 UI</h3><p>最后，让我们构建加载到 BrowserWindow 中的 HTML 文件。</p><p><code>index.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Security-Policy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default-src &#39;self&#39;; script-src &#39;self&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Dialog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>button<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Open a File<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    File path: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>filePath<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>./renderer.js<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户界面包含一个 <code>#btn</code> 按钮元素，将用于触发我们的预加载 API，以及一个 <code>#filePath</code> 元素，将用于显示所选文件的路径。 要使这些部分起作用，需要在渲染器进程脚本中编写几行代码：</p><p><code>render.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> filePathElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;filePath&#39;</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> filePath <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">.</span>electronAPI<span class="token punctuation">.</span><span class="token function">openFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  filePathElement<span class="token punctuation">.</span>innerText <span class="token operator">=</span> filePath
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码片段中，我们监听 <code>#btn</code> 按钮的点击，并调用 <code>window.electronAPI.openFile()</code> API 来激活原生的打开文件对话框。 然后我们在 <code>#filePath</code> 元素中显示选中文件的路径。</p><h3 id="_3-4-注意-对于旧方法" tabindex="-1"><a class="header-anchor" href="#_3-4-注意-对于旧方法" aria-hidden="true">#</a> 3.4 注意：对于旧方法</h3><p><code>ipcRenderer.invoke</code> API 是在 Electron 7 中添加的，作为处理渲染器进程中双向 IPC 的一种开发人员友好的方式。 但这种 IPC 模式存在几种替代方法。</p><blockquote><p><strong>如果可能，请避免使用旧方法</strong></p><p>我们建议尽可能使用 <code>ipcRenderer.invoke</code> 。 出于保留历史的目地，记录了下面双向地渲染器到主进程模式。</p></blockquote><blockquote><p><strong>INFO</strong></p><p>对于以下示例，我们将直接从预加载脚本调用 <code>ipcRenderer</code>，以保持代码示例短小。</p></blockquote><h2 id="_4-主进程到渲染器进程" tabindex="-1"><a class="header-anchor" href="#_4-主进程到渲染器进程" aria-hidden="true">#</a> 4.主进程到渲染器进程</h2>`,13),K={href:"https://www.electronjs.org/zh/docs/latest/api/web-contents",target:"_blank",rel:"noopener noreferrer"},Q=n("code",null,"WebContents",-1),X={href:"https://www.electronjs.org/zh/docs/latest/api/web-contents#contentssendchannel-args",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"send",-1),$=n("code",null,"ipcRenderer.send",-1),nn=e(`<p>为了演示此模式，我们将构建一个由原生操作系统菜单控制的数字计数器。</p><h3 id="_4-1-使用-webcontents-模块发送消息" tabindex="-1"><a class="header-anchor" href="#_4-1-使用-webcontents-模块发送消息" aria-hidden="true">#</a> 4.1 使用 <code>webContents</code> 模块发送消息</h3><p>对于此演示，我们需要首先使用 Electron 的 <code>Menu</code> 模块在主进程中构建一个自定义菜单，该模块使用 <code>webContents.send</code> API 将 IPC 消息从主进程发送到目标渲染器。</p><p><code>main.js </code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>app<span class="token punctuation">,</span> BrowserWindow<span class="token punctuation">,</span> Menu<span class="token punctuation">,</span> ipcMain<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">createWindow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mainWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">webPreferences</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">preload</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;preload.js&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> menu <span class="token operator">=</span> Menu<span class="token punctuation">.</span><span class="token function">buildFromTemplate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">label</span><span class="token operator">:</span> app<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
      <span class="token literal-property property">submenu</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;update-counter&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;Increment&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> mainWindow<span class="token punctuation">.</span>webContents<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;update-counter&#39;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;Decrement&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span>
  Menu<span class="token punctuation">.</span><span class="token function">setApplicationMenu</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span>

  mainWindow<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-通过预加载脚本暴露-ipcrenderer-on" tabindex="-1"><a class="header-anchor" href="#_4-2-通过预加载脚本暴露-ipcrenderer-on" aria-hidden="true">#</a> 4.2 通过预加载脚本暴露 <code>ipcRenderer.on</code></h3><p>与前面的渲染器到主进程的示例一样，我们使用预加载脚本中的 <code>contextBridge</code> 和 <code>ipcRenderer</code> 模块向渲染器进程暴露 IPC 功能：</p><p><code>preload.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> contextBridge<span class="token punctuation">,</span> ipcRenderer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

contextBridge<span class="token punctuation">.</span><span class="token function">exposeInMainWorld</span><span class="token punctuation">(</span><span class="token string">&#39;electronAPI&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">onUpdateCounter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ipcRenderer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;update-counter&#39;</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加载预加载脚本后，渲染器进程应有权访问 <code>window.electronAPI.onUpdateCounter()</code> 监听器函数。</p>`,10),sn=n("p",null,[n("strong",null,"安全警告")],-1),an={href:"https://www.electronjs.org/zh/docs/latest/tutorial/context-isolation#security-considerations",target:"_blank",rel:"noopener noreferrer"},tn=n("code",null,"ipcRenderer.on",-1),en=e(`<h3 id="_4-3-构建渲染器进程-ui" tabindex="-1"><a class="header-anchor" href="#_4-3-构建渲染器进程-ui" aria-hidden="true">#</a> 4.3 构建渲染器进程 UI</h3><p>为了将它们联系在一起，我们将在加载的 HTML 文件中创建一个接口，其中包含一个 <code>#counter</code> 元素，我们将使用该元素来显示值</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Security-Policy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>default-src &#39;self&#39;; script-src &#39;self&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Menu Counter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    Current value: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>counter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./renderer.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，为了更新 HTML 文档中的值，我们将添加几行 DOM 操作的代码，以便在每次触发 <code>update-counter</code> 事件时更新 <code>#counter</code> 元素的值。</p><p><code>renderer.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> counter <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>electronAPI<span class="token punctuation">.</span><span class="token function">onUpdateCounter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_event<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>
    <span class="token keyword">const</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">+</span> value
    counter<span class="token punctuation">.</span>innerText <span class="token operator">=</span> newValue
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们将回调传递给从预加载脚本中暴露的 <code>window.electronAPI.onUpdateCounter</code> 函数。 第二个 <code>value</code> 参数对应于我们传入 <code>webContents.send</code> 函数的 <code>1</code> 或 <code>-1</code>，该函数是从原生菜单调用的。</p><h3 id="_4-4-可选-返回一个回复" tabindex="-1"><a class="header-anchor" href="#_4-4-可选-返回一个回复" aria-hidden="true">#</a> 4.4 可选：返回一个回复</h3><p>对于从主进程到渲染器进程的 IPC，没有与 <code>ipcRenderer.invoke</code> 等效的 API。 不过，您可以从 <code>ipcRenderer.on</code> 回调中将回复发送回主进程。</p><p>我们可以对前面例子的代码进行略微修改来演示这一点。 在渲染器进程中，使用 <code>event</code> 参数，通过 <code>counter-value</code> 通道将回复发送回主进程。</p><p><code>renderer.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> counter <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>electronAPI<span class="token punctuation">.</span><span class="token function">onUpdateCounter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_event<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span>
    <span class="token keyword">const</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">+</span> value
    counter<span class="token punctuation">.</span>innerText <span class="token operator">=</span> newValue
  	_event<span class="token punctuation">.</span>sender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;counter-value&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在主进程中，监听 <code>counter-value</code> 事件并适当地处理它们。</p><p><code>main.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//...</span>
ipcMain<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;counter-value&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_event<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// 将打印到 Node 控制台</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15);function pn(on,cn){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,r,n("blockquote",null,[d,n("p",null,[n("a",k,[s("ipcMain"),t(a)])]),n("p",null,[n("a",v,[s("ipcRenderer"),t(a)])]),n("p",null,[n("a",m,[s("webContents"),t(a)])])]),g,n("p",null,[s("在 Electron 中，进程使用 "),n("a",b,[h,t(a)]),s(" 和 "),n("a",w,[_,t(a)]),s(" 模块，通过开发人员定义的“通道”传递消息来进行通信。 这些通道是 "),f,s(" （您可以随意命名它们）和 "),y,s(" （您可以在两个模块中使用相同的通道名称）的。")]),q,P,n("p",null,[s("要将单向 IPC 消息从渲染器进程发送到主进程，您可以使用 "),n("a",j,[I,t(a)]),s(" API 发送消息，然后使用 "),n("a",x,[C,t(a)]),s(" API 接收。")]),W,n("p",null,[s("上面的 "),A,s(" 回调函数有两个参数：一个 "),n("a",T,[s("IpcMainEvent"),t(a)]),s(" 结构和一个 "),B,s(" 字符串。 每当消息通过 "),M,s(" 通道传入时，此函数找到附加到消息发送方的 BrowserWindow 实例，并在该实例上使用 "),R,s(" API。")]),E,n("blockquote",null,[F,n("p",null,[s("出于 "),n("a",z,[s("安全原因"),t(a)]),s("，我们不会直接暴露整个 "),S,s(" API。 确保尽可能限制渲染器对 Electron API 的访问。")])]),U,n("p",null,[s("双向 IPC 的一个常见应用是从渲染器进程代码调用主进程模块并等待结果。 这可以通过将 "),n("a",V,[O,t(a)]),s(" 与 "),n("a",N,[H,t(a)]),s(" 搭配使用来完成。")]),D,n("blockquote",null,[L,n("p",null,[s("出于 "),n("a",Y,[s("安全原因"),t(a)]),s("，我们不会直接暴露整个 "),G,s(" API。 确保尽可能限制渲染器对 Electron API 的访问。")])]),J,n("p",null,[s("将消息从主进程发送到渲染器进程时，需要指定是哪一个渲染器接收消息。 消息需要通过其 "),n("a",K,[Q,t(a)]),s(" 实例发送到渲染器进程。 此 WebContents 实例包含一个 "),n("a",X,[Z,t(a)]),s(" 方法，其使用方式与 "),$,s(" 相同。")]),nn,n("blockquote",null,[sn,n("p",null,[s("出于 "),n("a",an,[s("安全原因"),t(a)]),s("，我们不会直接暴露整个 "),tn,s(" API。 确保尽可能限制渲染器对 Electron API 的访问。")])]),en])}const un=p(i,[["render",pn],["__file","09.html.vue"]]);export{un as default};
