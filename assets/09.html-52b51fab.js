const n=JSON.parse('{"key":"v-a612129c","path":"/front_end/front_end_framework/react/09.html","title":"09 【组合组件】","lang":"zh-CN","frontmatter":{"description":"09 【组合组件】 1.包含关系 有些组件无法提前知晓它们子组件的具体内容。在 Sidebar（侧边栏）和 Dialog（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。 我们建议这些组件使用一个特殊的 children prop 来将他们的子组件传递到渲染结果中： 组件标签里面包含的子元素会通过 props.children 传递进来。 function One(props) { return ( &lt;div&gt;{props.children}&lt;/div&gt; //特殊的children props ); } function Two(props) { return ( //这使别的组件可以通过JSX嵌套，来将任意组件作为子组件来传递给他们 &lt;One&gt; &lt;div&gt;Hello&lt;/div&gt; &lt;div&gt;World&lt;/div&gt; &lt;/One&gt; ); }","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.icu/front_end/front_end_framework/react/09.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"09 【组合组件】"}],["meta",{"property":"og:description","content":"09 【组合组件】 1.包含关系 有些组件无法提前知晓它们子组件的具体内容。在 Sidebar（侧边栏）和 Dialog（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。 我们建议这些组件使用一个特殊的 children prop 来将他们的子组件传递到渲染结果中： 组件标签里面包含的子元素会通过 props.children 传递进来。 function One(props) { return ( &lt;div&gt;{props.children}&lt;/div&gt; //特殊的children props ); } function Two(props) { return ( //这使别的组件可以通过JSX嵌套，来将任意组件作为子组件来传递给他们 &lt;One&gt; &lt;div&gt;Hello&lt;/div&gt; &lt;div&gt;World&lt;/div&gt; &lt;/One&gt; ); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"09 【组合组件】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.包含关系","slug":"_1-包含关系","link":"#_1-包含关系","children":[]},{"level":2,"title":"2.特例关系问题","slug":"_2-特例关系问题","link":"#_2-特例关系问题","children":[]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":1.47,"words":440},"filePathRelative":"front_end/front_end_framework/react/09.md","localizedDate":"2023年1月30日","excerpt":"<h1> 09 【组合组件】</h1>\\n<h2> 1.包含关系</h2>\\n<p>有些组件无法提前知晓它们子组件的具体内容。在 <code>Sidebar</code>（侧边栏）和 <code>Dialog</code>（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。</p>\\n<p>我们建议这些组件使用一个特殊的 <code>children</code> prop 来将他们的子组件传递到渲染结果中：</p>\\n<blockquote>\\n<p>组件标签里面包含的子元素会通过 <code>props.children</code> 传递进来。</p>\\n</blockquote>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">One</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">props</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token operator\\">&lt;</span>div<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">{</span>props<span class=\\"token punctuation\\">.</span>children<span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>div<span class=\\"token operator\\">&gt;</span>\\n    <span class=\\"token comment\\">//特殊的children props</span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">function</span> <span class=\\"token function\\">Two</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">props</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n  <span class=\\"token comment\\">//这使别的组件可以通过JSX嵌套，来将任意组件作为子组件来传递给他们</span>\\n  <span class=\\"token operator\\">&lt;</span>One<span class=\\"token operator\\">&gt;</span>\\n      <span class=\\"token operator\\">&lt;</span>div<span class=\\"token operator\\">&gt;</span>Hello<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>div<span class=\\"token operator\\">&gt;</span>\\n      <span class=\\"token operator\\">&lt;</span>div<span class=\\"token operator\\">&gt;</span>World<span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>div<span class=\\"token operator\\">&gt;</span>\\n  <span class=\\"token operator\\">&lt;</span><span class=\\"token operator\\">/</span>One<span class=\\"token operator\\">&gt;</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
