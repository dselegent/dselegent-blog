import{ab as g,G as t,H as c,E as a,S as n,N as o,ac as i,W as l}from"./framework-09305b5d.js";const r={},d=i('<h1 id="_03-【计算机网络-数据链路层】" tabindex="-1"><a class="header-anchor" href="#_03-【计算机网络-数据链路层】" aria-hidden="true">#</a> 03 【计算机网络-数据链路层】</h1><h2 id="_1-数据链路层概述" tabindex="-1"><a class="header-anchor" href="#_1-数据链路层概述" aria-hidden="true">#</a> 1.数据链路层概述</h2><h3 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述" aria-hidden="true">#</a> 1.1 概述</h3><p><strong>链路</strong>是从一个结点到相邻结点的一段物理线路，<strong>数据链路</strong>则是在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）</p><p><strong>网络中的主机、路由器等都必须实现数据链路层</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/5acd6abce2b08725ac2a7dd80851f7d8e630bdd4.png" alt="image-20201011102531462" tabindex="0" loading="lazy"><figcaption>image-20201011102531462</figcaption></figure><p><strong>局域网中的主机、交换机等都必须实现数据链路层</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/9115e344ee5bf9733f781c15466cee9eb4e258fb.png" alt="image-20201014004326549" tabindex="0" loading="lazy"><figcaption>image-20201014004326549</figcaption></figure><p><strong>从层次上来看数据的流动</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/2bca20982a774262eefe6738984d26531ca55900.png" alt="image-20201011102618878" tabindex="0" loading="lazy"><figcaption>image-20201011102618878</figcaption></figure><p><strong>仅从数据链路层观察帧的流动</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/7812d681300380a970b8504a8bffe4d7fa3c3a1d.png" alt="image-20201011102653161" tabindex="0" loading="lazy"><figcaption>image-20201011102653161</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/09daab5f85d465d7436aacfa73466acd0de80f40.png" alt="image-20201011102733584" tabindex="0" loading="lazy"><figcaption>image-20201011102733584</figcaption></figure><blockquote><p>主机H1 到主机H2 所经过的网络可以是多种不同类型的</p><p><strong>注意：不同的链路层可能采用不同的数据链路层协议</strong></p></blockquote><p><strong>数据链路层使用的信道</strong></p><p>数据链路层属于计算机网路的低层。<strong>数据链路层使用的信道主要有以下两种类型：</strong></p><ul><li>点对点信道</li><li>广播信道</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/258055a8dec44ecfae4cafc621bc7451220d24d1.png" alt="image-20201014004459744" tabindex="0" loading="lazy"><figcaption>image-20201014004459744</figcaption></figure><blockquote><p><strong>局域网属于数据链路层</strong></p><p>局域网虽然是个网络。但我们并不把局域网放在网络层中讨论。这是因为在网络层要讨论的是多个网络互连的问题，是讨论分组怎么从一个网络，通过路由器，转发到另一个网络。</p><p>而在同一个局域网中，分组怎么从一台主机传送到另一台主机，但并不经过路由器转发。从整个互联网来看，<strong>局域网仍属于数据链路层</strong>的范围</p></blockquote><h3 id="_1-2-三个重要问题" tabindex="-1"><a class="header-anchor" href="#_1-2-三个重要问题" aria-hidden="true">#</a> 1.2 三个重要问题</h3><p>数据链路层传送的协议数据单元是<strong>帧</strong></p><p><strong>封装成帧</strong></p><ul><li><strong>封装成帧</strong> (framing) 就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</li><li>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/64a59ea04d3af21d86d4331b66ef954ca37189a9.png" alt="image-20201011103650253" tabindex="0" loading="lazy"><figcaption>image-20201011103650253</figcaption></figure><p><strong>差错控制</strong></p><p>在传输过程中可能会产生<strong>比特差错</strong>：1 可能会变成 0， 而 0 也可能变成 1。</p><figure><img src="https://i0.hdslb.com/bfs/album/a08184a9dc35e7abb6d67b906509bdb521627d7c.png" alt="image-20201011103917512" tabindex="0" loading="lazy"><figcaption>image-20201011103917512</figcaption></figure><p><strong>可靠传输</strong></p><p>接收方主机收到有误码的帧后，是不会接受该帧的，会将它丢弃</p><p>如果数据链路层向其上层提供的是不可靠服务，那么丢弃就丢弃了，不会再有更多措施</p><p><strong>如果数据链路层向其上层提供的是可靠服务，那就还需要其他措施，来确保接收方主机还可以重新收到被丢弃的这个帧的正确副本</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/deaac3db7acbd5242c0326abe10f8add1ec98c1d.png" alt="image-20201011105314053" tabindex="0" loading="lazy"><figcaption>image-20201011105314053</figcaption></figure><blockquote><p>以上三个问题都是使用<strong>点对点信道的数据链路层</strong>来举例的</p></blockquote><p><strong>如果使用广播信道的数据链路层除了包含上面三个问题外，还有一些问题要解决</strong></p><p>如图所示，主机A，B，C，D，E通过一根总线进行互连，主机A要给主机C发送数据，代表帧的信号会通过总线传输到总线上的其他各主机，那么主机B，D，E如何知道所收到的帧不是发送给她们的，主机C如何知道发送的帧是发送给自己的</p><figure><img src="https://i0.hdslb.com/bfs/album/64b336f8a3d782b6d1b2c3f1e416561c0026fb80.png" alt="image-20201011105824466" tabindex="0" loading="lazy"><figcaption>image-20201011105824466</figcaption></figure><p>可以用编址（地址）的来解决</p><p>将帧的目的地址添加在帧中一起传输</p><figure><img src="https://i0.hdslb.com/bfs/album/fc1c8d9130f3ae5bc555aa626074f34e31b88a22.png" alt="image-20201011110017415" tabindex="0" loading="lazy"><figcaption>image-20201011110017415</figcaption></figure><p>还有数据碰撞问题</p><figure><img src="https://i0.hdslb.com/bfs/album/f8929a3b18bf0da1abadf176450bde1e23777cc0.png" alt="image-20201011110129994" tabindex="0" loading="lazy"><figcaption>image-20201011110129994</figcaption></figure><blockquote><p>随着技术的发展，交换技术的成熟，</p><p>在 有线（局域网）领域 使用<strong>点对点链路</strong>和<strong>链路层交换机</strong>的<strong>交换式局域网</strong>取代了<s>共享式局域网</s></p><p>在无线局域网中仍然使用的是共享信道技术</p></blockquote><h2 id="_2-封装成帧" tabindex="-1"><a class="header-anchor" href="#_2-封装成帧" aria-hidden="true">#</a> 2.封装成帧</h2><h3 id="_2-1-介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-介绍" aria-hidden="true">#</a> 2.1 介绍</h3><p>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧</p><ul><li><strong>帧头和帧尾中包含有重要的控制信息</strong></li></ul><figure><img src="https://i0.hdslb.com/bfs/album/26929448b98c7d409505de3e8d984f3cd90dae8e.png" alt="image-20201011110851301" tabindex="0" loading="lazy"><figcaption>image-20201011110851301</figcaption></figure><p>发送方的数据链路层将上层交付下来的协议数据单元封装成帧后，还要通过物理层，将构成帧的各比特，转换成电信号交给传输媒体，那么接收方的数据链路层如何从物理层交付的比特流中提取出一个个的帧？</p><p>答：需要帧头和帧尾来做<strong>帧定界</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/c99e0705b3f550958ee4add50ee9f9d078d4083e.png" alt="image-20201011111334052" tabindex="0" loading="lazy"><figcaption>image-20201011111334052</figcaption></figure><p>但比不是每一种数据链路层协议的帧都包含有帧定界标志，例如下面例子</p><figure><img src="https://i0.hdslb.com/bfs/album/bfb44c1c113effe7e1857b4d25b2f6c63d3fc041.png" alt="image-20201011111729324" tabindex="0" loading="lazy"><figcaption>image-20201011111729324</figcaption></figure><blockquote><p>前导码</p><ul><li>前同步码：作用是使接收方的时钟同步</li><li>帧开始定界符：表明其后面紧跟着的就是MAC帧</li></ul></blockquote><p>另外以太网还规定了帧间间隔为96比特时间，因此，MAC帧不需要帧结束定界符</p><figure><img src="https://i0.hdslb.com/bfs/album/648a93cbe99ea56ded9973ba634d11f5d18a1164.png" alt="image-20201011112450187" tabindex="0" loading="lazy"><figcaption>image-20201011112450187</figcaption></figure><h3 id="_2-2-透明传输" tabindex="-1"><a class="header-anchor" href="#_2-2-透明传输" aria-hidden="true">#</a> 2.2 透明传输</h3><blockquote><p><strong>透明</strong></p><p>指某一个实际存在的事物看起来却好像不存在一样。</p></blockquote><p>透明传输是指<strong>数据链路层对上层交付的传输数据没有任何限制</strong>，好像数据链路层不存在一样</p><p>帧界定标志也就是个特定数据值，如果在上层交付的协议数据单元中， 恰好也包含这个特定数值，接收方就不能正确接收</p><figure><img src="https://i0.hdslb.com/bfs/album/128f2e7c81be1eeeb75e9c7410426111396307d4.png" alt="image-20201011113207944" tabindex="0" loading="lazy"><figcaption>image-20201011113207944</figcaption></figure><blockquote><p>所以数据链路层应该对上层交付的数据有限制，其内容不能包含帧定界符的值</p></blockquote><p><strong>解决透明传输问题</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/ac87ac6c3fc01eb6ed6b42401020a2aeaf650731.png" alt="image-20201011113804721" tabindex="0" loading="lazy"><figcaption>image-20201011113804721</figcaption></figure><ul><li><strong>解决方法</strong>：面向字节的物理链路使用<strong>字节填充</strong> (byte stuffing) 或<strong>字符填充</strong> (character stuffing)，面向比特的物理链路使用比特填充的方法实现透明传输</li><li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面<strong>插入一个转义字符“ESC”</strong>(其十六进制编码是1B)。</li><li>接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。</li><li>如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</li></ul><p><strong>帧的数据部分长度</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/a68765328d9398e6ce0d74e59e6f71af08ac8a19.png" alt="image-20201011115008209" tabindex="0" loading="lazy"><figcaption>image-20201011115008209</figcaption></figure><h3 id="_2-3-总结" tabindex="-1"><a class="header-anchor" href="#_2-3-总结" aria-hidden="true">#</a> 2.3 总结</h3><figure><img src="https://i0.hdslb.com/bfs/album/d1a29dbf218cd94afd0afb11636a33e6bee2554a.png" alt="image-20201011115049672" tabindex="0" loading="lazy"><figcaption>image-20201011115049672</figcaption></figure><h2 id="_3-差错检测" tabindex="-1"><a class="header-anchor" href="#_3-差错检测" aria-hidden="true">#</a> 3.差错检测</h2><h3 id="_3-1-介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-介绍" aria-hidden="true">#</a> 3.1 介绍</h3><figure><img src="https://i0.hdslb.com/bfs/album/f9b3ab2770dbb0b7de73a4fc330f816d7bd647ce.png" alt="image-20201011133757804" tabindex="0" loading="lazy"><figcaption>image-20201011133757804</figcaption></figure><h3 id="_3-2-奇偶校验" tabindex="-1"><a class="header-anchor" href="#_3-2-奇偶校验" aria-hidden="true">#</a> 3.2 奇偶校验</h3><figure><img src="https://i0.hdslb.com/bfs/album/dca39de867f308ab84ccd6b9407d1fd62d1caf80.png" alt="image-20201011234428217" tabindex="0" loading="lazy"><figcaption>image-20201011234428217</figcaption></figure><h3 id="_3-3-循环冗余校验crc-cyclic-redundancy-check" tabindex="-1"><a class="header-anchor" href="#_3-3-循环冗余校验crc-cyclic-redundancy-check" aria-hidden="true">#</a> 3.3 循环冗余校验CRC(Cyclic Redundancy Check)</h3><figure><img src="https://i0.hdslb.com/bfs/album/15197f104d72cc63bee36400908fc65932ca890b.png" alt="image-20201011234605045" tabindex="0" loading="lazy"><figcaption>image-20201011234605045</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/324e193b55e43f7d6fc53643d2e4ce2e493aa9b2.png" alt="image-20201011234701845" tabindex="0" loading="lazy"><figcaption>image-20201011234701845</figcaption></figure><p><strong>例题</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/e06e7e2430ecd906dd224e85cdbe3a2c2f065649.png" alt="image-20201011235128869" tabindex="0" loading="lazy"><figcaption>image-20201011235128869</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/52d321cb2ed160b78ff229353be7bd4ac7f785bf.png" alt="image-20201011235325022" tabindex="0" loading="lazy"><figcaption>image-20201011235325022</figcaption></figure><p><strong>总结</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/c8f62293433cdfb476c48a07aa053cc089e47fd6.png" alt="image-20201011235726437" tabindex="0" loading="lazy"><figcaption>image-20201011235726437</figcaption></figure><blockquote><p>循环冗余校验 CRC 是一种检错方法，而帧校验序列 FCS 是添加在数据后面的冗余码</p></blockquote><h2 id="_4-可靠传输" tabindex="-1"><a class="header-anchor" href="#_4-可靠传输" aria-hidden="true">#</a> 4.可靠传输</h2><h3 id="_4-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_4-1-基本概念" aria-hidden="true">#</a> 4.1 基本概念</h3><p><strong>下面是比特差错</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/d9b470075d05446965ea05b806289928d1b3f9a7.png" alt="image-20201012153605893" tabindex="0" loading="lazy"><figcaption>image-20201012153605893</figcaption></figure><p><strong>其他传输差错</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/2542c8c3d4cfd1f36f926c5b5cf39c8bb80c9641.png" alt="image-20201012153811724" tabindex="0" loading="lazy"><figcaption>image-20201012153811724</figcaption></figure><ul><li>分组丢失</li></ul><p>路由器输入队列快满了，主动丢弃收到的分组</p><figure><img src="https://i0.hdslb.com/bfs/album/1c7c149c5cda205a4fb60990d346414a0293d9d2.png" alt="image-20201012154910921" tabindex="0" loading="lazy"><figcaption>image-20201012154910921</figcaption></figure><ul><li>分组失序</li></ul><p>数据并未按照发送顺序依次到达接收端</p><figure><img src="https://i0.hdslb.com/bfs/album/b7279978d099272fc4e4e81557d194007ba66f16.png" alt="image-20201012155300937" tabindex="0" loading="lazy"><figcaption>image-20201012155300937</figcaption></figure><ul><li>分组重复</li></ul><p>由于某些原因，有些分组在网络中滞留了，没有及时到达接收端，这可能会造成发送端对该分组的重发，重发的分组到达接收端，但一段时间后，滞留在网络的分组也到达了接收端，这就造成<strong>分组重复</strong>的传输差错</p><figure><img src="https://i0.hdslb.com/bfs/album/952edf1f47dae7d57e72c8d451b26be61008d01f.png" alt="image-20201012160026362" tabindex="0" loading="lazy"><figcaption>image-20201012160026362</figcaption></figure><h3 id="_4-2-三种可靠协议" tabindex="-1"><a class="header-anchor" href="#_4-2-三种可靠协议" aria-hidden="true">#</a> 4.2 三种可靠协议</h3><ul><li>停止-等待协议SW</li><li>回退N帧协议GBN</li><li>选择重传协议SR</li></ul><blockquote><p>这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中</p></blockquote><h3 id="_4-3-停止-等待协议" tabindex="-1"><a class="header-anchor" href="#_4-3-停止-等待协议" aria-hidden="true">#</a> 4.3 停止-等待协议</h3><h4 id="_4-3-1-停止-等待协议可能遇到的四个问题" tabindex="-1"><a class="header-anchor" href="#_4-3-1-停止-等待协议可能遇到的四个问题" aria-hidden="true">#</a> 4.3.1 停止-等待协议可能遇到的四个问题</h4><p><strong>确认与否认</strong></p><img src="https://i0.hdslb.com/bfs/album/c225aafae0e965a907095f756a27ce5cee06539e.png" alt="image-20201012162009780" style="zoom:67%;"><p><strong>超时重传</strong></p><img src="https://i0.hdslb.com/bfs/album/03e31a77eaaec2895fe6bd0fd3202dfcb7f519e6.png" alt="image-20201012162112151" style="zoom:67%;"><p><strong>确认丢失</strong></p><img src="https://i0.hdslb.com/bfs/album/f60c043de38fc51f1263c7023a0edde7151a2d20.png" alt="image-20201012162318298" style="zoom:67%;"><img src="https://i0.hdslb.com/bfs/album/42e85d3b1b267aca702b85e7392a5a3699598de9.png" alt="image-20201012162348428" style="zoom:67%;"><blockquote><p>既然数据分组需要编号，确认分组是否需要编号？</p><p>要。如下图所示</p></blockquote><p><strong>确认迟到</strong></p><img src="https://i0.hdslb.com/bfs/album/6e5aeb4f74c1446b4d59003da864a17ea8beca5e.png" alt="image-20201012162815885" style="zoom:67%;"><blockquote><p>注意，图中最下面那个数据分组与之前序号为0的那个数据分组不是同一个数据分组</p></blockquote><p><strong>注意事项</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/bd9da3f3e28383b5c37b46538bd8386412500bfb.png" alt="image-20201012164008780" tabindex="0" loading="lazy"><figcaption>image-20201012164008780</figcaption></figure><h4 id="_4-3-2-停止-等待协议的信道利用率" tabindex="-1"><a class="header-anchor" href="#_4-3-2-停止-等待协议的信道利用率" aria-hidden="true">#</a> 4.3.2 停止-等待协议的信道利用率</h4><p>假设收发双方之间是一条直通的信道</p><ul><li><strong>TD</strong>：是发送方发送数据分组所耗费的发送时延</li><li><strong>RTT</strong>：是收发双方之间的往返时间</li><li><strong>TA</strong>：是接收方发送确认分组所耗费的发送时延</li></ul><p>TA一般都远小于TD，可以忽略，当RTT远大于TD时，信道利用率会非常低</p><figure><img src="https://i0.hdslb.com/bfs/album/830f0ec4c2598a9cc92770e2c5e4d9d3b87ff03d.png" alt="image-20201012164924635" tabindex="0" loading="lazy"><figcaption>image-20201012164924635</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/20f109d50896a0db277aa434a432e53c9fe4becc.png" alt="image-20201012181005719" tabindex="0" loading="lazy"><figcaption>image-20201012181005719</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/af72bc5df764854245161e587e7091b5f1fba767.png" alt="image-20201012181047665" tabindex="0" loading="lazy"><figcaption>image-20201012181047665</figcaption></figure><blockquote><p>像停止-等待协议这样通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ(<strong>A</strong>utomatic <strong>R</strong>epeat re<strong>Q</strong>uest)，意思是重传的请求是自动进行，因为不需要接收方显式地请求，发送方重传某个发送的分组</p></blockquote><h3 id="_4-4-回退n帧协议gbn" tabindex="-1"><a class="header-anchor" href="#_4-4-回退n帧协议gbn" aria-hidden="true">#</a> 4.4 回退N帧协议GBN</h3><h4 id="_4-4-1-为什么用回退n帧协议" tabindex="-1"><a class="header-anchor" href="#_4-4-1-为什么用回退n帧协议" aria-hidden="true">#</a> 4.4.1 为什么用回退N帧协议</h4><p>在相同的时间内，使用停止-等待协议的发送方只能发送一个数据分组，而采用流水线传输的发送方，可以发送多个数据分组</p><figure><img src="https://i0.hdslb.com/bfs/album/afe52cb97792e7032222354d096e167c1137552e.png" alt="image-20201012190027828" tabindex="0" loading="lazy"><figcaption>image-20201012190027828</figcaption></figure><p>回退N帧协议在流水线传输的基础上，利用发送窗口来限制发送方可连续发送数据分组的个数</p><figure><img src="https://i0.hdslb.com/bfs/album/2a9603925d6e1a17b91eb2ff94b1a9a592431b8f.png" alt="image-20201012190632086" tabindex="0" loading="lazy"><figcaption>image-20201012190632086</figcaption></figure><h4 id="_4-4-2-无差错情况流程" tabindex="-1"><a class="header-anchor" href="#_4-4-2-无差错情况流程" aria-hidden="true">#</a> 4.4.2 无差错情况流程</h4><p>发送方将序号落在发送窗口内的0~4号数据分组，依次连续发送出去</p><figure><img src="https://i0.hdslb.com/bfs/album/8089ed6a637a13a18f0b8e84cb15c1a01d44f3ec.png" alt="image-20201012191936466" tabindex="0" loading="lazy"><figcaption>image-20201012191936466</figcaption></figure><p>他们经过互联网传输正确到达接收方，就是没有乱序和误码，接收方按序接收它们，每接收一个，接收窗口就向前滑动一个位置，并给发送方发送针对所接收分组的确认分组，在通过互联网的传输正确到达了发送方</p><figure><img src="https://i0.hdslb.com/bfs/album/ee86b4c7024967115a40ecae68fd060f75acb920.png" alt="image-20201012192932035" tabindex="0" loading="lazy"><figcaption>image-20201012192932035</figcaption></figure><p>发送方每接收一个、发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口，发送方可以将收到确认的数据分组从缓存中删除了，而接收方可以择机将已接收的数据分组交付上层处理</p><figure><img src="https://i0.hdslb.com/bfs/album/4c64002b9957631307406425967d290f47921462.png" alt="image-20201012193212419" tabindex="0" loading="lazy"><figcaption>image-20201012193212419</figcaption></figure><h4 id="_4-4-3-累计确认" tabindex="-1"><a class="header-anchor" href="#_4-4-3-累计确认" aria-hidden="true">#</a> 4.4.3 累计确认</h4><figure><img src="https://i0.hdslb.com/bfs/album/d1ddd8e7e129a5d78de4e6ac98bbbeeb941b3767.png" alt="image-20201012194304696" tabindex="0" loading="lazy"><figcaption>image-20201012194304696</figcaption></figure><blockquote><p>累计确认</p><p>优点:</p><ul><li>即使确认分组丢失，发送方也可能不必重传</li><li>减小接收方的开销</li><li>减小对网络资源的占用</li></ul><p>缺点：</p><ul><li>不能向发送方及时反映出接收方已经正确接收的数据分组信息</li></ul></blockquote><h4 id="_4-4-4-有差错情况" tabindex="-1"><a class="header-anchor" href="#_4-4-4-有差错情况" aria-hidden="true">#</a> 4.4.4 有差错情况</h4><p>例如</p><p>在传输数据分组时，5号数据分组出现误码，接收方通过数据分组中的检错码发现了错误</p><figure><img src="https://i0.hdslb.com/bfs/album/118b7e3978e793392f0cbba4d39302427fa7cd2f.png" alt="image-20201012195440780" tabindex="0" loading="lazy"><figcaption>image-20201012195440780</figcaption></figure><p>于是丢弃该分组，而后续到达的这剩下四个分组与接收窗口的序号不匹配</p><figure><img src="https://i0.hdslb.com/bfs/album/7974ee7b2b1f0e17d0a6d4ff2e340528604efb26.png" alt="image-20201012195629368" tabindex="0" loading="lazy"><figcaption>image-20201012195629368</figcaption></figure><p>接收同样也不能接收它们，讲它们丢弃，并对之前按序接收的最后一个数据分组进行确认，发送ACK4，<strong>每丢弃一个数据分组，就发送一个ACK4</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/ad50843ccec751291b2cf31810117dcd63aee331.png" alt="image-20201012195836902" tabindex="0" loading="lazy"><figcaption>image-20201012195836902</figcaption></figure><p>当收到重复的ACK4时，就知道之前所发送的数据分组出现了差错，于是可以不等超时计时器超时就立刻开始重传，具体收到几个重复确认就立刻重传，根据具体实现决定</p><figure><img src="https://i0.hdslb.com/bfs/album/0a2ea17c814f42f6bcd13d55c58454325522ee11.png" alt="image-20201012200120166" tabindex="0" loading="lazy"><figcaption>image-20201012200120166</figcaption></figure><p>如果收到这4个重复的确认并不会触发发送立刻重传，一段时间后。超时计时器超时，也会将发送窗口内以发送过的这些数据分组全部重传</p><figure><img src="https://i0.hdslb.com/bfs/album/ec046d9e17ae7229a16105aabfef0903f4762c8c.png" alt="image-20201012200454557" tabindex="0" loading="lazy"><figcaption>image-20201012200454557</figcaption></figure><p>若WT超过取值范围，例如WT=8，会出现什么情况？</p><figure><img src="https://i0.hdslb.com/bfs/album/4cdb06c0972c6f9f44037b1dda6eab624c4eb032.png" alt="image-20201012201109774" tabindex="0" loading="lazy"><figcaption>image-20201012201109774</figcaption></figure><p>习题</p><figure><img src="https://i0.hdslb.com/bfs/album/05f4008f6c0888d26c511b27b132eb8bc1514bfc.png" alt="image-20201012202419107" tabindex="0" loading="lazy"><figcaption>image-20201012202419107</figcaption></figure><p><strong>总结</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/c66f5efe0d303d1516fc7c0337ad879e7b6fd0a8.png" alt="image-20201012202222138" tabindex="0" loading="lazy"><figcaption>image-20201012202222138</figcaption></figure><ul><li>回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议</li><li>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议</li><li>由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高</li></ul><h3 id="_4-5-选择重传协议sr" tabindex="-1"><a class="header-anchor" href="#_4-5-选择重传协议sr" aria-hidden="true">#</a> 4.5 选择重传协议SR</h3><figure><img src="https://i0.hdslb.com/bfs/album/96707e9aeac9c73870d60963bc5450bbaba31405.png" alt="image-20201012203638722" tabindex="0" loading="lazy"><figcaption>image-20201012203638722</figcaption></figure>',160),s={href:"https://www.bilibili.com/video/BV1c4411d7jb?p=27",target:"_blank",rel:"noopener noreferrer"},f=i('<p><strong>习题</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/67d9d360b95d4f7776151dfbcc7bc7c528e6d866.png" alt="image-20201012205250996" tabindex="0" loading="lazy"><figcaption>image-20201012205250996</figcaption></figure><p><strong>总结</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/57a3e7bcc2c42004c61b03844c904ff50721561f.png" alt="image-20201012204742870" tabindex="0" loading="lazy"><figcaption>image-20201012204742870</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/eae3ff4440394afc5d6ae2635d4c28408edace5c.png" alt="image-20201012205133924" tabindex="0" loading="lazy"><figcaption>image-20201012205133924</figcaption></figure><hr><h2 id="_5-点对点协议ppp" tabindex="-1"><a class="header-anchor" href="#_5-点对点协议ppp" aria-hidden="true">#</a> 5.点对点协议PPP</h2><ul><li>点对点协议PPP（Point-to-Point Protocol）是目前使用最广泛的点对点数据链路层协议</li><li>PPP协议是因特网工程任务组IEIF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为因特网的正式标准[RFC1661，RFC1662]</li><li>数据链路层使用的一种协议，它的特点是：简单；只检测差错，而不是纠正差错；不使用序号，也不进行流量控制；可同时支持多种网络层协议</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/71446dbb26911ef7f5eb24a542d3b057eeb5a026.png" alt="image-20201012210844629" tabindex="0" loading="lazy"><figcaption>image-20201012210844629</figcaption></figure><ul><li>PPPoE 是为宽带上网的主机使用的链路层协议</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/1fceb0cefaf86acd991e999198604c48a617a52c.png" alt="image-20201012211423528" tabindex="0" loading="lazy"><figcaption>image-20201012211423528</figcaption></figure><h3 id="_5-1-帧格式" tabindex="-1"><a class="header-anchor" href="#_5-1-帧格式" aria-hidden="true">#</a> 5.1 帧格式</h3><p>必须规定特殊的字符作为帧定界符</p><figure><img src="https://i0.hdslb.com/bfs/album/71c2b5c2b997a529dab9c7fa0bc8f117bf5828d1.png" alt="image-20201012211826281" tabindex="0" loading="lazy"><figcaption>image-20201012211826281</figcaption></figure><h3 id="_5-2-透明传输" tabindex="-1"><a class="header-anchor" href="#_5-2-透明传输" aria-hidden="true">#</a> 5.2 透明传输</h3><p>必须保证数据传输的透明性</p><p>实现透明传输的方法</p><ul><li>面向字节的异步链路：字节填充法（插入“转义字符”）</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/d5013bd9ebb6974f250809e1ab33fcd934ddd5ee.png" alt="image-20201012212148803" tabindex="0" loading="lazy"><figcaption>image-20201012212148803</figcaption></figure><ul><li>面向比特的同步链路：比特填充法（插入“比特0”）</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/d6fb32eabe33e61a1a16295a0ef179b5f2b07e6a.png" alt="image-20201012212255550" tabindex="0" loading="lazy"><figcaption>image-20201012212255550</figcaption></figure><h3 id="_5-3-差错检测" tabindex="-1"><a class="header-anchor" href="#_5-3-差错检测" aria-hidden="true">#</a> 5.3 差错检测</h3><p>能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。</p><figure><img src="https://i0.hdslb.com/bfs/album/f6f3c05e615cf632bb5e8d5e32516c10dafc7077.png" alt="image-20201012212558654" tabindex="0" loading="lazy"><figcaption>image-20201012212558654</figcaption></figure><h3 id="_5-4-工作状态" tabindex="-1"><a class="header-anchor" href="#_5-4-工作状态" aria-hidden="true">#</a> 5.4 工作状态</h3><ul><li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li><li>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</li><li>这些分组及其响应选择一些 PPP 参数，并进行网络层配置，NCP 给新接入的 PC 机</li><li>分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li><li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/9783bdebee0a34562325e045ef7396c68d44aabd.png" alt="image-20201012213021860" tabindex="0" loading="lazy"><figcaption>image-20201012213021860</figcaption></figure><blockquote><p>可见，PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</p></blockquote><hr><h2 id="_6-媒体接入控制-介质访问控制-——广播信道" tabindex="-1"><a class="header-anchor" href="#_6-媒体接入控制-介质访问控制-——广播信道" aria-hidden="true">#</a> 6.媒体接入控制（介质访问控制）——广播信道</h2><p><strong>媒体接入控制（介质访问控制）使用一对多的广播通信方式</strong></p><blockquote><p><strong>Medium Access Control</strong>翻译成媒体接入控制，有些翻译成介质访问控制</p></blockquote><p><strong>局域网的数据链路层</strong></p><ul><li>局域网最主要的<strong>特点</strong>是： <ul><li>网络为一个单位所拥有；</li><li>地理范围和站点数目均有限。</li></ul></li><li>局域网具有如下<strong>主要优点</strong>： <ul><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ul></li></ul><figure><img src="https://i0.hdslb.com/bfs/album/b239bc0c1d1a9a01fb403ea9c0bf17df57251d18.png" alt="image-20201013201521915" tabindex="0" loading="lazy"><figcaption>image-20201013201521915</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/5d748f80f3499d788048b0186bd72fec312c046d.png" alt="image-20201013201533445" tabindex="0" loading="lazy"><figcaption>image-20201013201533445</figcaption></figure><p><strong>数据链路层的两个子层</strong></p><p>为了使数据链路层能更好地适应多种局域网标准，IEEE 802 委员会就将局域网的数据链路层拆成<strong>两个子层</strong>：</p><ol><li><strong>逻辑链路控制</strong> LLC (Logical Link Control)子层；</li><li><strong>媒体接入控制</strong> MAC (Medium Access Control)子层。</li></ol><p>与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关。 <strong>不管采用何种协议的局域网，对 LLC 子层来说都是透明的。</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/71d21d368e8348a2a47c0468a2f664dc77fa1a84.png" alt="image-20201013201133903" tabindex="0" loading="lazy"><figcaption>image-20201013201133903</figcaption></figure><h3 id="_6-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_6-1-基本概念" aria-hidden="true">#</a> 6.1 基本概念</h3><p>为什么要媒体接入控制（介质访问控制）？</p><p><strong>共享信道带来的问题</strong></p><p>若多个设备在共享信道上同时发送数据，则会造成彼此干扰，导致发送失败。</p><figure><img src="https://i0.hdslb.com/bfs/album/1935ebbe4d1c71048038e390ee19e26f29a943ec.png" alt="image-20201013152007335" tabindex="0" loading="lazy"><figcaption>image-20201013152007335</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/51db407eaf11186eda92b2ada2abc537dfb4900b.png" alt="image-20201013152453425" tabindex="0" loading="lazy"><figcaption>image-20201013152453425</figcaption></figure><blockquote><p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术</p></blockquote><h3 id="_6-2-静态划分信道" tabindex="-1"><a class="header-anchor" href="#_6-2-静态划分信道" aria-hidden="true">#</a> 6.2 静态划分信道</h3><p><strong>信道复用</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/41fb8a21fb6809f8c79bd3be91214d225c24dc44.png" alt="image-20201013153642544" tabindex="0" loading="lazy"><figcaption>image-20201013153642544</figcaption></figure><p><strong>频分复用FDM (Frequency Division Multiplexing)</strong></p><ul><li><p>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p></li><li><p><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</p></li></ul><figure><img src="https://i0.hdslb.com/bfs/album/c6b24da7f4c08c6f9b633cb88ec66d2c2819d9da.png" alt="image-20201013153947668" tabindex="0" loading="lazy"><figcaption>image-20201013153947668</figcaption></figure><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><figure><img src="https://i0.hdslb.com/bfs/album/9f1cbf2953f645f0c762af94418f17f012ab25bf.png" alt="image-20201013154142540" tabindex="0" loading="lazy"><figcaption>image-20201013154142540</figcaption></figure><p><strong>波分复用 WDM(Wavelength Division Multiplexing)</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/8f549e2afc70c6ba9195e22fb9c7366e6c3f7db6.png" alt="image-20201013202218132" tabindex="0" loading="lazy"><figcaption>image-20201013202218132</figcaption></figure><blockquote><p>波分复用就是光的频分复用，使用一根光纤来同时传输多个光载波信号</p><p>光信号传输一段距离后悔衰减，所以要用 掺铒光纤放大器 放大光信号</p></blockquote><p><strong>码分复用 CDM (Code Division Multiplexing)</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/c74022c4dff1e3c0251d9f70298e4db63dda4bca.png" alt="image-20201013203126625" tabindex="0" loading="lazy"><figcaption>image-20201013203126625</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/b15e8c97c0de85e028204e283f550fc04ca6f025.png" alt="image-20201013203324709" tabindex="0" loading="lazy"><figcaption>image-20201013203324709</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/b47880df32748c06422cf471bae663405adec60d.png" alt="image-20201013203459640" tabindex="0" loading="lazy"><figcaption>image-20201013203459640</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/57e1b921da32c0a50d2c92e44ef9ac9fd4aa999a.png" alt="image-20201013203819578" tabindex="0" loading="lazy"><figcaption>image-20201013203819578</figcaption></figure><h3 id="_6-3-动态接入控制" tabindex="-1"><a class="header-anchor" href="#_6-3-动态接入控制" aria-hidden="true">#</a> 6.3 动态接入控制</h3><p>受控接入</p><p><strong>受控接入在局域网中使用得较少，本书不再讨论</strong></p><p><strong>随机接入</strong></p><p><strong>重点</strong></p><h3 id="_6-4-随机接入-csma-cd协议" tabindex="-1"><a class="header-anchor" href="#_6-4-随机接入-csma-cd协议" aria-hidden="true">#</a> 6.4 随机接入（CSMA/CD协议）</h3><p><strong>总线局域网使用协议：CSMA/CD</strong></p><h4 id="_6-4-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_6-4-1-基本概念" aria-hidden="true">#</a> 6.4.1 基本概念</h4><p><strong>最初</strong>的<strong>以太网</strong>是将许多计算机都连接到一根总线上。易于实现广播通信。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。</p><blockquote><p><strong>以太网（Ethernet）<strong>是一种计算机</strong>局域网技术</strong>。IEEE组织的IEEE 802.3标准制定了**以太网（Ethernet）**的技术标准</p><p>以太网采用无连接的工作方式，对发送的数据帧不进行编号，也不要求对方发回确认。目的站收到有差错帧就把它丢弃，其他什么也不做</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/a6a6666bee1c1da1ad53dae858e4688c92b77312.png" alt="image-20201013211620687" tabindex="0" loading="lazy"><figcaption>image-20201013211620687</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/9ea8960c623c6c8f4b793480429c24e99bc1fd95.png" alt="image-20201013213102777" tabindex="0" loading="lazy"><figcaption>image-20201013213102777</figcaption></figure><h4 id="_6-4-2-多址接入ma" tabindex="-1"><a class="header-anchor" href="#_6-4-2-多址接入ma" aria-hidden="true">#</a> 6.4.2 多址接入MA</h4><p>表示许多主机以多点接入的方式连接在一根总线上。</p><figure><img src="https://i0.hdslb.com/bfs/album/d614cceb5714e1cc6e66572814a9eb4e21c21dbc.png" alt="image-20201013215400688" tabindex="0" loading="lazy"><figcaption>image-20201013215400688</figcaption></figure><h4 id="_6-4-3-载波监听cs" tabindex="-1"><a class="header-anchor" href="#_6-4-3-载波监听cs" aria-hidden="true">#</a> 6.4.3 载波监听CS</h4><p>是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</p><figure><img src="https://i0.hdslb.com/bfs/album/6d655ac7aec2961acfe8c9cc3dcbd3f053647e35.png" alt="image-20201013215530979" tabindex="0" loading="lazy"><figcaption>image-20201013215530979</figcaption></figure><p>总线上并没有什么“载波”。因此， <strong>“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。</strong></p><h4 id="_6-4-4-碰撞检测cd" tabindex="-1"><a class="header-anchor" href="#_6-4-4-碰撞检测cd" aria-hidden="true">#</a> 6.4.4 碰撞检测CD</h4><ul><li><strong>“碰撞检测”<strong>就是计算机</strong>边发送数据边检测</strong>信道上的信号电压大小。</li><li>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。</li><li>当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。</li><li><strong>所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“冲突检测”。</strong></li><li>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。</li><li><strong>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</strong></li></ul><figure><img src="https://i0.hdslb.com/bfs/album/9a2c67a80d95175f3997b253cc89c35a026ee55d.png" alt="image-20201013221240514" tabindex="0" loading="lazy"><figcaption>image-20201013221240514</figcaption></figure><blockquote><p>为什么要进行碰撞检测？ 因为信号传播时延对载波监听产生了影响</p><figure><img src="https://i0.hdslb.com/bfs/album/c590d8cec4125d4305ce65065a81d56d61b20576.png" alt="image-20201013221834942" tabindex="0" loading="lazy"><figcaption>image-20201013221834942</figcaption></figure><p>A 需要单程传播时延的 2 倍的时间，才能检测到与 B 的发送产生了冲突</p></blockquote><h4 id="_6-4-5-csma-cd-协议工作流程" tabindex="-1"><a class="header-anchor" href="#_6-4-5-csma-cd-协议工作流程" aria-hidden="true">#</a> 6.4.5 CSMA/CD 协议工作流程</h4><figure><img src="https://i0.hdslb.com/bfs/album/6533ee2d75a173ff67890633896c5132035e27a4.png" alt="image-20201013221705893" tabindex="0" loading="lazy"><figcaption>image-20201013221705893</figcaption></figure><h4 id="_6-4-6-csma-cd-协议工作——争用期-碰撞窗口" tabindex="-1"><a class="header-anchor" href="#_6-4-6-csma-cd-协议工作——争用期-碰撞窗口" aria-hidden="true">#</a> 6.4.6 CSMA/CD 协议工作——争用期（碰撞窗口）</h4><figure><img src="https://i0.hdslb.com/bfs/album/6f9db7844f06316f29bbd55092e304e027385a72.png" alt="image-20201013223235305" tabindex="0" loading="lazy"><figcaption>image-20201013223235305</figcaption></figure><h4 id="_6-4-7-csma-cd-协议工作——最小帧长" tabindex="-1"><a class="header-anchor" href="#_6-4-7-csma-cd-协议工作——最小帧长" aria-hidden="true">#</a> 6.4.7 CSMA/CD 协议工作——最小帧长</h4><figure><img src="https://i0.hdslb.com/bfs/album/c256c9ca131cf24167c38f340e0a7ab3c4e2a032.png" alt="image-20201013224051932" tabindex="0" loading="lazy"><figcaption>image-20201013224051932</figcaption></figure><h4 id="_6-4-8-csma-cd-协议工作——最大帧长" tabindex="-1"><a class="header-anchor" href="#_6-4-8-csma-cd-协议工作——最大帧长" aria-hidden="true">#</a> 6.4.8 CSMA/CD 协议工作——最大帧长</h4><figure><img src="https://i0.hdslb.com/bfs/album/0c441cc932b91ee2374d728d8b1aac05907c6087.png" alt="image-20201013225400777" tabindex="0" loading="lazy"><figcaption>image-20201013225400777</figcaption></figure><h4 id="_6-4-9-csma-cd-协议工作——截断二进制指数退避算法" tabindex="-1"><a class="header-anchor" href="#_6-4-9-csma-cd-协议工作——截断二进制指数退避算法" aria-hidden="true">#</a> 6.4.9 CSMA/CD 协议工作——截断二进制指数退避算法</h4><figure><img src="https://i0.hdslb.com/bfs/album/7f114193f64946f2eb21c0f6f3527b6990a20e2a.png" alt="image-20201013230717856" tabindex="0" loading="lazy"><figcaption>image-20201013230717856</figcaption></figure><h4 id="_6-4-10-csma-cd-协议工作——信道利用率" tabindex="-1"><a class="header-anchor" href="#_6-4-10-csma-cd-协议工作——信道利用率" aria-hidden="true">#</a> 6.4.10 CSMA/CD 协议工作——信道利用率</h4><figure><img src="https://i0.hdslb.com/bfs/album/97bb18a85355008887fe81337e87a56a0526bf2d.png" alt="image-20201013231430295" tabindex="0" loading="lazy"><figcaption>image-20201013231430295</figcaption></figure><h4 id="_6-4-11-csma-cd-协议工作——帧接收流程" tabindex="-1"><a class="header-anchor" href="#_6-4-11-csma-cd-协议工作——帧接收流程" aria-hidden="true">#</a> 6.4.11 CSMA/CD 协议工作——帧接收流程</h4><figure><img src="https://i0.hdslb.com/bfs/album/29c1fced049627a6b5751874bcfafe23dbc74c04.png" alt="image-20201013231703302" tabindex="0" loading="lazy"><figcaption>image-20201013231703302</figcaption></figure><h4 id="_6-4-12-csma-cd-协议的重要特性" tabindex="-1"><a class="header-anchor" href="#_6-4-12-csma-cd-协议的重要特性" aria-hidden="true">#</a> 6.4.12 CSMA/CD 协议的重要特性</h4><ul><li>使用 CSMA/CD 协议的以太网不能进行全双工通信而<strong>只能进行双向交替通信（半双工通信）。</strong></li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。</li><li>这种<strong>发送的不确定性</strong>使整个以太网的平均通信量远小于以太网的最高数据率。</li></ul><blockquote><p>CSMA/CD协议曾经用于各种总线结构以太网和双绞线以太网的早起版本中。</p><p><strong>现在的以太网基于交换机和全双工连接，不会有碰撞，因此没有必要使用CSMA/CS协议</strong></p></blockquote><h3 id="_6-5-随机接入-csma-ca协议" tabindex="-1"><a class="header-anchor" href="#_6-5-随机接入-csma-ca协议" aria-hidden="true">#</a> 6.5 随机接入（CSMA/CA协议）</h3><p><strong>无线局域网使用的协议：CSMA/CA</strong></p><h4 id="_6-5-1-为什么无线局域网要使用csma-ca协议" tabindex="-1"><a class="header-anchor" href="#_6-5-1-为什么无线局域网要使用csma-ca协议" aria-hidden="true">#</a> 6.5.1 为什么无线局域网要使用CSMA/CA协议</h4><figure><img src="https://i0.hdslb.com/bfs/album/b1d771c50b1b996f5f0ebb6011d417bfd49415e3.png" alt="image-20201014192811760" tabindex="0" loading="lazy"><figcaption>image-20201014192811760</figcaption></figure><h4 id="_6-5-2-帧间间隔ifs-interframe-space" tabindex="-1"><a class="header-anchor" href="#_6-5-2-帧间间隔ifs-interframe-space" aria-hidden="true">#</a> 6.5.2 帧间间隔IFS（InterFrame Space）</h4><figure><img src="https://i0.hdslb.com/bfs/album/e7e399c1a0a02938f0e634c58ba570e8a8125b04.png" alt="image-20201014200149717" tabindex="0" loading="lazy"><figcaption>image-20201014200149717</figcaption></figure><h4 id="_6-5-3-csma-ca协议的工作原理" tabindex="-1"><a class="header-anchor" href="#_6-5-3-csma-ca协议的工作原理" aria-hidden="true">#</a> 6.5.3 CSMA/CA协议的工作原理</h4><figure><img src="https://i0.hdslb.com/bfs/album/c51819994f4a569b8651707c113f82680efde0ac.png" alt="image-20201014200833233" tabindex="0" loading="lazy"><figcaption>image-20201014200833233</figcaption></figure><blockquote><p><strong>源站为什么在检测到信道空闲后还要再等待一段时间DIFS？</strong></p><ul><li>考虑到可能有其他的站有高优先级的帧要发送。若有，就要让高优先级帧先发送</li></ul><p><strong>目的站为什么正确接收数据帧后还要等待一段时间SIFS才能发送ACK帧？</strong></p><ul><li>SIFS是最短的帧间间隔，用来分隔开属于一次对话的各帧，在这段时间内，一个站点应当能够从发送方式切换到接收方式</li></ul></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/5c83918730c87bd1839230f103f6bc0b28bd42bc.png" alt="image-20201014201511741" tabindex="0" loading="lazy"><figcaption>image-20201014201511741</figcaption></figure><blockquote><p><strong>信道由忙转为空闲且经过DIFS时间后，还要退避一段随机时间才能使用信道？</strong></p><p>防止多个站点同时发送数据而产生碰撞</p></blockquote><p><strong>使用退避算法的时机</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/25873aa72701cb3f74c01f195bd7a1cfef6664fa.png" alt="image-20201014201927680" tabindex="0" loading="lazy"><figcaption>image-20201014201927680</figcaption></figure><h4 id="_6-5-4-csma-ca协议的退避算法" tabindex="-1"><a class="header-anchor" href="#_6-5-4-csma-ca协议的退避算法" aria-hidden="true">#</a> 6.5.4 CSMA/CA协议的退避算法</h4><figure><img src="https://i0.hdslb.com/bfs/album/681ef75c2b1ca5b4f00ef0a3a2c060f9b26fbdcc.png" alt="image-20201014202213766" tabindex="0" loading="lazy"><figcaption>image-20201014202213766</figcaption></figure><p><strong>退避算法的示例</strong></p><figure><img src="https://article.biliimg.com/bfs/article/bd23a7efc8f566a696008d5b505bdbf6ee60d457.png" alt="image-20201014202819851" tabindex="0" loading="lazy"><figcaption>image-20201014202819851</figcaption></figure><h4 id="_6-5-5-csma-ca协议的信道预约和虚拟载波监听" tabindex="-1"><a class="header-anchor" href="#_6-5-5-csma-ca协议的信道预约和虚拟载波监听" aria-hidden="true">#</a> 6.5.5 CSMA/CA协议的信道预约和虚拟载波监听</h4><figure><img src="https://i0.hdslb.com/bfs/album/074311a3ca73ef2e9e0a1c6a3e6ea5206988ea6c.png" alt="image-20201014203119710" tabindex="0" loading="lazy"><figcaption>image-20201014203119710</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/78c1280617dacd92f36639660b96e59e2e97ac85.png" alt="image-20201014203506878" tabindex="0" loading="lazy"><figcaption>image-20201014203506878</figcaption></figure><p><strong>虚拟载波监听机制能减少隐蔽站带来的碰撞问题的示例</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/c2d11ba30b0872eb2a30e22642a224dbc587a85c.png" alt="image-20201014203859033" tabindex="0" loading="lazy"><figcaption>image-20201014203859033</figcaption></figure><h2 id="_7-mac地址、ip地址以及arp协议" tabindex="-1"><a class="header-anchor" href="#_7-mac地址、ip地址以及arp协议" aria-hidden="true">#</a> 7.MAC地址、IP地址以及ARP协议</h2><figure><img src="https://i0.hdslb.com/bfs/album/4a6530c54fffd886dc3433bd4eaab3bc4947dcf5.png" alt="image-20201014222831663" tabindex="0" loading="lazy"><figcaption>image-20201014222831663</figcaption></figure><h3 id="_7-1-mac地址" tabindex="-1"><a class="header-anchor" href="#_7-1-mac地址" aria-hidden="true">#</a> 7.1 MAC地址</h3><blockquote><ul><li>使用点对点信道的数据链路层不需要使用地址</li><li>使用广播信道的数据链路层必须使用地址来区分各主机</li></ul></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/a745c4f4aa4b357d805e2574517a226966a9701f.png" alt="image-20201014223659993" tabindex="0" loading="lazy"><figcaption>image-20201014223659993</figcaption></figure><h4 id="_7-1-1-广播信道的数据链路层必须使用地址-mac" tabindex="-1"><a class="header-anchor" href="#_7-1-1-广播信道的数据链路层必须使用地址-mac" aria-hidden="true">#</a> 7.1.1 广播信道的数据链路层必须使用地址（MAC）</h4><figure><img src="https://i0.hdslb.com/bfs/album/14e01d2bebd0beb889785fc5feef5ab9d7a570e3.png" alt="image-20201014224732019" tabindex="0" loading="lazy"><figcaption>image-20201014224732019</figcaption></figure><blockquote><p><strong>MAC地址又称为硬件地址或物理地址</strong>。请注意：不要被 “物理” 二字误导认为物理地址属于物理层范畴，物理地址属于数据链路层范畴</p></blockquote><h4 id="_7-1-2-ieee-802局域网的mac地址格式" tabindex="-1"><a class="header-anchor" href="#_7-1-2-ieee-802局域网的mac地址格式" aria-hidden="true">#</a> 7.1.2 IEEE 802局域网的MAC地址格式</h4><figure><img src="https://i0.hdslb.com/bfs/album/9b5081dd18c8ac659f82089c87c83386b3d64745.png" alt="image-20201014225358570" tabindex="0" loading="lazy"><figcaption>image-20201014225358570</figcaption></figure><blockquote><p><strong>组织唯一标识符OUI</strong></p><ul><li>生产网络设备的厂商，需要向IEEE的注册管理机构申请一个或多个OUI</li></ul><p><strong>网络接口标识符</strong></p><ul><li>由获得OUI的厂商自行随意分配</li></ul><p><strong>EUI-48</strong></p><ul><li>48是这个MAC地址的位数</li></ul></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/fea8ee4c67cc6b43a796f0bb38c1c20d955f4706.png" alt="image-20201014230248959" tabindex="0" loading="lazy"><figcaption>image-20201014230248959</figcaption></figure><blockquote><p>对于使用EUI-48空间的应用程序，IEEE的目标寿命为100年（直到2080年），但是鼓励采用EUI-64作为替代</p></blockquote><p><strong>关于无效的 MAC 帧</strong></p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li></ul><blockquote><p><strong>对于检查出的无效</strong> <strong>MAC</strong> <strong>帧就简单地丢弃。以太网不负责重传丢弃的帧。</strong></p></blockquote><h4 id="_7-1-3-ieee-802局域网的mac地址发送顺序" tabindex="-1"><a class="header-anchor" href="#_7-1-3-ieee-802局域网的mac地址发送顺序" aria-hidden="true">#</a> 7.1.3 IEEE 802局域网的MAC地址发送顺序</h4><figure><img src="https://i0.hdslb.com/bfs/album/25ce1dd6526be27fa41212788bcb1ed889110eff.png" alt="image-20201014230625182" tabindex="0" loading="lazy"><figcaption>image-20201014230625182</figcaption></figure><h4 id="_7-1-4-单播mac地址举例" tabindex="-1"><a class="header-anchor" href="#_7-1-4-单播mac地址举例" aria-hidden="true">#</a> 7.1.4 单播MAC地址举例</h4><figure><img src="https://i0.hdslb.com/bfs/album/f48cfd95d8baec217128a4dd1ca1e40d1c4ddea8.png" alt="image-20201014230822305" tabindex="0" loading="lazy"><figcaption>image-20201014230822305</figcaption></figure><blockquote><p>主机B给主机C发送<strong>单播帧</strong>，主机B首先要构建该<strong>单播帧</strong>，<strong>在帧首部中的目的地址字段填入主机C的MAC地址</strong>，源地址字段填入自己的MAC地址，再加上帧首部的其他字段、数据载荷以及帧尾部，就构成了该<strong>单播帧</strong></p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/5cb02cbbeb769e7df33a286a085e03e18a382bb9.png" alt="image-20201014231244655" tabindex="0" loading="lazy"><figcaption>image-20201014231244655</figcaption></figure><blockquote><p>主机B将该<strong>单播帧</strong>发送出去，主机A和C都会收到该<strong>单播帧</strong></p><p>主机A的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址不匹配，丢弃该帧</p><p>主机C的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址匹配，接受该帧</p><p>并将该帧交给其上层处理</p></blockquote><h4 id="_7-1-5-广播mac地址举例" tabindex="-1"><a class="header-anchor" href="#_7-1-5-广播mac地址举例" aria-hidden="true">#</a> 7.1.5 广播MAC地址举例</h4><figure><img src="https://i0.hdslb.com/bfs/album/dfc624b19a04050f8c6fcf84c2aa6f8de870f39c.png" alt="image-20201014231754669" tabindex="0" loading="lazy"><figcaption>image-20201014231754669</figcaption></figure><blockquote><p>假设主机B要发送一个<strong>广播帧</strong>，主机B首先要构建该<strong>广播帧</strong>，<strong>在帧首部中的目的地址字段填入广播地址</strong>，也就是十六进制的全F，源地址字段填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>广播帧</strong></p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/a82126c5d61e6dc1cf122a0aa77ab327623695f1.png" alt="image-20201014232132424" tabindex="0" loading="lazy"><figcaption>image-20201014232132424</figcaption></figure><blockquote><p>主机B讲该<strong>广播帧</strong>发送出去，主机A和C都会收到该<strong>广播帧</strong>，<strong>发现该帧首部中的目的地址字段的内容是广播地址</strong>，就知道该帧是<strong>广播帧</strong>，主机A和主机C都接受该帧，并将该帧交给上层处理</p></blockquote><h4 id="_7-1-6-多播mac地址举例" tabindex="-1"><a class="header-anchor" href="#_7-1-6-多播mac地址举例" aria-hidden="true">#</a> 7.1.6 多播MAC地址举例</h4><figure><img src="https://i0.hdslb.com/bfs/album/588d8607e4b8b8b5f35edd6939b23080532bdac6.png" alt="image-20201014232714791" tabindex="0" loading="lazy"><figcaption>image-20201014232714791</figcaption></figure><blockquote><p>假设主机A要发送<strong>多播帧</strong>给该<strong>多播地址</strong>。将该<strong>多播地址</strong>的左起第一个字节写成8个比特，第一个字节的最低比特位是1，这就表明该地址是<strong>多播地址</strong>。</p><p>快速判断地址是不是<strong>多播地址</strong>，就是上图所示箭头所指的第十六进制数不能整除2（1,3,5,7,9,B,D,F），则该地址是<strong>多播地址</strong></p><p>假设主机B，C和D支持多播，各用户给自己的主机配置多播组列表<strong>如下所示</strong></p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/f219cf9d757a9bed4535765a340ac2c7cc39276a.png" alt="image-20201015001243584" tabindex="0" loading="lazy"><figcaption>image-20201015001243584</figcaption></figure><blockquote><p>主机B属于两个多播组，主机C也属于两个多播组，而主机D不属于任何多播组</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/56eff6c529ca92b83e8b8dafc4b196e5e0580986.png" alt="image-20201015001535528" tabindex="0" loading="lazy"><figcaption>image-20201015001535528</figcaption></figure><blockquote><p>主机A首先要构建该<strong>多播帧</strong>，<strong>在帧首部中的目的地址字段填入该多播地址</strong>，源地址点填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>多播帧</strong></p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/0921cdeb48a7d72b8bd074aecdbb15b2d7633be2.png" alt="image-20201015002054876" tabindex="0" loading="lazy"><figcaption>image-20201015002054876</figcaption></figure><blockquote><p>主机A将该<strong>多播帧</strong>发送出去，主机B、C、D都会收到该<strong>多播帧</strong></p><p><strong>主机B和C发现该多播帧的目的MAC地址在自己的多播组列表中</strong>，主机B和C都会接受该帧</p><p>主机D发现该<strong>多播帧</strong>的目的MAC地址不在自己得多播组列表中，则丢弃该<strong>多播帧</strong></p></blockquote><blockquote><p>给主机配置多播组列表进行私有应用时，不得使用公有的标准多播地址</p></blockquote><h3 id="_7-2-ip地址" tabindex="-1"><a class="header-anchor" href="#_7-2-ip地址" aria-hidden="true">#</a> 7.2 IP地址</h3><p>IP地址属于网络层的范畴，不属于数据链路层的范畴</p><p>下面内容讲的是IP地址的使用，详细的IP地址内容在网络层中介绍</p><h4 id="_7-2-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_7-2-1-基本概念" aria-hidden="true">#</a> 7.2.1 基本概念</h4><figure><img src="https://i0.hdslb.com/bfs/album/df95f7ef9488ae70d363474793d060d343512b53.png" alt="image-20201015104441580" tabindex="0" loading="lazy"><figcaption>image-20201015104441580</figcaption></figure><h4 id="_7-2-2-从网络体系结构看ip地址与mac地址" tabindex="-1"><a class="header-anchor" href="#_7-2-2-从网络体系结构看ip地址与mac地址" aria-hidden="true">#</a> 7.2.2 从网络体系结构看IP地址与MAC地址</h4><figure><img src="https://i0.hdslb.com/bfs/album/f89c90aedc5adf512b8238f2bb1b62a801dd8a93.png" alt="image-20201015104913755" tabindex="0" loading="lazy"><figcaption>image-20201015104913755</figcaption></figure><h4 id="_7-2-3-数据包转发过程中ip地址与mac地址的变化情况" tabindex="-1"><a class="header-anchor" href="#_7-2-3-数据包转发过程中ip地址与mac地址的变化情况" aria-hidden="true">#</a> 7.2.3 数据包转发过程中IP地址与MAC地址的变化情况</h4><p>图上各主机和路由器各接口的IP地址和MAC地址用简单的标识符来表示</p><figure><img src="https://i0.hdslb.com/bfs/album/c8475e19fbf56a85a40624721526d709cf75292a.png" alt="image-20201015105455043" tabindex="0" loading="lazy"><figcaption>image-20201015105455043</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/766b031a44d9b9bc079c67155d8c0810a15b4ca8.png" alt="image-20210103212224961" tabindex="0" loading="lazy"><figcaption>image-20210103212224961</figcaption></figure><blockquote><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP协议</p></blockquote><h3 id="_7-3-arp协议" tabindex="-1"><a class="header-anchor" href="#_7-3-arp协议" aria-hidden="true">#</a> 7.3 ARP协议</h3><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP（地址解析协议）</p><h4 id="_7-3-1-流程" tabindex="-1"><a class="header-anchor" href="#_7-3-1-流程" aria-hidden="true">#</a> 7.3.1 流程</h4><figure><img src="https://i0.hdslb.com/bfs/album/44c6127e2927ff0e70c1a9426274b5ab8f24bf11.png" alt="image-20201015113826197" tabindex="0" loading="lazy"><figcaption>image-20201015113826197</figcaption></figure><p>ARP高速缓存表</p><figure><img src="https://i0.hdslb.com/bfs/album/e9f7106841a2958491e1a7791b78cdfd89c74b06.png" alt="image-20201015114052206" tabindex="0" loading="lazy"><figcaption>image-20201015114052206</figcaption></figure><blockquote><p>当主机B要给主机C发送数据包时，会首先在自己的ARP高速缓存表中查找主机C的IP地址所对应的MAC地址，但未找到，因此，主机B需要发送ARP请求报文，来获取主机C的MAC地址</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/00052c5f07e78d552f4067533e41d779b1d78f30.png" alt="image-20201015114444263" tabindex="0" loading="lazy"><figcaption>image-20201015114444263</figcaption></figure><blockquote><p>ARP请求报文有具体的格式，上图的只是简单描述</p><p>ARP请求报文被封装在MAC帧中发送，目的地址为广播地址</p><p>主机B发送封装有ARP请求报文的广播帧，总线上的其他主机都能收到该广播帧</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/c3145a212cd8733e6846fd8c6563571bb9f9f940.png" alt="image-20201015114811501" tabindex="0" loading="lazy"><figcaption>image-20201015114811501</figcaption></figure><blockquote><p>收到ARP请求报文的主机A和主机C会把ARP请求报文交给上层的ARP进程</p><p>主机A发现所询问的IP地址不是自己的IP地址，因此不用理会</p><p>主机C的发现所询问的IP地址是自己的IP地址，需要进行相应</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/4c92c647a356fe5d0bb506a627118f44235c2c31.png" alt="image-20201015115212170" tabindex="0" loading="lazy"><figcaption>image-20201015115212170</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/29cc33c2eaef3b0c7197c30bf70528ef858ea4c3.png" alt="image-20201015115236673" tabindex="0" loading="lazy"><figcaption>image-20201015115236673</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/fef93a06077f3c9aabf1c5594936e3817832cc29.png" alt="image-20201015115252972" tabindex="0" loading="lazy"><figcaption>image-20201015115252972</figcaption></figure><p>动态与静态的区别</p><figure><img src="https://i0.hdslb.com/bfs/album/6c061a5f1b0021b7a6b01d5373ef9b421996531f.png" alt="image-20201015115831543" tabindex="0" loading="lazy"><figcaption>image-20201015115831543</figcaption></figure><p><strong>ARP协议只能在一段链路或一个网络上使用，而不能跨网络使用</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/ec5f1d6e9936457f1c26cfe5a3125cf968027a54.png" alt="image-20201015120108028" tabindex="0" loading="lazy"><figcaption>image-20201015120108028</figcaption></figure><blockquote><p>ARP协议的使用是逐段链路进行的</p></blockquote><h4 id="_7-3-2-总结" tabindex="-1"><a class="header-anchor" href="#_7-3-2-总结" aria-hidden="true">#</a> 7.3.2 总结</h4><figure><img src="https://i0.hdslb.com/bfs/album/21e07b21f9b5baac5f894ac0731ca38bfb901fd5.png" alt="image-20201015120707150" tabindex="0" loading="lazy"><figcaption>image-20201015120707150</figcaption></figure><blockquote><p>ARP表中的IP地址与MAC地址的对应关系记录，是<strong>会定期自动删除的</strong>，<strong>因为IP地址与MAC地址的对应关系不是永久性的</strong></p></blockquote><hr><h2 id="_8-集线器与交换机的区别" tabindex="-1"><a class="header-anchor" href="#_8-集线器与交换机的区别" aria-hidden="true">#</a> 8.集线器与交换机的区别</h2><h3 id="_8-1-集线器-在物理层扩展以太网" tabindex="-1"><a class="header-anchor" href="#_8-1-集线器-在物理层扩展以太网" aria-hidden="true">#</a> 8.1 集线器-在物理层扩展以太网</h3><h4 id="_8-1-1-概念" tabindex="-1"><a class="header-anchor" href="#_8-1-1-概念" aria-hidden="true">#</a> 8.1.1 概念</h4><figure><img src="https://i0.hdslb.com/bfs/album/d1584e4b8ac79f61d08db10c6d784ee420c352d5.png" alt="image-20201015144628691" tabindex="0" loading="lazy"><figcaption>image-20201015144628691</figcaption></figure><blockquote><ul><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。</li><li>采用双绞线的以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做<strong>集线器</strong> (hub)。</li><li><strong>集线器</strong>是也可以看做多口中继器，每个端口都可以成为一个中继器，中继器是对减弱的信号进行放大和发送的设备</li><li><strong>集线器</strong>的以太网在逻辑上仍是个总线网，需要使用CSMA/CD协议来协调各主机争用总线，只能工作在半双工模式，收发帧不能同时进行</li></ul></blockquote><h4 id="_8-1-2-集线器hub在物理层扩展以太网" tabindex="-1"><a class="header-anchor" href="#_8-1-2-集线器hub在物理层扩展以太网" aria-hidden="true">#</a> 8.1.2 集线器HUB在物理层扩展以太网</h4><p><strong>使用集线器扩展</strong>：将多个以太网段连成更大的、多级星形结构的以太网</p><figure><img src="https://i0.hdslb.com/bfs/album/f17f714b4cb73fbd8f03a30dba00bec65294d93e.png" alt="image-20201015145732275" tabindex="0" loading="lazy"><figcaption>image-20201015145732275</figcaption></figure><blockquote><ul><li><strong>优点</strong><ol><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了以太网覆盖的地理范围。</li></ol></li><li><strong>缺点</strong><ol><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</li></ol></li></ul></blockquote><p><strong>碰撞域</strong></p><ul><li><strong>碰撞域（collision domain）<strong>又称为</strong>冲突域</strong>，是指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。</li><li>碰撞域越大，发生碰撞的概率越高。</li></ul><h3 id="_8-2-以太网交换机-在数据链路层扩展以太网" tabindex="-1"><a class="header-anchor" href="#_8-2-以太网交换机-在数据链路层扩展以太网" aria-hidden="true">#</a> 8.2 以太网交换机-在数据链路层扩展以太网</h3><h4 id="_8-2-1-概念" tabindex="-1"><a class="header-anchor" href="#_8-2-1-概念" aria-hidden="true">#</a> 8.2.1 概念</h4><ul><li>扩展以太网更常用的方法是在数据链路层进行。</li><li>早期使用<strong>网桥</strong>，现在使用<strong>以太网交换机</strong>。</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/57a2238b81c5abacc220bb1c854c8aeb4804ccdb.png" alt="image-20201015150620067" tabindex="0" loading="lazy"><figcaption>image-20201015150620067</figcaption></figure><blockquote><p><strong>网桥</strong></p><ul><li>网桥工作在数据链路层。</li><li>它根据 MAC 帧的目的地址对收到的帧进行转发和过滤。</li><li>当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC 地址，然后再确定将该帧转发到哪一个接口，或把它丢弃。</li></ul><p><strong>交换机</strong></p><ul><li>1990 年问世的交换式集线器 (switching hub) 可明显地提高以太网的性能。</li><li>交换式集线器常称为<strong>以太网交换机</strong> (switch) 或<strong>第二层交换机</strong> (L2 switch)，强调这种交换机工作在数据链路层。</li><li>以太网交换机实质上就是一个<strong>多接口的网桥</strong></li></ul></blockquote><h4 id="_8-2-2-集线器hub与交换机switch区别" tabindex="-1"><a class="header-anchor" href="#_8-2-2-集线器hub与交换机switch区别" aria-hidden="true">#</a> 8.2.2 集线器HUB与交换机SWITCH区别</h4><figure><img src="https://i0.hdslb.com/bfs/album/874fba2a13bd5591ca4c2e8e467ab95583bf47ba.png" alt="image-20201015152232158" tabindex="0" loading="lazy"><figcaption>image-20201015152232158</figcaption></figure><blockquote><p>使用<strong>集线器</strong>互连而成的共享总线式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧会通过共享总线传输到<strong>总线上的其他各个主机</strong></p><p>使用交换机互连而成的交换式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧进入交换机后，交换机会将该单播帧转发给目的主机，<strong>而不是网络中的其他各个主机</strong></p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/f0898b9cce1d1e8cf2ccf37531009623dc7ca482.png" alt="image-20201015152858146" tabindex="0" loading="lazy"><figcaption>image-20201015152858146</figcaption></figure><blockquote><p><strong>以太网交换机的交换方式</strong></p><ul><li>存储转发方式 <ul><li>把整个数据帧<strong>先缓存</strong>后再进行处理。</li></ul></li><li>直通 (cut-through) 方式 <ul><li>接收数据帧的同时就<strong>立即按数据帧的目的 MAC 地址决定该帧的转发接口</strong>，因而提高了帧的转发速度。</li><li><strong>缺点</strong>是它不检查差错就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站。</li></ul></li></ul><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>对比集线器和交换机</strong></p><figure><img src="https://article.biliimg.com/bfs/article/2083c0594b3f0472d99893cfc0b310912ec5650f.png" alt="image-20201015153907268" tabindex="0" loading="lazy"><figcaption>image-20201015153907268</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/0a9b53c24dd4dbcf7b12cfaee873618fff1a5456.png" alt="image-20201015154523036" tabindex="0" loading="lazy"><figcaption>image-20201015154523036</figcaption></figure><blockquote><p>多台主机同时给另一台主机发送单播帧</p><p>集线器以太网：会产生碰撞，遭遇碰撞的帧会传播到总线上的各主机</p><p>交换机以太网：会将它们缓存起来，然后逐个转发给目的主机，不会产生碰撞</p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>集线器扩展以太网和交换机扩展以太网区别</strong></p><p><strong>单播</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/ee67bac4e2757e1887b7dd5b89261ba0c70c3f1c.png" alt="image-20201015155408692" tabindex="0" loading="lazy"><figcaption>image-20201015155408692</figcaption></figure><p><strong>广播</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/5bef6b6b192bc4b8ebb2daf6875282d413530de1.png" alt="image-20201015155440402" tabindex="0" loading="lazy"><figcaption>image-20201015155440402</figcaption></figure><p><strong>多个单播</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/f6cac6ae01c8f94c4acc204969a905a6f1251b5f.png" alt="image-20201015155526386" tabindex="0" loading="lazy"><figcaption>image-20201015155526386</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/e43f80c5063476b20251ac6bb72d88598baf26de.png" alt="image-20201015155706698" tabindex="0" loading="lazy"><figcaption>image-20201015155706698</figcaption></figure><p>广播域（broadcast domain）：指这样一部分网络，其中任何一台设备发出的广播通信都能被该部分网络中的所有其他设备所接收。</p><h4 id="_8-2-3-总结" tabindex="-1"><a class="header-anchor" href="#_8-2-3-总结" aria-hidden="true">#</a> 8.2.3 总结</h4><figure><img src="https://i0.hdslb.com/bfs/album/84d1b6c77cb6b196ef80237bdffa5a064b70851d.png" alt="image-20201015160146482" tabindex="0" loading="lazy"><figcaption>image-20201015160146482</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/da33ca1ab444c221bbd3356cac06e4d98a5941bc.png" alt="image-20201015160526999" tabindex="0" loading="lazy"><figcaption>image-20201015160526999</figcaption></figure><blockquote><p>工作在数据链路层的以太网交换机，其性能远远超过工作在物理层的集线器，而且价格并不贵，这就使得集线器逐渐被市场淘汰</p></blockquote><hr><h2 id="_9-以太网交换机自学习和转发帧的流程" tabindex="-1"><a class="header-anchor" href="#_9-以太网交换机自学习和转发帧的流程" aria-hidden="true">#</a> 9.以太网交换机自学习和转发帧的流程</h2><h3 id="_9-1-概念" tabindex="-1"><a class="header-anchor" href="#_9-1-概念" aria-hidden="true">#</a> 9.1 概念</h3><figure><img src="https://i0.hdslb.com/bfs/album/65f622051bcc832d61f5dcab327419e4111d8d57.png" alt="image-20201015161015165" tabindex="0" loading="lazy"><figcaption>image-20201015161015165</figcaption></figure><h3 id="_9-2-自学习和转发帧的例子" tabindex="-1"><a class="header-anchor" href="#_9-2-自学习和转发帧的例子" aria-hidden="true">#</a> 9.2 自学习和转发帧的例子</h3><p>以下例子假设各主机知道网络中其他各主机的MAC地址（无需进行ARP）</p><p><strong>A -&gt; B</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/226a8e6d0dd3bc6828492e33200a5c37e1c46a68.png" alt="image-20201015161458528" tabindex="0" loading="lazy"><figcaption>image-20201015161458528</figcaption></figure><blockquote><ol><li>A 先向 B 发送一帧。该帧从接口 1 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中左边）交换表中</li><li>交换机向除接口 1 以外的所有的接口广播这个帧</li><li>接口 4到接口 2，先查找（图中右边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中右边）交换表中</li><li>除B主机之外与该帧的目的地址不相符，将丢弃该帧</li><li>主机B发现是给自己的帧，接受该帧</li></ol></blockquote><p><strong>B -&gt; A</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/90d823f4548e94178e74b932c14187095f80e5c0.png" alt="image-20201015162310922" tabindex="0" loading="lazy"><figcaption>image-20201015162310922</figcaption></figure><blockquote><ol><li>B 向 A 发送一帧。该帧从接口 3 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>主机 A 发现目的地址是它，就接受该帧</li><li>交换机把这个帧的源地址 B 和接口 3 写入（图中左边）交换表中</li></ol></blockquote><p><strong>E -&gt; A</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/15053219ab8ffdb9c6dc50307b92255e4b3bf64a.png" alt="image-20201015162622462" tabindex="0" loading="lazy"><figcaption>image-20201015162622462</figcaption></figure><blockquote><ol><li>E 向 A发送一帧</li><li>交换机收到帧后，先查找（图中右边）交换表。发现（图中右边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口2转发出去。于是就把这个帧传送到接口 2 转发给 接口 4。</li><li>交换机把这个帧的源地址 E 和接口 3 写入（图中右边）交换表中</li><li>接口 4 到 左边的交换机，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>交换机把这个帧的源地址 E 和接口 4 写入（图中左边）交换表中</li><li>主机 A 发现目的地址是它，就接受该帧</li></ol></blockquote><p><strong>G -&gt; A</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/630afa3bb2626280ec094a2a76aead0519236c46.png" alt="image-20201015163157140" tabindex="0" loading="lazy"><figcaption>image-20201015163157140</figcaption></figure><blockquote><p>主机 A、主机 G、交换机 1的接口 1就共享同一条总线（相当于总线式网络，可以想象成用集线器连接了）</p><ol><li>主机 G 发送给 主机 A 一个帧</li><li>主机 A 和 交换机接口 1都能接收到</li><li>主机 A 的网卡收到后，根据帧的目的MAC地址A，就知道是发送给自己的帧，就接受该帧</li><li>交换机 1收到该帧后，首先进行登记工作</li><li>然后交换机 1对该帧进行转发，该帧的MAC地址是A，在（图中左边）交换表查找MAC 地址有 A</li><li>MAC 地址为 A的接口号是1，但是该帧正是从接口 1 进入交换机的，交换机不会再从该接口 1 将帧转发出去，因为这是没有必要，于是丢弃该帧</li></ol></blockquote><p>随着网络中各主机都发送了帧后，网络中的各交换机就可以学习到各主机的MAC地址，以及它们与自己各接口的对应关系</p><figure><img src="https://i0.hdslb.com/bfs/album/bdffa944968064b8972e708140abcc5fe2e95c7d.png" alt="image-20201015164210543" tabindex="0" loading="lazy"><figcaption>image-20201015164210543</figcaption></figure><blockquote><p>考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的<strong>有效时间</strong>。<strong>过期的项目就自动被删除</strong>。</p><p><strong>以太网交换机的这种自学习方法使得以太网交换机能够即插即用，不必人工进行配置，因此非常方便。</strong></p></blockquote><h3 id="_9-3-总结" tabindex="-1"><a class="header-anchor" href="#_9-3-总结" aria-hidden="true">#</a> 9.3 总结</h3><p><strong>交换机自学习和转发帧的步骤归纳</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/c2672b54d7180ff080007677817091f5abdb4317.png" alt="image-20201015170656500" tabindex="0" loading="lazy"><figcaption>image-20201015170656500</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/beaaac1babd661fa091e858d954aef4cea0790fe.png" alt="image-20201015170739679" tabindex="0" loading="lazy"><figcaption>image-20201015170739679</figcaption></figure><h2 id="_10-以太网交换机的生成树协议stp" tabindex="-1"><a class="header-anchor" href="#_10-以太网交换机的生成树协议stp" aria-hidden="true">#</a> 10.以太网交换机的生成树协议STP</h2><h3 id="_10-1-如何提高以太网的可靠性" tabindex="-1"><a class="header-anchor" href="#_10-1-如何提高以太网的可靠性" aria-hidden="true">#</a> 10.1 如何提高以太网的可靠性</h3><figure><img src="https://i0.hdslb.com/bfs/album/33f90356a1e462738126f136f03869eedec9a81b.png" alt="image-20201015171453001" tabindex="0" loading="lazy"><figcaption>image-20201015171453001</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/85de6f86aa7d8ce19c70dc084d0b56d853cfc266.png" alt="image-20201015171515481" tabindex="0" loading="lazy"><figcaption>image-20201015171515481</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/b8983f9f95afed66cb598d9c0b0a4d7c2f0d5b00.png" alt="image-20201015171900775" tabindex="0" loading="lazy"><figcaption>image-20201015171900775</figcaption></figure><h3 id="_10-2-生成树协议stp" tabindex="-1"><a class="header-anchor" href="#_10-2-生成树协议stp" aria-hidden="true">#</a> 10.2 生成树协议STP</h3><figure><img src="https://i0.hdslb.com/bfs/album/29b66d858a3c8ceca1ff251968f36fa719d85ba0.png" alt="image-20201015172204419" tabindex="0" loading="lazy"><figcaption>image-20201015172204419</figcaption></figure><blockquote><ul><li>IEEE 802.1D 标准制定了一个<strong>生成树协议 STP</strong> (Spanning Tree Protocol)。</li><li>其<strong>要点</strong>是：<strong>不改变</strong>网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是<strong>无环路的树状结构</strong>，从而消除了兜圈子现象。</li></ul></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/81a4b0b7ef8036d57ab43225b37efe2d4ada2491.png" alt="image-20201015202257756" tabindex="0" loading="lazy"><figcaption>image-20201015202257756</figcaption></figure><hr><h2 id="_11-虚拟局域网vlan" tabindex="-1"><a class="header-anchor" href="#_11-虚拟局域网vlan" aria-hidden="true">#</a> 11.虚拟局域网VLAN</h2><h3 id="_11-1-为什么要虚拟局域网vlan" tabindex="-1"><a class="header-anchor" href="#_11-1-为什么要虚拟局域网vlan" aria-hidden="true">#</a> 11.1 为什么要虚拟局域网VLAN</h3><p><strong>广播风暴</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/8410d2be4964ac20df47ec86e5c5641bf98a68d3.png" alt="image-20201015202859124" tabindex="0" loading="lazy"><figcaption>image-20201015202859124</figcaption></figure><p><strong>分割广播域的方法</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/0c6572eb7d7b00ef4519498be2cb532fae820f3b.png" alt="image-20201015203113654" tabindex="0" loading="lazy"><figcaption>image-20201015203113654</figcaption></figure><blockquote><p>为了分割广播域，所以虚拟局域网VLAN技术应运而生</p></blockquote><h3 id="_11-2-概念" tabindex="-1"><a class="header-anchor" href="#_11-2-概念" aria-hidden="true">#</a> 11.2 概念</h3><figure><img src="https://i0.hdslb.com/bfs/album/147446245ddafa32e0418146f4998c77fbb96206.png" alt="image-20201015203559548" tabindex="0" loading="lazy"><figcaption>image-20201015203559548</figcaption></figure><blockquote><ul><li>利用以太网交换机可以很方便地实现虚拟局域网 VLAN (Virtual LAN)。</li><li>IEEE 802.1Q 对虚拟局域网 VLAN 的<strong>定义</strong>： <strong>虚拟局域网 VLAN</strong> 是由一些局域网网段构成的<strong>与物理位置无关的逻辑组</strong>，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</li><li>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</li><li><strong>虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。</strong></li><li>由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。</li></ul></blockquote><h3 id="_11-3-虚拟局域网vlan的实现机制" tabindex="-1"><a class="header-anchor" href="#_11-3-虚拟局域网vlan的实现机制" aria-hidden="true">#</a> 11.3 虚拟局域网VLAN的实现机制</h3><p>虚拟局域网VLAN技术是在交换机上实现的，需要交换机能够实现以下功能</p><ul><li>能够处理带有VLAN标记的帧——IEEE 802.1 Q帧</li><li>交换机的各端口可以支持不同的端口类型，不同端口类型的端口对帧的处理方式有所不同</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/fa610982a3c922594ab71a8e93a5e71d1d0600f0.png" alt="image-20201015204639599" tabindex="0" loading="lazy"><figcaption>image-20201015204639599</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/df8d1d98fe4c02480d0398deaaa25c9fab2733b5.png" alt="image-20201015204749141" tabindex="0" loading="lazy"><figcaption>image-20201015204749141</figcaption></figure><p><strong>Access端口</strong></p><p>交换机与用户计算机之间的互连</p><figure><img src="https://i0.hdslb.com/bfs/album/e835a10cf4f359b6686d932e87f849672916a8b7.png" alt="image-20201015205311757" tabindex="0" loading="lazy"><figcaption>image-20201015205311757</figcaption></figure><blockquote><p>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</p></blockquote><p><strong>Truck端口</strong></p><p>交换机之间或交换机与路由器之间的互连</p><figure><img src="https://i0.hdslb.com/bfs/album/e128cb3ff8be1b25d5f787762a430570e3b21f8a.png" alt="image-20201015205947636" tabindex="0" loading="lazy"><figcaption>image-20201015205947636</figcaption></figure><p><strong>小例题</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/140150c1c5d9677cf961e384a5474ed18e26d4db.png" alt="image-20201015210417695" tabindex="0" loading="lazy"><figcaption>image-20201015210417695</figcaption></figure><p><strong>华为交换机私有的Hybrid端口类型</strong></p><figure><img src="https://i0.hdslb.com/bfs/album/d4997ef8866a3a19c0be62d5495507d1ebed1a20.png" alt="image-20201015211031361" tabindex="0" loading="lazy"><figcaption>image-20201015211031361</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/d958887620c526ccee197350c9da33384d2b6bf3.png" alt="image-20230128194154936" tabindex="0" loading="lazy"><figcaption>image-20230128194154936</figcaption></figure><h3 id="_11-4-总结" tabindex="-1"><a class="header-anchor" href="#_11-4-总结" aria-hidden="true">#</a> 11.4 总结</h3><figure><img src="https://i0.hdslb.com/bfs/album/ede9a736f345655ad37cfbba5401d58063bdf196.png" alt="image-20201015211512622" tabindex="0" loading="lazy"><figcaption>image-20201015211512622</figcaption></figure><blockquote><p><strong>虚拟局域网优点</strong></p><p>虚拟局域网（VLAN）技术具有以下主要优点：</p><ol><li>改善了性能</li><li>简化了管理</li><li>降低了成本</li><li>改善了安全性</li></ol></blockquote>',304);function b(p,m){const e=l("ExternalLinkIcon");return t(),c("div",null,[d,a("p",null,[a("a",s,[n("具体流程请看视频"),o(e)])]),f])}const u=g(r,[["render",b],["__file","03.html.vue"]]);export{u as default};
