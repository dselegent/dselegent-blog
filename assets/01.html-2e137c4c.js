const e=JSON.parse('{"key":"v-671ae07c","path":"/front_end/js_advanced/webpack/01.html","title":"01 【前言 基础使用 核心概念】","lang":"zh-CN","frontmatter":{"description":"01 【前言 基础使用 核心概念】 1.前言 1.1 概述 官网的描述： 本质上，webpack是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个静态资源(bundle)。","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.icu/front_end/js_advanced/webpack/01.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"01 【前言 基础使用 核心概念】"}],["meta",{"property":"og:description","content":"01 【前言 基础使用 核心概念】 1.前言 1.1 概述 官网的描述： 本质上，webpack是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个静态资源(bundle)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01 【前言 基础使用 核心概念】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.前言","slug":"_1-前言","link":"#_1-前言","children":[{"level":3,"title":"1.1 概述","slug":"_1-1-概述","link":"#_1-1-概述","children":[]},{"level":3,"title":"1.2 为什么需要打包工具？","slug":"_1-2-为什么需要打包工具","link":"#_1-2-为什么需要打包工具","children":[]},{"level":3,"title":"1.3 为什么需要 Webpack","slug":"_1-3-为什么需要-webpack","link":"#_1-3-为什么需要-webpack","children":[]},{"level":3,"title":"1.4  如何解决作用域问题","slug":"_1-4-如何解决作用域问题","link":"#_1-4-如何解决作用域问题","children":[]},{"level":3,"title":"1.5 如何解决代码拆分问题","slug":"_1-5-如何解决代码拆分问题","link":"#_1-5-如何解决代码拆分问题","children":[]},{"level":3,"title":"1.6 如何让浏览器支持模块","slug":"_1-6-如何让浏览器支持模块","link":"#_1-6-如何让浏览器支持模块","children":[]},{"level":3,"title":"1.7 Webpack 搞定这一切","slug":"_1-7-webpack-搞定这一切","link":"#_1-7-webpack-搞定这一切","children":[]}]},{"level":2,"title":"2.基础使用","slug":"_2-基础使用","link":"#_2-基础使用","children":[{"level":3,"title":"2.1 功能介绍","slug":"_2-1-功能介绍","link":"#_2-1-功能介绍","children":[]},{"level":3,"title":"2.2 安装","slug":"_2-2-安装","link":"#_2-2-安装","children":[]},{"level":3,"title":"2.3 开始使用","slug":"_2-3-开始使用","link":"#_2-3-开始使用","children":[]},{"level":3,"title":"2.4 自定义 Webpack 配置","slug":"_2-4-自定义-webpack-配置","link":"#_2-4-自定义-webpack-配置","children":[]},{"level":3,"title":"2.5 清理dist","slug":"_2-5-清理dist","link":"#_2-5-清理dist","children":[]},{"level":3,"title":"2.6 source map","slug":"_2-6-source-map","link":"#_2-6-source-map","children":[]},{"level":3,"title":"2.7 使用 watch mode(观察模式)","slug":"_2-7-使用-watch-mode-观察模式","link":"#_2-7-使用-watch-mode-观察模式","children":[]}]},{"level":2,"title":"3.核心概念","slug":"_3-核心概念","link":"#_3-核心概念","children":[{"level":3,"title":"3.1 Entry 入口","slug":"_3-1-entry-入口","link":"#_3-1-entry-入口","children":[]},{"level":3,"title":"3.2 Output 输出","slug":"_3-2-output-输出","link":"#_3-2-output-输出","children":[]},{"level":3,"title":"3.3 Loader 解析器","slug":"_3-3-loader-解析器","link":"#_3-3-loader-解析器","children":[]},{"level":3,"title":"3.4 Plugins 插件","slug":"_3-4-plugins-插件","link":"#_3-4-plugins-插件","children":[]},{"level":3,"title":"3.5 Mode 模式","slug":"_3-5-mode-模式","link":"#_3-5-mode-模式","children":[]}]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":21.05,"words":6315},"filePathRelative":"front_end/js_advanced/webpack/01.md","localizedDate":"2023年1月30日","excerpt":"<h1> 01 【前言 基础使用 核心概念】</h1>\\n<h2> 1.前言</h2>\\n<h3> 1.1 概述</h3>\\n<blockquote>\\n<p><a href=\\"https://link.juejin.cn?target=https%3A%2F%2Fwww.webpackjs.com%2Fconcepts%2F\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官网</a>的描述：</p>\\n<p>本质上，<strong>webpack</strong>是一个现代 JavaScript 应用程序的<strong>静态模块打包器</strong>(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个<strong>依赖关系图</strong>(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个<strong>静态资源(bundle)</strong>。</p>\\n</blockquote>","autoDesc":true}');export{e as data};
