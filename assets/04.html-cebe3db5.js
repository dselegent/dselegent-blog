const e=JSON.parse('{"key":"v-cc8e28be","path":"/front_end/front_end_framework/vue3/04.html","title":"04 【计算属性 侦听器】","lang":"zh-CN","frontmatter":{"description":"04 【计算属性 侦听器】 1.计算属性 有时我们需要依赖于其他状态(普通proxy响应式数据)的状态(computed响应式数据)： 在 Vue 中，这是用组件计算属性处理的，以直接创建计算值，我们可以使用 computed 函数：它接受 getter 函数并为 getter 返回的值返回一个不可变的响应式 ref 对象。 1.1 computed函数 与Vue2.x中computed配置功能一致 可以直接去看3.7.3完整写法 模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。比如说，我们有这样一个包含嵌套数组的对象：","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.icu/front_end/front_end_framework/vue3/04.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"04 【计算属性 侦听器】"}],["meta",{"property":"og:description","content":"04 【计算属性 侦听器】 1.计算属性 有时我们需要依赖于其他状态(普通proxy响应式数据)的状态(computed响应式数据)： 在 Vue 中，这是用组件计算属性处理的，以直接创建计算值，我们可以使用 computed 函数：它接受 getter 函数并为 getter 返回的值返回一个不可变的响应式 ref 对象。 1.1 computed函数 与Vue2.x中computed配置功能一致 可以直接去看3.7.3完整写法 模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。比如说，我们有这样一个包含嵌套数组的对象："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04 【计算属性 侦听器】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.计算属性","slug":"_1-计算属性","link":"#_1-计算属性","children":[{"level":3,"title":"1.1 computed函数","slug":"_1-1-computed函数","link":"#_1-1-computed函数","children":[]},{"level":3,"title":"1.2 其它使用","slug":"_1-2-其它使用","link":"#_1-2-其它使用","children":[]},{"level":3,"title":"1.3 计算属性vs方法","slug":"_1-3-计算属性vs方法","link":"#_1-3-计算属性vs方法","children":[]}]},{"level":2,"title":"2.侦听器","slug":"_2-侦听器","link":"#_2-侦听器","children":[{"level":3,"title":"2.1 基本使用","slug":"_2-1-基本使用","link":"#_2-1-基本使用","children":[]},{"level":3,"title":"2.2 watch 函数总结","slug":"_2-2-watch-函数总结","link":"#_2-2-watch-函数总结","children":[]},{"level":3,"title":"2.3 watchEffect函数","slug":"_2-3-watcheffect函数","link":"#_2-3-watcheffect函数","children":[]},{"level":3,"title":"2.4 回调的触发时机","slug":"_2-4-回调的触发时机","link":"#_2-4-回调的触发时机","children":[]},{"level":3,"title":"2.5 停止侦听","slug":"_2-5-停止侦听","link":"#_2-5-停止侦听","children":[]},{"level":3,"title":"2.6 清除副作用","slug":"_2-6-清除副作用","link":"#_2-6-清除副作用","children":[]}]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":17.9,"words":5370},"filePathRelative":"front_end/front_end_framework/vue3/04.md","localizedDate":"2023年1月30日","excerpt":"<h1> 04 【计算属性 侦听器】</h1>\\n<h2> 1.计算属性</h2>\\n<p>有时我们需要依赖于其他状态(普通proxy响应式数据)的状态(computed响应式数据)：\\n在 Vue 中，这是用组件计算属性处理的，以直接创建计算值，我们可以使用 computed 函数：它接受 getter 函数并为 getter 返回的值返回一个不可变的响应式 ref 对象。</p>\\n<h3> 1.1 computed函数</h3>\\n<blockquote>\\n<p>与Vue2.x中computed配置功能一致</p>\\n<p>可以直接去看3.7.3完整写法</p>\\n</blockquote>\\n<p>模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让模板变得臃肿，难以维护。比如说，我们有这样一个包含嵌套数组的对象：</p>","autoDesc":true}');export{e as data};
