import{ab as e,G as o,H as i,E as n,S as s,N as p,ac as t,W as c}from"./framework-09305b5d.js";const l={},u=t('<h1 id="_14-【接口规范和业务分层】" tabindex="-1"><a class="header-anchor" href="#_14-【接口规范和业务分层】" aria-hidden="true">#</a> 14 【接口规范和业务分层】</h1><h2 id="_1-接口规范-restful架构" tabindex="-1"><a class="header-anchor" href="#_1-接口规范-restful架构" aria-hidden="true">#</a> 1.接口规范-RESTful架构</h2><h3 id="_1-1-什么是rest" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是rest" aria-hidden="true">#</a> 1.1 什么是REST</h3><p>REST全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。 它首次出现在2000年Roy Fielding的博士论文中，Roy Fielding是HTTP规范的主要编写者之一。 他在论文中提到：&quot;我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。REST指的是一组架构约束条件和原则。&quot; 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。</p><p>REST本身并没有创造新的技术、组件或服务，而隐藏在RESTful背后的理念就是使用Web的现有特征和能力， 更好地使用现有Web标准中的一些准则和约束。虽然REST本身受Web技术的影响很深， 但是理论上REST架构风格并不是绑定在HTTP上，只不过目前HTTP是唯一与REST相关的实例。 所以我们这里描述的REST也是通过HTTP实现的REST。</p><p><strong>理解RESTful</strong></p><p>要理解RESTful架构，需要理解Representational State Transfer这个词组到底是什么意思，它的每一个词都有些什么涵义。</p><p>下面我们结合REST原则，围绕资源展开讨论，从资源的定义、获取、表述、关联、状态变迁等角度，列举一些关键概念并加以解释。</p><ul><li>资源与URI</li><li>统一资源接口</li><li>资源的表述</li><li>资源的链接</li><li>状态的转移</li></ul><h3 id="_1-2-资源与uri" tabindex="-1"><a class="header-anchor" href="#_1-2-资源与uri" aria-hidden="true">#</a> 1.2 资源与URI</h3><p>REST全称是表述性状态转移，那究竟指的是什么的表述? 其实指的就是资源。任何事物，只要有被引用到的必要，它就是一个资源。资源可以是实体(例如手机号码)，也可以只是一个抽象概念(例如价值) 。下面是一些资源的例子：</p><ul><li>某用户的手机号码</li><li>某用户的个人信息</li><li>最多用户订购的GPRS套餐</li><li>两个产品之间的依赖关系</li><li>某用户可以办理的优惠套餐</li><li>某手机号码的潜在价值</li></ul><p>要让一个资源可以被识别，需要有个唯一标识，在Web中这个唯一标识就是URI(Uniform Resource Identifier)。</p><p>URI既可以看成是资源的地址，也可以看成是资源的名称。如果某些信息没有使用URI来表示，那它就不能算是一个资源， 只能算是资源的一些信息而已。URI的设计应该遵循可寻址性原则，具有自描述性，需要在形式上给人以直觉上的关联。这里以github网站为例，给出一些还算不错的URI：</p>',14),r={href:"https://github.com/git",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/git/git",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/git/git/blob/master/block-sha1/sha1.h",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/git/git/pulls",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/git/git/pulls?state=closed",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/git/git/compare/master%E2%80%A6next",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"下面让我们来看看URI设计上的一些技巧:",-1),f=n("ul",null,[n("li",null,"使用_或-来让URI可读性更好")],-1),y={href:"http://www.oschina.net/news/38119/oschina-translate-reward-plan%E3%80%82",target:"_blank",rel:"noopener noreferrer"},_=t(`<ul><li>使用/来表示资源的层级关系</li></ul><p>例如上述/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08就表示了一个多级的资源， 指的是git用户的git项目的某次提交记录，又例如/orders/2012/10可以用来表示2012年10月的订单记录。</p><ul><li>使用?用来过滤资源</li></ul><p>很多人只是把?简单的当做是参数的传递，很容易造成URI过于复杂、难以理解。可以把?用于对资源的过滤， 例如/git/git/pulls用来表示git项目的所有推入请求，而/pulls?state=closed用来表示git项目中已经关闭的推入请求， 这种URL通常对应的是一些特定条件的查询结果或算法运算结果。</p><ul><li>,或;可以用来表示同级资源的关系</li></ul><p>有时候我们需要表示同级资源的关系时，可以使用,或;来进行分割。例如哪天github可以比较某个文件在随意两次提交记录之间的差异，或许可以使用/git/git /block-sha1/sha1.h/compare/e3af72cdafab5993d18fae056f87e1d675913d08;bd63e61bdf38e872d5215c07b264dcc16e4febca作为URI。 不过，现在github是使用…来做这个事情的，例如/git/git/compare/master…next。</p><h3 id="_1-3-统一资源接口" tabindex="-1"><a class="header-anchor" href="#_1-3-统一资源接口" aria-hidden="true">#</a> 1.3 统一资源接口</h3><p>RESTful架构应该遵循统一接口原则，统一接口包含了一组受限的预定义的操作，不论什么样的资源，都是通过使用相同的接口进行资源的访问。接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。</p><p>如果按照HTTP方法的语义来暴露资源，那么接口将会拥有安全性和幂等性的特性，例如GET和HEAD请求都是安全的， 无论请求多少次，都不会改变服务器状态。而GET、HEAD、PUT和DELETE请求都是幂等的，无论对资源操作多少次， 结果总是一样的，后面的请求并不会产生比第一次更多的影响。</p><p>下面列出了GET，DELETE，PUT和POST的典型用法:</p><h4 id="_1-3-1-get" tabindex="-1"><a class="header-anchor" href="#_1-3-1-get" aria-hidden="true">#</a> 1.3.1 GET</h4><ul><li><p>安全且幂等</p></li><li><p>获取表示</p></li><li><p>变更时获取表示（缓存）</p></li><li><p>200（OK） - 表示已在响应中发出</p></li><li><p>204（无内容） - 资源有空表示</p></li><li><p>301（Moved Permanently） - 资源的URI已被更新</p></li><li><p>303（See Other） - 其他（如，负载均衡）</p></li><li><p>304（not modified）- 资源未更改（缓存）</p></li><li><p>400 （bad request）- 指代坏请求（如，参数错误）</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>406 （not acceptable）- 服务端不支持所需表示</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务端当前无法处理请求</p></li></ul><h4 id="_1-3-2-post" tabindex="-1"><a class="header-anchor" href="#_1-3-2-post" aria-hidden="true">#</a> 1.3.2 POST</h4><ul><li><p>不安全且不幂等</p></li><li><p>使用服务端管理的（自动产生）的实例号创建资源</p></li><li><p>创建子资源</p></li><li><p>部分更新资源</p></li><li><p>如果没有被修改，则不过更新资源（乐观锁）</p></li><li><p>200（OK）- 如果现有资源已被更改</p></li><li><p>201（created）- 如果新资源被创建</p></li><li><p>202（accepted）- 已接受处理请求但尚未完成（异步处理）</p></li><li><p>301（Moved Permanently）- 资源的URI被更新</p></li><li><p>303（See Other）- 其他（如，负载均衡）</p></li><li><p>400（bad request）- 指代坏请求</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>406 （not acceptable）- 服务端不支持所需表示</p></li><li><p>409 （conflict）- 通用冲突</p></li><li><p>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</p></li><li><p>415 （unsupported media type）- 接受到的表示不受支持</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务当前无法处理请求</p></li></ul><h4 id="_1-3-3-put" tabindex="-1"><a class="header-anchor" href="#_1-3-3-put" aria-hidden="true">#</a> 1.3.3 PUT</h4><ul><li><p>不安全但幂等</p></li><li><p>用客户端管理的实例号创建一个资源</p></li><li><p>通过替换的方式更新资源</p></li><li><p>如果未被修改，则更新资源（乐观锁）</p></li><li><p>200 （OK）- 如果已存在资源被更改</p></li><li><p>201 （created）- 如果新资源被创建</p></li><li><p>301（Moved Permanently）- 资源的URI已更改</p></li><li><p>303 （See Other）- 其他（如，负载均衡）</p></li><li><p>400 （bad request）- 指代坏请求</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>406 （not acceptable）- 服务端不支持所需表示</p></li><li><p>409 （conflict）- 通用冲突</p></li><li><p>412 （Precondition Failed）- 前置条件失败（如执行条件更新时的冲突）</p></li><li><p>415 （unsupported media type）- 接受到的表示不受支持</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务当前无法处理请求</p></li></ul><h4 id="_1-3-4-delete" tabindex="-1"><a class="header-anchor" href="#_1-3-4-delete" aria-hidden="true">#</a> 1.3.4 DELETE</h4><ul><li><p>不安全但幂等</p></li><li><p>删除资源</p></li><li><p>200 （OK）- 资源已被删除</p></li><li><p>301 （Moved Permanently）- 资源的URI已更改</p></li><li><p>303 （See Other）- 其他，如负载均衡</p></li><li><p>400 （bad request）- 指代坏请求</p></li><li><p>404 （not found）- 资源不存在</p></li><li><p>409 （conflict）- 通用冲突</p></li><li><p>500 （internal server error）- 通用错误响应</p></li><li><p>503 （Service Unavailable）- 服务端当前无法处理请求</p></li></ul><p>下面我们来看一些实践中常见的问题:</p><ul><li>POST和PUT用于创建资源时有什么区别?</li></ul><p>POST和PUT在创建资源的区别在于，所创建的资源的名称(URI)是否由客户端决定。 例如为我的博文增加一个java的分类，生成的路径就是分类名/categories/java，那么就可以采用PUT方法。不过很多人直接把POST、GET、PUT、DELETE直接对应上CRUD，例如在一个典型的rails实现的RESTful应用中就是这么做的。</p><p>我认为，这是因为rails默认使用服务端生成的ID作为URI的缘故，而不少人就是通过rails实践REST的，所以很容易造成这种误解。</p><ul><li>客户端不一定都支持这些HTTP方法吧?</li></ul><p>的确有这种情况，特别是一些比较古老的基于浏览器的客户端，只能支持GET和POST两种方法。</p><p>在实践上，客户端和服务端都可能需要做一些妥协。例如rails框架就支持通过隐藏参数_method=DELETE来传递真实的请求方法， 而像Backbone这样的客户端MVC框架则允许传递_method传输和设置X-HTTP-Method-Override头来规避这个问题。</p><ul><li>统一接口是否意味着不能扩展带特殊语义的方法?</li></ul><p>统一接口并不阻止你扩展方法，只要方法对资源的操作有着具体的、可识别的语义即可，并能够保持整个接口的统一性。</p><p>像WebDAV就对HTTP方法进行了扩展，增加了LOCK、UPLOCK等方法。而github的API则支持使用PATCH方法来进行issue的更新，例如:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PATCH /repos/:owner/:repo/issues/:number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过，需要注意的是，像PATCH这种不是HTTP标准方法的，服务端需要考虑客户端是否能够支持的问题。</p><ul><li>统一资源接口对URI有什么指导意义?</li></ul><p>统一资源接口要求使用标准的HTTP方法对资源进行操作，所以URI只应该来表示资源的名称，而不应该包括资源的操作。</p><p>通俗来说，URI不应该使用动作来描述。例如，下面是一些不符合统一接口要求的URI:</p><ul><li>GET /getUser/1</li><li>POST /createUser</li><li>PUT /updateUser/1</li><li>DELETE /deleteUser/1</li></ul><p>如果GET请求增加计数器，这是否违反安全性?</p><p>安全性不代表请求不产生副作用，例如像很多API开发平台，都对请求流量做限制。像github，就会限制没有认证的请求每小时只能请求60次。</p><p>但客户端不是为了追求副作用而发出这些GET或HEAD请求的，产生副作用是服务端&quot;自作主张&quot;的。</p><p>另外，服务端在设计时，也不应该让副作用太大，因为客户端认为这些请求是不会产生副作用的。</p><ul><li>直接忽视缓存可取吗?</li></ul><p>即使你按各个动词的原本意图来使用它们，你仍可以轻易禁止缓存机制。 最简单的做法就是在你的HTTP响应里增加这样一个报头： Cache-control: no-cache。 但是，同时你也对失去了高效的缓存与再验证的支持(使用Etag等机制)。</p><p>对于客户端来说，在为一个REST式服务实现程序客户端时，也应该充分利用现有的缓存机制，以免每次都重新获取表示。</p><ul><li>响应代码的处理有必要吗?</li></ul><p>HTTP的响应代码可用于应付不同场合，正确使用这些状态代码意味着客户端与服务器可以在一个具备较丰富语义的层次上进行沟通。</p><p>例如，201（&quot;Created&quot;）响应代码表明已经创建了一个新的资源，其URI在Location响应报头里。</p><p>假如你不利用HTTP状态代码丰富的应用语义，那么你将错失提高重用性、增强互操作性和提升松耦合性的机会。</p><p>如果这些所谓的RESTful应用必须通过响应实体才能给出错误信息，那么SOAP就是这样的了，它就能够满足了。</p><h3 id="_1-4-资源的表述" tabindex="-1"><a class="header-anchor" href="#_1-4-资源的表述" aria-hidden="true">#</a> 1.4 资源的表述</h3><p>上面提到，客户端通过HTTP方法可以获取资源，是吧? 不，确切的说，客户端获取的只是资源的表述而已。 资源在外界的具体呈现，可以有多种表述(或成为表现、表示)形式，在客户端和服务端之间传送的也是资源的表述，而不是资源本身。 例如文本资源可以采用html、xml、json等格式，图片可以使用PNG或JPG展现出来。</p><p>资源的表述包括数据和描述数据的元数据，例如，HTTP头&quot;Content-Type&quot; 就是这样一个元数据属性。</p><p>那么客户端如何知道服务端提供哪种表述形式呢?</p><p>答案是可以通过HTTP内容协商，客户端可以通过Accept头请求一种特定格式的表述，服务端则通过Content-Type告诉客户端资源的表述形式。</p><p>以github为例，请求某组织资源的json格式的表述形式:</p><figure><img src="https://i0.hdslb.com/bfs/album/f4c9f595588f15b10a5fea0ff5f542d2ae556340.png" alt="image-20221108163406411" tabindex="0" loading="lazy"><figcaption>image-20221108163406411</figcaption></figure><h4 id="_1-4-1-在uri里边带上版本号" tabindex="-1"><a class="header-anchor" href="#_1-4-1-在uri里边带上版本号" aria-hidden="true">#</a> 1.4.1 在URI里边带上版本号</h4><p>下面我们来看一些实践上常见的设计:</p><p>有些API在URI里边带上版本号，例如:</p>`,56),T={href:"http://api.example.com/1.0/foo",target:"_blank",rel:"noopener noreferrer"},x={href:"http://api.example.com/1.2/foo",target:"_blank",rel:"noopener noreferrer"},U={href:"http://api.example.com/2.0/foo",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>如果我们把版本号理解成资源的不同表述形式的话，就应该只是用一个URL，并通过Accept头部来区分，还是以github为例，它的Accept的完整格式是:application/vnd.github[.version].param[+json]</p><p>对于v3版本的话，就是Accept: application/vnd.github.v3。对于上面的例子，同理可以使用使用下面的头部:</p><ul><li>Accept: vnd.example-com.foo+json; version=1.0</li><li>Accept: vnd.example-com.foo+json; version=1.2</li><li>Accept: vnd.example-com.foo+json; version=2.0</li></ul><h4 id="_1-4-2-使用uri后缀来区分表述格式" tabindex="-1"><a class="header-anchor" href="#_1-4-2-使用uri后缀来区分表述格式" aria-hidden="true">#</a> 1.4.2 使用URI后缀来区分表述格式</h4><p>像rails框架，就支持使用/users.xml或/users.json来区分不同的格式。 这样的方式对于客户端来说，无疑是更为直观，但混淆了资源的名称和资源的表述形式。 我个人认为，还是应该优先使用内容协商来区分表述格式。</p><h4 id="_1-4-3-如何处理不支持的表述格式" tabindex="-1"><a class="header-anchor" href="#_1-4-3-如何处理不支持的表述格式" aria-hidden="true">#</a> 1.4.3 如何处理不支持的表述格式</h4><p>当服务器不支持所请求的表述格式，那么应该怎么办？若服务器不支持，它应该返回一个HTTP 406响应，表示拒绝处理该请求。下面以github为例，展示了一个请求XML表述资源的结果：</p><figure><img src="https://i0.hdslb.com/bfs/album/6050323726a28fe5a7449f56ab752aa9b732bb30.png" alt="image-20221108163547723" tabindex="0" loading="lazy"><figcaption>image-20221108163547723</figcaption></figure><h3 id="_1-5-资源的链接" tabindex="-1"><a class="header-anchor" href="#_1-5-资源的链接" aria-hidden="true">#</a> 1.5 资源的链接</h3><p>我们知道REST是使用标准的HTTP方法来操作资源的，但仅仅因此就理解成带CURD的Web数据库架构就太过于简单了。</p><p>这种反模式忽略了一个核心概念：&quot;超媒体即应用状态引擎（hypermedia as the engine of application state）&quot;。 超媒体是什么?</p><p>当你浏览Web网页时，从一个连接跳到一个页面，再从另一个连接跳到另外一个页面，就是利用了超媒体的概念：把一个个把资源链接起来.</p><p>要达到这个目的，就要求在表述格式里边加入链接来引导客户端。在《RESTful Web Services》一书中，作者把这种具有链接的特性成为连通性。下面我们具体来看一些例子。</p><p>下面展示的是github获取某个组织下的项目列表的请求，可以看到在响应头里边增加Link头告诉客户端怎么访问下一页和最后一页的记录。 而在响应体里边，用url来链接项目所有者和项目地址。</p><figure><img src="https://i0.hdslb.com/bfs/album/4c14385dbc630d2f69184f10ea6d1a54d7fc2d7a.png" alt="image-20221108163612111" tabindex="0" loading="lazy"><figcaption>image-20221108163612111</figcaption></figure><p>又例如下面这个例子，创建订单后通过链接引导客户端如何去付款。</p><figure><img src="https://i0.hdslb.com/bfs/album/97028d06e82cb78954ee2ce1007628bafa4f7c1a.png" alt="image-20221108163626264" tabindex="0" loading="lazy"><figcaption>image-20221108163626264</figcaption></figure><p>上面的例子展示了如何使用超媒体来增强资源的连通性。很多人在设计RESTful架构时，使用很多时间来寻找漂亮的URI，而忽略了超媒体。所以，应该多花一些时间来给资源的表述提供链接，而不是专注于&quot;资源的CRUD&quot;。</p><h3 id="_1-5-状态的转移" tabindex="-1"><a class="header-anchor" href="#_1-5-状态的转移" aria-hidden="true">#</a> 1.5 状态的转移</h3><p>有了上面的铺垫，再讨论REST里边的状态转移就会很容易理解了。</p><p>不过，我们先来讨论一下REST原则中的无状态通信原则。初看一下，好像自相矛盾了，既然无状态，何来状态转移一说?</p><p>其实，这里说的无状态通信原则，并不是说客户端应用不能有状态，而是指服务端不应该保存客户端状态。</p><h4 id="_1-5-1-应用状态与资源状态" tabindex="-1"><a class="header-anchor" href="#_1-5-1-应用状态与资源状态" aria-hidden="true">#</a> 1.5.1 应用状态与资源状态</h4><p>实际上，状态应该区分应用状态和资源状态，客户端负责维护应用状态，而服务端维护资源状态。</p><p>客户端与服务端的交互必须是无状态的，并在每一次请求中包含处理该请求所需的一切信息。</p><p>服务端不需要在请求间保留应用状态，只有在接受到实际请求的时候，服务端才会关注应用状态。</p><p>这种无状态通信原则，使得服务端和中介能够理解独立的请求和响应。</p><p>在多次请求中，同一客户端也不再需要依赖于同一服务器，方便实现高可扩展和高可用性的服务端。</p><p>但有时候我们会做出违反无状态通信原则的设计，例如利用Cookie跟踪某个服务端会话状态，常见的像J2EE里边的JSESSIONID。</p><p>这意味着，浏览器随各次请求发出去的Cookie是被用于构建会话状态的。</p><p>当然，如果Cookie保存的是一些服务器不依赖于会话状态即可验证的信息（比如认证令牌），这样的Cookie也是符合REST原则的。</p><h4 id="_1-5-2-应用状态的转移" tabindex="-1"><a class="header-anchor" href="#_1-5-2-应用状态的转移" aria-hidden="true">#</a> 1.5.2 应用状态的转移</h4><p>状态转移到这里已经很好理解了， &quot;会话&quot;状态不是作为资源状态保存在服务端的，而是被客户端作为应用状态进行跟踪的。客户端应用状态在服务端提供的超媒体的指引下发生变迁。服务端通过超媒体告诉客户端当前状态有哪些后续状态可以进入。</p><p>这些类似&quot;下一页&quot;之类的链接起的就是这种推进状态的作用——指引你如何从当前状态进入下一个可能的状态。</p><h2 id="_2-业务分层" tabindex="-1"><a class="header-anchor" href="#_2-业务分层" aria-hidden="true">#</a> 2.业务分层</h2><figure><img src="https://i0.hdslb.com/bfs/album/c94cdee3e81ad772ae369539d521741546e12fa3.png" alt="image-20220620210337550" tabindex="0" loading="lazy"><figcaption>image-20220620210337550</figcaption></figure><blockquote><p>M层可以替换为services文件夹，因为model文件夹存储数据库模型了</p></blockquote><h2 id="_3-业务分层演示" tabindex="-1"><a class="header-anchor" href="#_3-业务分层演示" aria-hidden="true">#</a> 3.业务分层演示</h2><h3 id="_3-1-原先代码的写法" tabindex="-1"><a class="header-anchor" href="#_3-1-原先代码的写法" aria-hidden="true">#</a> 3.1 原先代码的写法</h3><figure><img src="https://i0.hdslb.com/bfs/album/40d5ee746688edfef2091335af113506b911402f.png" alt="image-20221108162718013" tabindex="0" loading="lazy"><figcaption>image-20221108162718013</figcaption></figure><p><code>config/db.config.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>

mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://127.0.0.1:27017/ds&#39;</span><span class="token punctuation">)</span>
<span class="token comment">//插入集合和数据,数据库ds2会自动创建</span>

<span class="token comment">// 监听mongodb数据库的连接状态</span>
<span class="token comment">// 绑定数据库连接成功事件</span>
mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;连接成功&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 绑定数据库连接失败事件</span>
mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库连接已经断开&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>model/UserModel.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> userType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">password</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> UserModel <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;UserModel&#39;</span><span class="token punctuation">,</span> userType<span class="token punctuation">,</span> <span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> UserModel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>app.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> indexRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> usersRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./routes/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> indexRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/users&#39;</span><span class="token punctuation">,</span> usersRouter<span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> app<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>routes/user.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> UserModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../model/UserModel&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 获取用户</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> page<span class="token punctuation">,</span> limit <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query
  UserModel
    <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">$where</span><span class="token operator">:</span> <span class="token string">&#39;obj.username !== &quot;&quot;&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 添加用户</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
  <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> docs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
     res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
       <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
         <span class="token literal-property property">id</span><span class="token operator">:</span> docs<span class="token punctuation">.</span>_id<span class="token punctuation">,</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">}</span><span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 修改用户</span>
router<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
  UserModel
    <span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">_id</span><span class="token operator">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;更新&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 删除用户</span>
router<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
  UserModel
    <span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">_id</span><span class="token operator">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">ok</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-用业务分层修改代码" tabindex="-1"><a class="header-anchor" href="#_3-2-用业务分层修改代码" aria-hidden="true">#</a> 3.2 用业务分层修改代码</h3><figure><img src="https://i0.hdslb.com/bfs/album/b778fe5909ab1a0b57c32562f16f7b67cb467e2c.png" alt="image-20221108162652289" tabindex="0" loading="lazy"><figcaption>image-20221108162652289</figcaption></figure><p><code>config/db.config.js</code>、<code>model/UserModel.js</code>、<code>app.js</code>不变</p><p><code>router/user.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> userController <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../controllers/userController&#39;</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>getUser<span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>addUser<span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>updateUser<span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&#39;/:id&#39;</span><span class="token punctuation">,</span> userController<span class="token punctuation">.</span>deleteUser<span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>controllers/userController.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> userService <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../services/userService&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> userController <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">async</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> page<span class="token punctuation">,</span> limit <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> limit<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> age <span class="token punctuation">}</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> userService<span class="token punctuation">.</span><span class="token function">updateUser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> userService<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> userController
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>services/userService.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> userModel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../model/userModel&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> userService <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userModel
      <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">_id</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> limit<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> age <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userModel<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      username<span class="token punctuation">,</span>
      password<span class="token punctuation">,</span>
      age<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token parameter">_id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userModel<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span>
      <span class="token punctuation">{</span>
        _id<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;更新&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token parameter">_id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> userModel<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      _id<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> userService
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57);function R(E,S){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[s("https://github.com/git"),p(a)])]),n("li",null,[n("a",d,[s("https://github.com/git/git"),p(a)])]),n("li",null,[n("a",k,[s("https://github.com/git/git/blob/master/block-sha1/sha1.h"),p(a)])]),n("li",null,[n("a",v,[s("https://github.com/git/git/commit/e3af72cdafab5993d18fae056f87e1d675913d08"),p(a)])]),n("li",null,[n("a",m,[s("https://github.com/git/git/pulls"),p(a)])]),n("li",null,[n("a",b,[s("https://github.com/git/git/pulls?state=closed"),p(a)])]),n("li",null,[n("a",g,[s("https://github.com/git/git/compare/master…next"),p(a)])])]),h,f,n("p",null,[s("曾经Web上的URI都是冰冷的数字或者无意义的字符串，但现在越来越多的网站使用_或-来分隔一些单词，让URI看上去更为人性化。 例如国内比较出名的开源中国社区，它上面的新闻地址就采用这种风格， 如"),n("a",y,[s("http://www.oschina.net/news/38119/oschina-translate-reward-plan。"),p(a)])]),_,n("ul",null,[n("li",null,[n("a",T,[s("http://api.example.com/1.0/foo"),p(a)])]),n("li",null,[n("a",x,[s("http://api.example.com/1.2/foo"),p(a)])]),n("li",null,[n("a",U,[s("http://api.example.com/2.0/foo"),p(a)])])]),w])}const P=e(l,[["render",R],["__file","14.html.vue"]]);export{P as default};
