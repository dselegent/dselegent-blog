const l=JSON.parse('{"key":"v-2d3b571a","path":"/front_end/front_end_base/javascript/05.html","title":"05 【函数（上）】","lang":"zh-CN","frontmatter":{"description":"05 【函数（上）】 1.函数基本介绍 函数就是语句的封装，可以让这些代码方便地被复用。 函数具有 “一次定义，多次调用” 的优点。 使用函数，可以简化代码，让代码更具有可读性。 函数也是一个对象，也具有普通对象的功能（能有属性） 使用typeof检查一个函数时会返回function 和变量类似，函数必须先定义然后才能使用。 使用 function 关键字定义函数。 function：函数、功能。","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.cf/front_end/front_end_base/javascript/05.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"05 【函数（上）】"}],["meta",{"property":"og:description","content":"05 【函数（上）】 1.函数基本介绍 函数就是语句的封装，可以让这些代码方便地被复用。 函数具有 “一次定义，多次调用” 的优点。 使用函数，可以简化代码，让代码更具有可读性。 函数也是一个对象，也具有普通对象的功能（能有属性） 使用typeof检查一个函数时会返回function 和变量类似，函数必须先定义然后才能使用。 使用 function 关键字定义函数。 function：函数、功能。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05 【函数（上）】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.函数基本介绍","slug":"_1-函数基本介绍","link":"#_1-函数基本介绍","children":[]},{"level":2,"title":"2.函数的声明提升","slug":"_2-函数的声明提升","link":"#_2-函数的声明提升","children":[]},{"level":2,"title":"3.函数优先提升","slug":"_3-函数优先提升","link":"#_3-函数优先提升","children":[]},{"level":2,"title":"4.函数的参数和返回值","slug":"_4-函数的参数和返回值","link":"#_4-函数的参数和返回值","children":[{"level":3,"title":"4.1 函数参数","slug":"_4-1-函数参数","link":"#_4-1-函数参数","children":[]},{"level":3,"title":"4.2 形参和实参个数不同的情况","slug":"_4-2-形参和实参个数不同的情况","link":"#_4-2-形参和实参个数不同的情况","children":[]},{"level":3,"title":"4.3 动态参数arguments","slug":"_4-3-动态参数arguments","link":"#_4-3-动态参数arguments","children":[]},{"level":3,"title":"4.4 返回值","slug":"_4-4-返回值","link":"#_4-4-返回值","children":[]},{"level":3,"title":"4.5 返回值类型","slug":"_4-5-返回值类型","link":"#_4-5-返回值类型","children":[]}]},{"level":2,"title":"5.递归","slug":"_5-递归","link":"#_5-递归","children":[]},{"level":2,"title":"6.作用域","slug":"_6-作用域","link":"#_6-作用域","children":[{"level":3,"title":"6.1 作用域链","slug":"_6-1-作用域链","link":"#_6-1-作用域链","children":[]},{"level":3,"title":"6.2 全局作用域","slug":"_6-2-全局作用域","link":"#_6-2-全局作用域","children":[]},{"level":3,"title":"6.3 局部作用域(local)-函数作用域","slug":"_6-3-局部作用域-local-函数作用域","link":"#_6-3-局部作用域-local-函数作用域","children":[]},{"level":3,"title":"6.4 遮蔽效应","slug":"_6-4-遮蔽效应","link":"#_6-4-遮蔽效应","children":[]},{"level":3,"title":"6.5 注意考虑变量声明提升的情况","slug":"_6-5-注意考虑变量声明提升的情况","link":"#_6-5-注意考虑变量声明提升的情况","children":[]},{"level":3,"title":"6.6 形参也是局部变量","slug":"_6-6-形参也是局部变量","link":"#_6-6-形参也是局部变量","children":[]},{"level":3,"title":"6.7 不加 var 将定义全局变量","slug":"_6-7-不加-var-将定义全局变量","link":"#_6-7-不加-var-将定义全局变量","children":[]}]},{"level":2,"title":"7.this（上下文对象)","slug":"_7-this-上下文对象","link":"#_7-this-上下文对象","children":[{"level":3,"title":"7.1 函数的上下文","slug":"_7-1-函数的上下文","link":"#_7-1-函数的上下文","children":[]},{"level":3,"title":"7.2 函数中的 this","slug":"_7-2-函数中的-this","link":"#_7-2-函数中的-this","children":[]},{"level":3,"title":"7.3 函数的上下文由调用方式决定","slug":"_7-3-函数的上下文由调用方式决定","link":"#_7-3-函数的上下文由调用方式决定","children":[]},{"level":3,"title":"7.4 简单总结","slug":"_7-4-简单总结","link":"#_7-4-简单总结","children":[]}]},{"level":2,"title":"8.上下文规则","slug":"_8-上下文规则","link":"#_8-上下文规则","children":[{"level":3,"title":"8.1 函数的上下文由调用函数的方式决定","slug":"_8-1-函数的上下文由调用函数的方式决定","link":"#_8-1-函数的上下文由调用函数的方式决定","children":[]},{"level":3,"title":"8.2 规则1","slug":"_8-2-规则1","link":"#_8-2-规则1","children":[]},{"level":3,"title":"8.3 规则2","slug":"_8-3-规则2","link":"#_8-3-规则2","children":[]},{"level":3,"title":"8.4 规则3","slug":"_8-4-规则3","link":"#_8-4-规则3","children":[]},{"level":3,"title":"8.5 规则4","slug":"_8-5-规则4","link":"#_8-5-规则4","children":[]},{"level":3,"title":"8.6 规则5","slug":"_8-6-规则5","link":"#_8-6-规则5","children":[]},{"level":3,"title":"8.7 规则6","slug":"_8-7-规则6","link":"#_8-7-规则6","children":[]}]},{"level":2,"title":"9.call、apply和bind","slug":"_9-call、apply和bind","link":"#_9-call、apply和bind","children":[{"level":3,"title":"9.1 call和apply能指定函数的上下文","slug":"_9-1-call和apply能指定函数的上下文","link":"#_9-1-call和apply能指定函数的上下文","children":[]},{"level":3,"title":"9.2 call和apply的区别（参数形式不同）","slug":"_9-2-call和apply的区别-参数形式不同","link":"#_9-2-call和apply的区别-参数形式不同","children":[]},{"level":3,"title":"9.3 到底使用call还是apply？","slug":"_9-3-到底使用call还是apply","link":"#_9-3-到底使用call还是apply","children":[]},{"level":3,"title":"9.4 bind方法的使用","slug":"_9-4-bind方法的使用","link":"#_9-4-bind方法的使用","children":[]},{"level":3,"title":"9.5 上下文规则总结","slug":"_9-5-上下文规则总结","link":"#_9-5-上下文规则总结","children":[]}]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":20.53,"words":6159},"filePathRelative":"front_end/front_end_base/javascript/05.md","localizedDate":"2023年1月30日","excerpt":"<h1> 05 【函数（上）】</h1>\\n<h2> 1.函数基本介绍</h2>\\n<p>函数就是语句的封装，可以让这些代码方便地被复用。</p>\\n<p>函数具有 “一次定义，多次调用” 的优点。</p>\\n<p>使用函数，可以简化代码，让代码更具有可读性。</p>\\n<p><strong>函数也是一个对象，也具有普通对象的功能（能有属性）</strong><br>\\n使用typeof检查一个函数时会返回function</p>\\n<p>和变量类似，函数必须先定义然后才能使用。</p>\\n<p>使用 <code>function</code> 关键字定义函数。</p>\\n<blockquote>\\n<p>function：函数、功能。</p>\\n</blockquote>","autoDesc":true}');export{l as data};
