import{ab as p,G as o,H as c,E as n,N as e,S as s,ac as t,W as l}from"./framework-09305b5d.js";const i={},u=t(`<h1 id="_04-【nodejs模块化规范-commonjs】" tabindex="-1"><a class="header-anchor" href="#_04-【nodejs模块化规范-commonjs】" aria-hidden="true">#</a> 04 【nodejs模块化规范：CommonJS】</h1><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1.前言</h2><p>网站越来越复杂，js代码、js文件也越来越多，会遇到<strong>一些问题</strong>：</p><ul><li>文件依赖</li><li>全局污染、命名冲突</li></ul><p>程序模块化包括：</p><ul><li>日期模块</li><li>数学计算模块</li><li>日志模块</li><li>登陆认证模块</li><li>报表展示模块等。</li></ul><p>所有这些模块共同组成了程序软件系统。</p><p>一次编写，多次使用，才是提高效率的核心。</p><h2 id="_2-模块化的理解" tabindex="-1"><a class="header-anchor" href="#_2-模块化的理解" aria-hidden="true">#</a> 2.模块化的理解</h2><h3 id="_2-1-什么是模块化" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是模块化" aria-hidden="true">#</a> 2.1 什么是模块化</h3><p><strong>概念</strong>：将一个复杂的程序依据一定的规则（规范）封装成几个块（文件），并组合在一起。</p><p>模块的内部数据、实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信。</p><p>最早的时候，我们会把所有的代码都写在一个js文件里，那么，耦合性会很高（关联性强），不利于维护；而且会造成全局污染，很容易命名冲突。</p><h3 id="_2-2-模块化的好处" tabindex="-1"><a class="header-anchor" href="#_2-2-模块化的好处" aria-hidden="true">#</a> 2.2 模块化的好处</h3><ul><li>避免命名冲突，减少命名空间污染</li><li>降低耦合性；更好地分离、按需加载</li><li><strong>高复用性</strong>：代码方便重用，别人开发的模块直接拿过来就可以使用，不需要重复开发类似的功能。</li><li><strong>高可维护性</strong>：软件的声明周期中最长的阶段其实并不是开发阶段，而是维护阶段，需求变更比较频繁。使用模块化的开发，方式更容易维护。</li><li>部署方便</li></ul><h2 id="_3-模块化规范" tabindex="-1"><a class="header-anchor" href="#_3-模块化规范" aria-hidden="true">#</a> 3.模块化规范</h2><h3 id="_3-1-模块化规范的引入" tabindex="-1"><a class="header-anchor" href="#_3-1-模块化规范的引入" aria-hidden="true">#</a> 3.1 模块化规范的引入</h3><p>假设我们引入模块化，首先可能会想到的思路是：在一个文件中引入多个js文件。如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zepto.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fastClick.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>util/login.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>util/base.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>util/city.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样做会带来很多问题：</p><ul><li>请求过多：引入十个js文件，就有十次http请求。</li><li>依赖模糊：不同的js文件可能会相互依赖，如果改其中的一个文件，另外一个文件可能会报错。</li></ul><p>以上两点，最终导致：<strong>难以维护</strong>。</p><p>于是，这就引入了模块化规范。</p><h3 id="_3-2-模块化的概念解读" tabindex="-1"><a class="header-anchor" href="#_3-2-模块化的概念解读" aria-hidden="true">#</a> 3.2 模块化的概念解读</h3><p>模块化起源于 Node.js。Node.js 中把很多 js 打包成 package，需要的时候直接通过 require 的方式进行调用（CommonJS），这就是模块化的方式。</p><p>那如何把这种模块化思维应用到前端来呢？这就产生了两种伟大的 js：RequireJS 和 SeaJS。</p><h3 id="_3-3-模块化规范" tabindex="-1"><a class="header-anchor" href="#_3-3-模块化规范" aria-hidden="true">#</a> 3.3 模块化规范</h3><p>服务器端规范：</p>`,28),r={href:"http://www.commonjs.org/",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"CommonJS规范",-1),k=n("p",null,"CommonJS 就是一套约定标准，不是技术。用于约定我们的代码应该是怎样的一种结构。",-1),m=n("p",null,"浏览器端规范：",-1),v={href:"https://github.com/amdjs/amdjs-api",target:"_blank",rel:"noopener noreferrer"},b=n("strong",null,"AMD规范",-1),g={href:"http://requirejs.org/",target:"_blank",rel:"noopener noreferrer"},h=t('<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- 异步加载模块；\n\n- 依赖前置、提前执行：require([`foo`,`bar`],function(foo,bar){});   //也就是说把所有的包都 require 成功，再继续执行代码。\n\n- define 定义模块：define([`require`,`foo`],function(){return});\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),x={href:"https://web.qianguyihao.com/11-Node.js/04-Node.js%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83%EF%BC%9ACommonJS.html",target:"_blank",rel:"noopener noreferrer"},f={href:"http://seajs.org/",target:"_blank",rel:"noopener noreferrer"},j=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  同步加载模块；

  依赖就近，延迟执行：require(./a) 直接引入。或者Require.async 异步引入。   //依赖就近：执行到这一部分的时候，再去加载对应的文件。

  define 定义模块， export 导出：define(function(require, export, module){});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：面试时，经常会问AMD 和 CMD 的区别。</p><p>另外，还有ES6规范：import &amp; export。</p><p>这篇文章，我们来讲一下<code>CommonJS</code>，它是 Node.js 使用的模块化规范。</p><h2 id="_4-commonjs-的基本语法" tabindex="-1"><a class="header-anchor" href="#_4-commonjs-的基本语法" aria-hidden="true">#</a> 4.CommonJS 的基本语法</h2><h3 id="_4-1-commonjs-的介绍" tabindex="-1"><a class="header-anchor" href="#_4-1-commonjs-的介绍" aria-hidden="true">#</a> 4.1 CommonJS 的介绍</h3>`,6),q={href:"http://www.commonjs.org/",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>CommonJS 规范规定：每个模块内部，module 变量代表当前模块。这个变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口对象。加载某个模块，其实是加载该模块的 module.exports 对象。</p><p>在 CommonJS 中，每个文件都可以当作一个模块：</p><ul><li>在服务器端：模块的加载是运行时同步加载的。</li><li>在浏览器端: 模块需要提前编译打包处理。首先，既然同步的，很容易引起阻塞；其次，浏览器不认识<code>require</code>语法，因此，需要提前编译打包。</li></ul><h3 id="_4-2-模块的暴露和引入" tabindex="-1"><a class="header-anchor" href="#_4-2-模块的暴露和引入" aria-hidden="true">#</a> 4.2 模块的暴露和引入</h3><h3 id="_4-3-模块的暴露和引入" tabindex="-1"><a class="header-anchor" href="#_4-3-模块的暴露和引入" aria-hidden="true">#</a> 4.3 模块的暴露和引入</h3><p>Node.js 中只有模块级作用域，两个模块之间的变量、方法，默认是互不冲突，互不影响，这样就导致一个问题：模块 A 要怎样使用模块B中的变量&amp;方法呢？这就需要通过 <code>exports</code> 关键字来实现。</p><p>Node.js中，每个模块都有一个 exports 接口对象，我们可以把公共的变量、方法挂载到这个接口对象中，其他的模块才可以使用。</p><p>接下来详细讲一讲模块的暴露、模块的引入。</p><h4 id="_4-3-1-暴露模块的方式一-exports" tabindex="-1"><a class="header-anchor" href="#_4-3-1-暴露模块的方式一-exports" aria-hidden="true">#</a> 4.3.1 暴露模块的方式一： exports</h4><p><code>exports</code>对象用来导出当前模块的公共方法或属性。别的模块通过 require 函数调用当前模块时，得到的就是当前模块的 exports 对象。</p><p><strong>语法格式</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 相当于是：给 exports 对象添加属性</span>
exports<span class="token punctuation">.</span>xxx <span class="token operator">=</span> value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 value 可以是任意的数据类型。</p><p><strong>注意</strong>：暴露的关键词是<code>exports</code>，不是<code>export</code>。其实，这里的 exports 类似于 ES6 中的 export 的用法，都是用来导出一个指定名字的对象。</p><p><strong>代码举例</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;qianguyihao&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2-暴露模块的方式二-module-exports" tabindex="-1"><a class="header-anchor" href="#_4-3-2-暴露模块的方式二-module-exports" aria-hidden="true">#</a> 4.3.2 暴露模块的方式二： module.exports</h4><p><code>module.exports</code>用来导出一个默认对象，没有指定对象名。</p><p>语法格式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式一：导出整个 exports 对象</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> value<span class="token punctuation">;</span>

<span class="token comment">// 方式二：给 exports 对象添加属性</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>xxx <span class="token operator">=</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 value 可以是任意的数据类型。</p><p>代码举例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 方式1</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;我是 module1&#39;</span><span class="token punctuation">,</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 我们不能再继续写 module.exports = value2。因为重新赋值，会把 exports 对象 之前的赋值覆盖掉。</span>

<span class="token comment">// 方式2</span>
<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>module.exports</code> 还可以修改模块的原始导出对象。比如当前模块原本导出的是一个对象，我们可以通过 module.exports 修改为导出一个函数。如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-exports-和-module-exports-的区别" tabindex="-1"><a class="header-anchor" href="#_4-4-exports-和-module-exports-的区别" aria-hidden="true">#</a> 4.4 exports 和 module.exports 的区别</h3><p>最重要的区别：</p><ul><li>使用exports时，只能单个设置属性 <code>exports.a = a;</code></li><li>使用module.exports时，既单个设置属性 <code>module.exports.a</code>，也可以整个赋值 <code>module.exports = obj</code>。</li></ul><p>其他要点：</p><ul><li>Node中每个模块的最后，都会执行 <code>return: module.exports</code>。</li><li>Node中每个模块都会把 <code>module.exports</code>指向的对象赋值给一个变量 <code>exports</code>，也就是说 <code>exports = module.exports</code>。</li><li><code>module.exports = XXX</code>，表示当前模块导出一个单一成员，结果就是XXX。</li><li>如果需要导出多个成员，则必须使用 <code>exports.add = XXX; exports.foo = XXX</code>。或者使用 <code>module.exports.add = XXX; module.export.foo = XXX</code>。</li></ul><h3 id="_4-5-问题-暴露的模块到底是谁" tabindex="-1"><a class="header-anchor" href="#_4-5-问题-暴露的模块到底是谁" aria-hidden="true">#</a> 4.5 问题: 暴露的模块到底是谁？</h3><p><strong>答案</strong>：暴露的本质是<code>exports</code>对象。【重要】</p><p>比如，方式一的 <code>exports.a = a</code> 可以理解成是，<strong>给 exports 对象添加属性</strong>。方式二的 <code>module.exports = a</code>可以理解成是给整个 exports 对象赋值。方式二的 <code>module.exports.c = c</code>可以理解成是给 exports 对象添加属性。</p><p>Node.js 中每个模块都有一个 module 对象，module 对象中的有一个 exports 属性称之为<strong>接口对象</strong>。我们需要把模块之间公共的方法或属性挂载在这个接口对象中，方便其他的模块使用。</p><h3 id="_4-6-引入模块的方式-require" tabindex="-1"><a class="header-anchor" href="#_4-6-引入模块的方式-require" aria-hidden="true">#</a> 4.6 引入模块的方式：require</h3><p>require函数用来在一个模块中引入另外一个模块。传入模块名，返回模块导出对象。</p><p><strong>语法格式</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> module1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;模块名&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释：</p><ul><li>内置模块：require的是<strong>包名</strong>。</li><li>下载的第三方模块：require的是<strong>包名</strong>。</li><li>自定义模块：require的是<strong>文件路径</strong>。文件路径既可以用绝对路径，也可以用相对路径。后缀名<code>.js</code>可以省略。</li></ul><p><strong>代码举例</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> module1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> module2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./main&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> module3 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;Demo/src/main.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>require()函数的两个作用</strong>：</p><ul><li>执行导入的模块中的代码。</li><li>返回导入模块中的接口对象。</li></ul><h3 id="_4-7-主模块" tabindex="-1"><a class="header-anchor" href="#_4-7-主模块" aria-hidden="true">#</a> 4.7 主模块</h3><p>主模块是整个程序执行的入口，可以调度其他模块。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 运行main.js启动程序。此时，main.js就是主模块</span>
$ <span class="token function">node</span> main.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-8-模块的初始化" tabindex="-1"><a class="header-anchor" href="#_4-8-模块的初始化" aria-hidden="true">#</a> 4.8 模块的初始化</h3><p>一个模块中的 JS 代码仅在模块<strong>第一次被使用时</strong>执行一次，并且在使用的过程中进行初始化，然后会被缓存起来，便于后续继续使用。</p><p>代码举例：</p><p>（1）calModule.js:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）main.js：（在 main.js 中引入 hello.js 模块）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> addModule1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./calModule&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> addModule2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./calModule&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>addModule1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>addModule2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令行执行 <code>node main.js</code> 运行程序，打印结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2</span>
<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从打印结果中可以看出，<code>calModule.js</code>这个模块虽然被引用了两次，但只初始化了一次。</p><h2 id="_5-commonjs-在服务器端的实现举例" tabindex="-1"><a class="header-anchor" href="#_5-commonjs-在服务器端的实现举例" aria-hidden="true">#</a> 5.commonjs-在服务器端的实现举例</h2><p>（1）module1.js：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//暴露方式一：module.exports = value</span>

<span class="token comment">//暴露一个对象出去</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;我是 module1&#39;</span><span class="token punctuation">,</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//我们不能再继续写 module.exports = xxx。因为重新赋值，会把之前的赋值覆盖掉。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）module2.js：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//暴露方式一：module.exports = value</span>

<span class="token comment">//暴露一个函数出去</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是 module2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，此时暴露出去的 exports 对象 等价于整个函数。</p><p>（3）module3.js：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//暴露方式二：exports.xxx = value</span>

<span class="token comment">//可以往 export 对象中不断地添加属性，进行暴露</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">foo1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;module3 中的 foo1 方法&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">foo2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;module3 中的 foo2 方法&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）app.js：（将其他模块汇集到主模块）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//将其他模块汇集到主模块</span>

<span class="token keyword">let</span> uniq <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;uniq&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//引入时，第三方模块要放在自定义模块的上面</span>

<span class="token keyword">let</span> module1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/module1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> module2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/module2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> module3 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./modules/module3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//调用module1对象的方法</span>
module1<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//调用module2的函数</span>
<span class="token function">module2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意，在定义时，module2对象等价于整个函数function。所以，module2()的意思是，直接调用了函数。</span>

<span class="token comment">//调用module3中的属性</span>
module3<span class="token punctuation">.</span><span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module3<span class="token punctuation">.</span><span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">uniq</span><span class="token punctuation">(</span>module3<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将module3中的数组进行去重操作</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module3<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印数组去重后的结果</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，我们的代码就写完了。</p><p>我们在命令行中输入<code>node app.js</code>，就可以把代码跑起来了。打印结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>我是 module1
我是 module2
module3 中的 foo1 方法
module3 中的 foo2 方法
<span class="token punctuation">[</span> <span class="token number">1</span>, <span class="token number">11</span>, <span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">5</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-commonjs-基于浏览器端的实现举例" tabindex="-1"><a class="header-anchor" href="#_6-commonjs-基于浏览器端的实现举例" aria-hidden="true">#</a> 6.commonjs-基于浏览器端的实现举例</h2><h3 id="_6-1-初始化项目" tabindex="-1"><a class="header-anchor" href="#_6-1-初始化项目" aria-hidden="true">#</a> 6.1 初始化项目</h3><p>在工程文件中新建如下目录和文件：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>js
    dist //打包生成文件的目录
    src //源码所在的目录
      | module1.js
      | module2.js
      | module3.js
      | app.js //应用主源文件
index.html    //因为CommonJS是基于浏览器端，js文件要跑在浏览器的页面上，所以要有这个html页面
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在根目录下新建如下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  npm init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后根据提示，依次输入如下内容：</p><ul><li><strong>包名</strong>：可以自己起包名，也可以用默认的包名。注意，包名里不能有中文，不能有大写。</li><li><strong>版本</strong>：可以用默认的版本 1.0.0，也可以自己修改包名。</li></ul><p>其他的参数，一路回车即可。</p><p>于是，根目录下会自动生成<code>package.json</code>这个文件。点进去看一下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs_browser&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-下载第三方包-browserify" tabindex="-1"><a class="header-anchor" href="#_6-2-下载第三方包-browserify" aria-hidden="true">#</a> 6.2 下载第三方包：Browserify</h3>`,82),y={href:"http://browserify.org/",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>输入如下命令进行安装：（两个命令都要输入）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    npm install browserify <span class="token operator">-</span>g          <span class="token comment">//全局</span>
    npm install browserify <span class="token operator">--</span>save<span class="token operator">-</span>dev  <span class="token comment">//局部。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中，<code>-dev</code>表示开发依赖。这里解释一下相关概念：</p><ul><li>开发依赖：当前这个包，只在开发环境下使用。</li><li>运行依赖：当前这个包，是在生产环境下使用。</li></ul><h3 id="_6-3-自定义模块-代码运行" tabindex="-1"><a class="header-anchor" href="#_6-3-自定义模块-代码运行" aria-hidden="true">#</a> 6.3 自定义模块 &amp; 代码运行</h3><p>（1）module1.js：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//暴露方式一：module.exports = value</span>

<span class="token comment">//暴露一个对象出去</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;我是 module1&#39;</span><span class="token punctuation">,</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//我们不能再继续写 module.exports = xxx。因为重新赋值，会把之前的赋值覆盖掉。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）module2.js：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//暴露方式一：module.exports = value</span>

<span class="token comment">//暴露一个函数出去</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是 module2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，此时暴露出去的 exports 对象 等价于整个函数。</p><p>（3）module3.js：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//暴露方式二：exports.xxx = value</span>

<span class="token comment">//可以往export对象中不断地添加属性，进行暴露</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">foo1</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;module3 中的 foo1 方法&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

exports<span class="token punctuation">.</span><span class="token function-variable function">foo2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;module3 中的 foo2 方法&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）app.js：（将其他模块汇集到主模块</p><p>引入的路径解释：</p><ul><li><code>./</code>是相对路径，指的是当前路径（app.js的当前路径是src）</li></ul><p>到此，我们的主要代码就写完了。</p><p>但是，如果我们直接在index.html中，像下面这样写，是不行的：（因为浏览器不认识 require 关键字）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ie=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./js/src/app.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了能够让index.html引入app.js，我们需要输入如下命令：</p><p>打包处理js:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    browserify js/src/app.js -o js/dist/bundle.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在index.html中引入打包后的文件：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/dist/bundle.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,23);function S(C,J){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[d,e(a)]),s("：是 Node.js 使用的模块化规范。")])]),k,m,n("ul",null,[n("li",null,[n("a",v,[b,e(a)]),s("：是 "),n("strong",null,[n("a",g,[s("RequireJS"),e(a)])]),s(" 在推广过程中对模块化定义的规范化产出。")])]),h,n("ul",null,[n("li",null,[n("strong",null,[n("a",x,[s("CMD规范"),e(a)])]),s("：是 "),n("strong",null,[n("a",f,[s("SeaJS"),e(a)])]),s(" 在推广过程中对模块化定义的规范化产出。淘宝团队开发。")])]),j,n("p",null,[n("a",q,[s("CommonJS"),e(a)]),s("：是 Node.js 使用的模块化规范。也就是说，Node.js 就是基于 CommonJS 这种模块化规范来编写的。")]),_,n("p",null,[s("这里需要用到"),n("a",y,[s("Browserify"),e(a)]),s("这个工具进行编译打包。Browserify 称为 CommonJS 的浏览器端的打包工具。")]),w])}const N=p(i,[["render",S],["__file","04.html.vue"]]);export{N as default};
