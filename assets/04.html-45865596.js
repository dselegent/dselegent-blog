const e=JSON.parse('{"key":"v-2b517d24","path":"/back_end/nodeJs/04.html","title":"04 【nodejs模块化规范：CommonJS】","lang":"zh-CN","frontmatter":{"description":"04 【nodejs模块化规范：CommonJS】 1.前言 网站越来越复杂，js代码、js文件也越来越多，会遇到一些问题： 文件依赖 全局污染、命名冲突 程序模块化包括： 日期模块 数学计算模块 日志模块 登陆认证模块 报表展示模块等。 所有这些模块共同组成了程序软件系统。 一次编写，多次使用，才是提高效率的核心。","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.icu/back_end/nodeJs/04.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"04 【nodejs模块化规范：CommonJS】"}],["meta",{"property":"og:description","content":"04 【nodejs模块化规范：CommonJS】 1.前言 网站越来越复杂，js代码、js文件也越来越多，会遇到一些问题： 文件依赖 全局污染、命名冲突 程序模块化包括： 日期模块 数学计算模块 日志模块 登陆认证模块 报表展示模块等。 所有这些模块共同组成了程序软件系统。 一次编写，多次使用，才是提高效率的核心。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04 【nodejs模块化规范：CommonJS】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.前言","slug":"_1-前言","link":"#_1-前言","children":[]},{"level":2,"title":"2.模块化的理解","slug":"_2-模块化的理解","link":"#_2-模块化的理解","children":[{"level":3,"title":"2.1 什么是模块化","slug":"_2-1-什么是模块化","link":"#_2-1-什么是模块化","children":[]},{"level":3,"title":"2.2 模块化的好处","slug":"_2-2-模块化的好处","link":"#_2-2-模块化的好处","children":[]}]},{"level":2,"title":"3.模块化规范","slug":"_3-模块化规范","link":"#_3-模块化规范","children":[{"level":3,"title":"3.1 模块化规范的引入","slug":"_3-1-模块化规范的引入","link":"#_3-1-模块化规范的引入","children":[]},{"level":3,"title":"3.2 模块化的概念解读","slug":"_3-2-模块化的概念解读","link":"#_3-2-模块化的概念解读","children":[]},{"level":3,"title":"3.3 模块化规范","slug":"_3-3-模块化规范","link":"#_3-3-模块化规范","children":[]}]},{"level":2,"title":"4.CommonJS 的基本语法","slug":"_4-commonjs-的基本语法","link":"#_4-commonjs-的基本语法","children":[{"level":3,"title":"4.1 CommonJS 的介绍","slug":"_4-1-commonjs-的介绍","link":"#_4-1-commonjs-的介绍","children":[]},{"level":3,"title":"4.2 模块的暴露和引入","slug":"_4-2-模块的暴露和引入","link":"#_4-2-模块的暴露和引入","children":[]},{"level":3,"title":"4.3 模块的暴露和引入","slug":"_4-3-模块的暴露和引入","link":"#_4-3-模块的暴露和引入","children":[]},{"level":3,"title":"4.4 exports 和 module.exports 的区别","slug":"_4-4-exports-和-module-exports-的区别","link":"#_4-4-exports-和-module-exports-的区别","children":[]},{"level":3,"title":"4.5 问题: 暴露的模块到底是谁？","slug":"_4-5-问题-暴露的模块到底是谁","link":"#_4-5-问题-暴露的模块到底是谁","children":[]},{"level":3,"title":"4.6 引入模块的方式：require","slug":"_4-6-引入模块的方式-require","link":"#_4-6-引入模块的方式-require","children":[]},{"level":3,"title":"4.7 主模块","slug":"_4-7-主模块","link":"#_4-7-主模块","children":[]},{"level":3,"title":"4.8 模块的初始化","slug":"_4-8-模块的初始化","link":"#_4-8-模块的初始化","children":[]}]},{"level":2,"title":"5.commonjs-在服务器端的实现举例","slug":"_5-commonjs-在服务器端的实现举例","link":"#_5-commonjs-在服务器端的实现举例","children":[]},{"level":2,"title":"6.commonjs-基于浏览器端的实现举例","slug":"_6-commonjs-基于浏览器端的实现举例","link":"#_6-commonjs-基于浏览器端的实现举例","children":[{"level":3,"title":"6.1 初始化项目","slug":"_6-1-初始化项目","link":"#_6-1-初始化项目","children":[]},{"level":3,"title":"6.2 下载第三方包：Browserify","slug":"_6-2-下载第三方包-browserify","link":"#_6-2-下载第三方包-browserify","children":[]},{"level":3,"title":"6.3 自定义模块 & 代码运行","slug":"_6-3-自定义模块-代码运行","link":"#_6-3-自定义模块-代码运行","children":[]}]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":11.2,"words":3361},"filePathRelative":"back_end/nodeJs/04.md","localizedDate":"2023年1月30日","excerpt":"<h1> 04 【nodejs模块化规范：CommonJS】</h1>\\n<h2> 1.前言</h2>\\n<p>网站越来越复杂，js代码、js文件也越来越多，会遇到<strong>一些问题</strong>：</p>\\n<ul>\\n<li>文件依赖</li>\\n<li>全局污染、命名冲突</li>\\n</ul>\\n<p>程序模块化包括：</p>\\n<ul>\\n<li>日期模块</li>\\n<li>数学计算模块</li>\\n<li>日志模块</li>\\n<li>登陆认证模块</li>\\n<li>报表展示模块等。</li>\\n</ul>\\n<p>所有这些模块共同组成了程序软件系统。</p>\\n<p>一次编写，多次使用，才是提高效率的核心。</p>","autoDesc":true}');export{e as data};
