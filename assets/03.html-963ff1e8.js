const e=JSON.parse(`{"key":"v-299ca485","path":"/back_end/nodeJs/03.html","title":"03 【npm的使用】","lang":"zh-CN","frontmatter":{"description":"03 【npm的使用】 1.包和npm 1.1 什么是包 由于 Node 是一套轻内核的平台，虽然提供了一系列的内置模块，但是不足以满足开发者的需求，于是乎出现了包（package）的概念： 与核心模块类似，就是将一些预先设计好的功能或者说 API 封装到一个文件夹，提供给开发者使用。 Node 本身并没有太多的功能性 API，所以市面上涌现出大量的第三方人员开发出来的 Package。 1.2 包的加载机制 Node.js中使用CommonJs模块化机制，通过npm下载的第三方包，我们在项目中引入第三方包都是：let xx = require('第三方包名')，究竟require方法加载第三方包的原理机制是什么，今天我们来探讨下。","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.cf/back_end/nodeJs/03.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"03 【npm的使用】"}],["meta",{"property":"og:description","content":"03 【npm的使用】 1.包和npm 1.1 什么是包 由于 Node 是一套轻内核的平台，虽然提供了一系列的内置模块，但是不足以满足开发者的需求，于是乎出现了包（package）的概念： 与核心模块类似，就是将一些预先设计好的功能或者说 API 封装到一个文件夹，提供给开发者使用。 Node 本身并没有太多的功能性 API，所以市面上涌现出大量的第三方人员开发出来的 Package。 1.2 包的加载机制 Node.js中使用CommonJs模块化机制，通过npm下载的第三方包，我们在项目中引入第三方包都是：let xx = require('第三方包名')，究竟require方法加载第三方包的原理机制是什么，今天我们来探讨下。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03 【npm的使用】\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.包和npm","slug":"_1-包和npm","link":"#_1-包和npm","children":[{"level":3,"title":"1.1 什么是包","slug":"_1-1-什么是包","link":"#_1-1-什么是包","children":[]},{"level":3,"title":"1.2 包的加载机制","slug":"_1-2-包的加载机制","link":"#_1-2-包的加载机制","children":[]},{"level":3,"title":"1.3 npm 的概念","slug":"_1-3-npm-的概念","link":"#_1-3-npm-的概念","children":[]},{"level":3,"title":"1.4 npm 的安装（不需要单独安装）","slug":"_1-4-npm-的安装-不需要单独安装","link":"#_1-4-npm-的安装-不需要单独安装","children":[]},{"level":3,"title":"1.5 配置 NPM 的全局目录","slug":"_1-5-配置-npm-的全局目录","link":"#_1-5-配置-npm-的全局目录","children":[]}]},{"level":2,"title":"2.NPM 的常用命令","slug":"_2-npm-的常用命令","link":"#_2-npm-的常用命令","children":[]},{"level":2,"title":"3.配置 npm 镜像源","slug":"_3-配置-npm-镜像源","link":"#_3-配置-npm-镜像源","children":[{"level":3,"title":"3.1 方式 1：临时切换镜像源","slug":"_3-1-方式-1-临时切换镜像源","link":"#_3-1-方式-1-临时切换镜像源","children":[]},{"level":3,"title":"3.2 方式 2：切换镜像源","slug":"_3-2-方式-2-切换镜像源","link":"#_3-2-方式-2-切换镜像源","children":[]},{"level":3,"title":"3.3 方式 3：通过 NRM 切换镜像源（推荐）","slug":"_3-3-方式-3-通过-nrm-切换镜像源-推荐","link":"#_3-3-方式-3-通过-nrm-切换镜像源-推荐","children":[]},{"level":3,"title":"3.4 方式 4：安装 cnpm","slug":"_3-4-方式-4-安装-cnpm","link":"#_3-4-方式-4-安装-cnpm","children":[]}]},{"level":2,"title":"4.什么是 npm 脚本","slug":"_4-什么是-npm-脚本","link":"#_4-什么是-npm-脚本","children":[{"level":3,"title":"4.1 使用","slug":"_4-1-使用","link":"#_4-1-使用","children":[]},{"level":3,"title":"4.2 简写形式","slug":"_4-2-简写形式","link":"#_4-2-简写形式","children":[]}]},{"level":2,"title":"5.pnpm","slug":"_5-pnpm","link":"#_5-pnpm","children":[{"level":3,"title":"5.1 pnpm 是什么","slug":"_5-1-pnpm-是什么","link":"#_5-1-pnpm-是什么","children":[]},{"level":3,"title":"5.2 pnpm 的使用","slug":"_5-2-pnpm-的使用","link":"#_5-2-pnpm-的使用","children":[]}]},{"level":2,"title":"6.npm命令总结","slug":"_6-npm命令总结","link":"#_6-npm命令总结","children":[]},{"level":2,"title":"7.使用 nodemon 自动重启服务","slug":"_7-使用-nodemon-自动重启服务","link":"#_7-使用-nodemon-自动重启服务","children":[]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":10.58,"words":3175},"filePathRelative":"back_end/nodeJs/03.md","localizedDate":"2023年1月30日","excerpt":"<h1> 03 【npm的使用】</h1>\\n<h2> 1.包和npm</h2>\\n<h3> 1.1 什么是包</h3>\\n<p>由于 Node 是一套轻内核的平台，虽然提供了一系列的内置模块，但是不足以满足开发者的需求，于是乎出现了包（package）的概念： 与核心模块类似，就是将一些预先设计好的功能或者说 API 封装到一个文件夹，提供给开发者使用。</p>\\n<p>Node 本身并没有太多的功能性 API，所以市面上涌现出大量的第三方人员开发出来的 Package。</p>\\n<h3> 1.2 包的加载机制</h3>\\n<p>Node.js中使用<code>CommonJs</code>模块化机制，通过<code>npm</code>下载的第三方包，我们在项目中引入第三方包都是：<code>let xx = require('第三方包名')</code>，究竟<code>require</code>方法加载第三方包的原理机制是什么，今天我们来探讨下。</p>","autoDesc":true}`);export{e as data};
