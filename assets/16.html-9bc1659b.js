import{ab as t,G as e,H as o,E as s,S as n,N as c,ac as a,W as l}from"./framework-09305b5d.js";const i={},u=a(`<h1 id="_16-【跨域】" tabindex="-1"><a class="header-anchor" href="#_16-【跨域】" aria-hidden="true">#</a> 16 【跨域】</h1><h2 id="_1-什么是跨域" tabindex="-1"><a class="header-anchor" href="#_1-什么是跨域" aria-hidden="true">#</a> 1.什么是跨域</h2><p>跨域，是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript实施的安全限制。浏览器从一个域名的网页去请求另一个域名的资源时，出现域名、端口、协议任一不同，都属于跨域。</p><p>同源策略限制了一下行为：</p><p>Cookie、LocalStorage 和 IndexDB 无法读取</p><p>DOM 和 JS 对象无法获取</p><p>Ajax请求发送不出去</p><p>下面举个例子：</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>cn<span class="token operator">/</span>index<span class="token punctuation">.</span>html 调用 http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xxxyyy<span class="token punctuation">.</span>cn<span class="token operator">/</span>server<span class="token punctuation">.</span>php 非跨域

<span class="token symbol">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">**</span>www<span class="token punctuation">.</span>xxxyyy<span class="token punctuation">.</span>cn<span class="token operator">**</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html 调用  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">**</span>www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>cn<span class="token operator">**</span><span class="token operator">/</span>server<span class="token punctuation">.</span>php  跨域<span class="token punctuation">,</span>主域不同

<span class="token symbol">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">**</span>abc<span class="token operator">**</span><span class="token punctuation">.</span>xxxyyy<span class="token punctuation">.</span>cn<span class="token operator">/</span>index<span class="token punctuation">.</span>html 调用  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">**</span><span class="token keyword">def</span><span class="token operator">**</span><span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>cn<span class="token operator">/</span>server<span class="token punctuation">.</span>php  跨域<span class="token punctuation">,</span>子域名不同

<span class="token symbol">http</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>cn<span class="token operator">:</span><span class="token operator">**</span><span class="token number">8080</span><span class="token operator">**</span><span class="token operator">/</span>index<span class="token punctuation">.</span>html 调用  http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>cn<span class="token operator">/</span>server<span class="token punctuation">.</span>php  跨域<span class="token punctuation">,</span>端口不同

<span class="token operator">**</span>https<span class="token operator">**</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>cn<span class="token operator">/</span>index<span class="token punctuation">.</span>html 调用  <span class="token operator">**</span>http<span class="token operator">**</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>cn<span class="token operator">/</span>server<span class="token punctuation">.</span>php  跨域<span class="token punctuation">,</span>协议不同
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-跨域资源共享cors" tabindex="-1"><a class="header-anchor" href="#_2-跨域资源共享cors" aria-hidden="true">#</a> 2.跨域资源共享CORS</h2><p>这是目前主流的解决方案。</p><p>CORS是一个W3C标准，全称是&quot;跨域资源共享&quot;（Cross-origin resource sharing）。 它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p><p>CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。IE8+：IE8/9需要使用XDomainRequest对象来支持CORS。</p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。 因此，实现CORS通信的关键是<strong>服务器</strong>。</p><p>基本只需要对<strong>服务器</strong>动手脚，前端代码跟同源时一样，也就是不跨域时一样。</p><p><strong>这种方式分为两种请求：</strong></p><p><strong>一种是简单请求，另一种是非简单请求。只要满足下面条件就是简单请求</strong></p><p>请求方式为HEAD、POST 或者 GET</p><p>http头信息不超出以下字段：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Accept</span>、<span class="token class-name">Accept</span><span class="token operator">-</span><span class="token class-name">Language</span> 

<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Language</span>

<span class="token class-name">Last</span><span class="token operator">-</span><span class="token class-name">Event</span><span class="token operator">-</span>ID

<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token punctuation">(</span>限于三个值：application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded、multipart<span class="token operator">/</span>form<span class="token operator">-</span>data、text<span class="token operator">/</span>plain<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么要分为简单请求和非简单请求，因为浏览器对这两种请求方式的处理方式是不同的。</p><h3 id="_2-1-简单请求" tabindex="-1"><a class="header-anchor" href="#_2-1-简单请求" aria-hidden="true">#</a> 2.1 简单请求</h3><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。 下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>GET <span class="token operator">/</span>cors HTTP<span class="token operator">/</span><span class="token number">1.1</span>

Origin<span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//api.bob.com</span>

Host<span class="token operator">:</span> api<span class="token punctuation">.</span>alice<span class="token punctuation">.</span>com

Accept<span class="token operator">-</span>Language<span class="token operator">:</span> en<span class="token operator">-</span>US

Connection<span class="token operator">:</span> keep<span class="token operator">-</span>alive

User<span class="token operator">-</span>Agent<span class="token operator">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><p>如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。 浏览器发现，这个响应头信息没有包含Access-Control-Allow-Origin字段，就知道出错了，从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。</p><p>注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</p><p>如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>  <span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>bob<span class="token punctuation">.</span>com

  <span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Credentials</span><span class="token punctuation">:</span> <span class="token boolean">true</span>

  <span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Expose</span><span class="token operator">-</span><span class="token class-name">Headers</span><span class="token punctuation">:</span> <span class="token class-name">FooBar</span>

  <span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">;</span> charset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头</p><p>**Access-Control-Allow-Origin *<em>:该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个</em>，表示接受任意域名的请求</p><p><strong>Access-Control-Allow-Credentials</strong>: 该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><p><strong>Access-Control-Expose-Headers</strong>:该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。</p><p><strong>withCredentials 属性</strong></p><p>上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。</p><p>另一方面，开发者必须在AJAX请求中打开withCredentials属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IE8/9需用window.XDomainRequest兼容</span>

<span class="token comment">// 前端设置是否带cookie</span>

xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://www.domain2.com:8080/login&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;user=admin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token function">alert</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// jquery</span>

$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>

        <span class="token operator">...</span>

       <span class="token literal-property property">xhrFields</span><span class="token operator">:</span> <span class="token punctuation">{</span>

             <span class="token literal-property property">withCredentials</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token comment">// 前端设置是否带cookie</span>

       <span class="token punctuation">}</span><span class="token punctuation">,</span>

       <span class="token literal-property property">crossDomain</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 会让请求头中包含跨域的额外信息，但不会含cookie</span>

        <span class="token operator">...</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。 但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。</p><p>**需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号*，必须指定明确的、与请求网页一致的域名。**同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。</p><h3 id="_2-2-非简单请求" tabindex="-1"><a class="header-anchor" href="#_2-2-非简单请求" aria-hidden="true">#</a> 2.2 非简单请求</h3><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。</p><p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为&quot;预检&quot;请求（preflight）——浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> url <span class="token operator">=</span> &#39;http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>alice<span class="token punctuation">.</span>com<span class="token operator">/</span>cors&#39;<span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>&#39;PUT&#39;<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>&#39;X<span class="token operator">-</span>Custom<span class="token operator">-</span>Header&#39;<span class="token punctuation">,</span> &#39;<span class="token keyword">value</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>

xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器发现，这是一个非简单请求，就自动发出一个&quot;<strong>预检</strong>&quot;请求，要求服务器确认可以这样请求。下面是这个&quot;预检&quot;请求的HTTP头信息。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  OPTIONS <span class="token operator">/</span>cors HTTP<span class="token operator">/</span><span class="token number">1.1</span>

  Origin<span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//api.bob.com</span>

  Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Method<span class="token operator">:</span> PUT

  Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Headers<span class="token operator">:</span> X<span class="token operator">-</span>Custom<span class="token operator">-</span>Header

  Host<span class="token operator">:</span> api<span class="token punctuation">.</span>alice<span class="token punctuation">.</span>com

  Accept<span class="token operator">-</span>Language<span class="token operator">:</span> en<span class="token operator">-</span>US

  Connection<span class="token operator">:</span> keep<span class="token operator">-</span>alive

  User<span class="token operator">-</span>Agent<span class="token operator">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;预检&quot;请求用的请求方法是<strong>OPTIONS</strong>，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。</p><p>除了Origin字段，&quot;预检&quot;<strong>请求头</strong>信息包括两个特殊字段。</p><p>Access-Control-Request-Method：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是PUT。</p><p>Access-Control-Request-Headers：该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段，上例是X-Custom-Header</p><p><strong>预检请求的回应</strong></p><p>服务器收到&quot;预检&quot;请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨源请求，就可以做出回应</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">200</span> OK

<span class="token class-name">Date</span><span class="token punctuation">:</span> <span class="token class-name">Mon</span><span class="token punctuation">,</span> <span class="token number">01</span> <span class="token class-name">Dec</span> <span class="token number">2008</span> <span class="token number">01</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">39</span> GMT

<span class="token class-name">Server</span><span class="token punctuation">:</span> <span class="token class-name">Apache</span><span class="token operator">/</span><span class="token number">2.0</span><span class="token number">.61</span> <span class="token punctuation">(</span><span class="token class-name">Unix</span><span class="token punctuation">)</span>

<span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>bob<span class="token punctuation">.</span>com

<span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Methods</span><span class="token punctuation">:</span> GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> PUT

<span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Headers</span><span class="token punctuation">:</span> <span class="token class-name">X</span><span class="token operator">-</span><span class="token class-name">Custom</span><span class="token operator">-</span><span class="token class-name">Header</span>

<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">;</span> charset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>

<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Encoding</span><span class="token punctuation">:</span> gzip

<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Length</span><span class="token punctuation">:</span> <span class="token number">0</span>

<span class="token class-name">Keep</span><span class="token operator">-</span><span class="token class-name">Alive</span><span class="token punctuation">:</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> max<span class="token operator">=</span><span class="token number">100</span>

<span class="token class-name">Connection</span><span class="token punctuation">:</span> <span class="token class-name">Keep</span><span class="token operator">-</span><span class="token class-name">Alive</span>

<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token punctuation">:</span> text<span class="token operator">/</span>plain
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,53),r={href:"http://api.bob.xn--com-ys9dj4ud4z1gdcvshr3e",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>如果浏览器否定了&quot;预检&quot;请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出报错信息。</p><p>服务器回应的其他CORS相关字段如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Access-Control-Allow-Methods: GET, POST, PUT

Access-Control-Allow-Headers: X-Custom-Header

Access-Control-Allow-Credentials: <span class="token boolean">true</span>

Access-Control-Max-Age: <span class="token number">1728000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Access-Control-Allow-Methods：该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次&quot;预检&quot;请求。</p><p>Access-Control-Allow-Headers：如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在&quot;预检&quot;中请求的字段。</p><p>Access-Control-Allow-Credentials： 该字段与简单请求时的含义相同。</p><p>Access-Control-Max-Age： 该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是20天（1728000秒），即允许缓存该条回应1728000秒（即20天），在此期间，不用发出另一条预检请求。</p><p><strong>浏览器正常请求回应</strong></p><p>一旦服务器通过了&quot;预检&quot;请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>PUT <span class="token operator">/</span>cors HTTP<span class="token operator">/</span><span class="token number">1.1</span>

Origin<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token class-name">api<span class="token punctuation">.</span>bob<span class="token punctuation">.</span>com</span>

Host<span class="token punctuation">:</span> api<span class="token punctuation">.</span>alice<span class="token punctuation">.</span>com

X<span class="token operator">-</span>Custom<span class="token operator">-</span>Header<span class="token punctuation">:</span> <span class="token keyword">value</span>

Accept<span class="token operator">-</span>Language<span class="token punctuation">:</span> en<span class="token operator">-</span><span class="token class-name">US</span>

Connection<span class="token punctuation">:</span> keep<span class="token operator">-</span>alive

User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span><span class="token range operator">..</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器的正常CORS请求。上面头信息的Origin字段是浏览器自动添加的。下面是服务器正常的回应。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Access</span><span class="token operator">-</span><span class="token class-name">Control</span><span class="token operator">-</span><span class="token class-name">Allow</span><span class="token operator">-</span><span class="token class-name">Origin</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>bob<span class="token punctuation">.</span>com

<span class="token class-name">Content</span><span class="token operator">-</span><span class="token class-name">Type</span><span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">;</span> charset<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Access-Control-Allow-Origin字段是每次回应都必定包含的</p><h2 id="_3-nodejs-跨域处理" tabindex="-1"><a class="header-anchor" href="#_3-nodejs-跨域处理" aria-hidden="true">#</a> 3.Nodejs 跨域处理</h2><h3 id="_3-1-设置允许域名跨域" tabindex="-1"><a class="header-anchor" href="#_3-1-设置允许域名跨域" aria-hidden="true">#</a> 3.1 设置允许域名跨域</h3><ul><li>设置允许所有域名跨域</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token comment">// 设置允许所有域名跨域：</span>
app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//设置允许跨域的域名，*代表允许任意域名跨域</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//允许的header类型</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;content-type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//跨域允许的请求方式 </span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;options&#39;</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//让options尝试请求快速结束</span>
    <span class="token keyword">else</span>
        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>设置允许多个域名跨域：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> orginList<span class="token operator">=</span><span class="token punctuation">[</span>
      <span class="token string">&quot;http://www.bibi.com&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;http://www.qq.com&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;http://www.baidu.com&quot;</span>
  <span class="token punctuation">]</span>
  <span class="token comment">// 防止undefined 报错</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span>orginList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//允许的header类型</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Headers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content-type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//跨域允许的请求方式</span>
    res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Methods&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置允许跨域的域名，*代表允许任意域名跨域</span>
        res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;options&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          res<span class="token punctuation">.</span><span class="token function">sendStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//让options尝试请求快速结束</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
          <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">sendStatus</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-利用中间件-cors" tabindex="-1"><a class="header-anchor" href="#_3-2-利用中间件-cors" aria-hidden="true">#</a> 3.2 利用中间件 cors</h3><p>安装 npm i cors -S</p><p>使用方式一 ： 为所有源启用跨域</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span>  cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span>
 app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方式二 ： 按条件配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>
 <span class="token keyword">var</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cors&#39;</span><span class="token punctuation">)</span>
 <span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token keyword">var</span> whitelist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;http://example1.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://example2.com&#39;</span><span class="token punctuation">]</span>
<span class="token comment">//  异步配置</span>
  <span class="token keyword">var</span> corsOptions<span class="token punctuation">;</span>
 <span class="token keyword">var</span> <span class="token function-variable function">corsOptionsDelegate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>whitelist<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">&#39;Origin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    corsOptions <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token comment">//在CORS响应中反映(启用)请求的起源</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     corsOptions <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token comment">// 拦截请求</span>
  <span class="token punctuation">}</span>
  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> corsOptions<span class="token punctuation">)</span> <span class="token comment">//  error  options</span>
<span class="token punctuation">}</span>

 app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token function">cors</span><span class="token punctuation">(</span>corsOptionsDelegate<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span>corsOptions<span class="token punctuation">.</span>origin  <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;options&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">sendStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//让options尝试请求快速结束</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">sendStatus</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//被拦截</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
  app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/cors&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
 app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;start&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25);function d(v,m){const p=l("ExternalLinkIcon");return e(),o("div",null,[u,s("p",null,[n("上面的HTTP回应中，关键的是Access-Control-Allow-Origin字段，表示"),s("a",r,[n("http://api.bob.com可以请求数据"),c(p)]),n("。该字段也可以设为星号，表示同意任意跨源请求。")]),k])}const g=t(i,[["render",d],["__file","16.html.vue"]]);export{g as default};
