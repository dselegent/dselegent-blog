const e=JSON.parse('{"key":"v-03e25704","path":"/front_end/js_advanced/typescript/05.html","title":"6.接口（ interface）","lang":"zh-CN","frontmatter":{"description":"6.接口（ interface） 在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。 6.1 什么是接口 在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。 TypeScript 中的接口是一个非常灵活的概念，除了可用于[对类的一部分行为进行抽象]以外，也常用于对「对象的形状（Shape）」进行描述。 6.2 基本使用 当一个对象类型被多次使用时，一般会使用接口（interface）来描述对象的类型，达到复用的目的","head":[["meta",{"property":"og:url","content":"https://blog.dselegent.cf/front_end/js_advanced/typescript/05.html"}],["meta",{"property":"og:site_name","content":"dselegent-blog"}],["meta",{"property":"og:title","content":"6.接口（ interface）"}],["meta",{"property":"og:description","content":"6.接口（ interface） 在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。 6.1 什么是接口 在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。 TypeScript 中的接口是一个非常灵活的概念，除了可用于[对类的一部分行为进行抽象]以外，也常用于对「对象的形状（Shape）」进行描述。 6.2 基本使用 当一个对象类型被多次使用时，一般会使用接口（interface）来描述对象的类型，达到复用的目的"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T06:57:36.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T06:57:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6.接口（ interface）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-01-30T06:57:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"6.1 什么是接口","slug":"_6-1-什么是接口","link":"#_6-1-什么是接口","children":[]},{"level":2,"title":"6.2 基本使用","slug":"_6-2-基本使用","link":"#_6-2-基本使用","children":[]},{"level":2,"title":"6.3 可选 | 只读属性","slug":"_6-3-可选-只读属性","link":"#_6-3-可选-只读属性","children":[]},{"level":2,"title":"6.4 任意属性","slug":"_6-4-任意属性","link":"#_6-4-任意属性","children":[]},{"level":2,"title":"6.5 绕开额外属性检查的方式","slug":"_6-5-绕开额外属性检查的方式","link":"#_6-5-绕开额外属性检查的方式","children":[{"level":3,"title":"6.5.1 类型断言","slug":"_6-5-1-类型断言","link":"#_6-5-1-类型断言","children":[]},{"level":3,"title":"6.5.2 索引签名","slug":"_6-5-2-索引签名","link":"#_6-5-2-索引签名","children":[]}]},{"level":2,"title":"7.1 Objects / Functions","slug":"_7-1-objects-functions","link":"#_7-1-objects-functions","children":[]},{"level":2,"title":"7.2 Other Types","slug":"_7-2-other-types","link":"#_7-2-other-types","children":[]},{"level":2,"title":"7.3 接口可以定义多次,类型别名不可以","slug":"_7-3-接口可以定义多次-类型别名不可以","link":"#_7-3-接口可以定义多次-类型别名不可以","children":[]},{"level":2,"title":"7.4 扩展","slug":"_7-4-扩展","link":"#_7-4-扩展","children":[{"level":3,"title":"7.4.1 基本使用","slug":"_7-4-1-基本使用","link":"#_7-4-1-基本使用","children":[]},{"level":3,"title":"7.4.2 和type的区别","slug":"_7-4-2-和type的区别","link":"#_7-4-2-和type的区别","children":[]}]}],"git":{"createdTime":1675061856000,"updatedTime":1675061856000,"contributors":[{"name":"dselegent","email":"1799661558@qq.com","commits":1}]},"readingTime":{"minutes":6.51,"words":1953},"filePathRelative":"front_end/js_advanced/typescript/05.md","localizedDate":"2023年1月30日","excerpt":"<h1> 6.接口（ interface）</h1>\\n<p>在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。</p>\\n<h2> 6.1 什么是接口</h2>\\n<p>在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。</p>\\n<p>TypeScript 中的接口是一个非常灵活的概念，除了可用于[对类的一部分行为进行抽象]以外，也常用于对「对象的形状（Shape）」进行描述。</p>\\n<h2> 6.2 基本使用</h2>\\n<p>当一个对象类型被多次使用时，一般会使用接口（<code>interface</code>）来描述对象的类型，达到复用的目的</p>","autoDesc":true}');export{e as data};
